[{"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js":"1","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js":"2","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js":"3","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js":"4","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx":"5","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js":"6","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx":"7","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx":"8","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx":"9","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx":"10","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js":"11","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js":"12","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js":"13","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js":"14","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js":"15","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js":"16","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js":"17","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js":"18","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js":"19","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx":"20","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx":"21","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx":"22","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx":"23","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx":"24","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js":"25","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Search.jsx":"26","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\ConnectionRequest.jsx":"27","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\CardHolder.jsx":"28","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\Connection.jsx":"29","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\GridComponent.jsx":"30","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation\\Recommendation.jsx":"31","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\index.js":"32","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Skills.jsx":"33","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Alerts\\NoResults.jsx":"34","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Recommendations.jsx":"35","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Connections.jsx":"36","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\ProfileContent.jsx":"37","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\PopupWindow.jsx":"38","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer\\Footer.jsx":"39","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Header\\Header.jsx":"40","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ThemeToggler\\ThemeToggler.jsx":"41","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo\\ProfileInfo.jsx":"42","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\Skill.jsx":"43"},{"size":829,"mtime":1613711181393,"results":"44","hashOfConfig":"45"},{"size":708,"mtime":1614883143542,"results":"46","hashOfConfig":"45"},{"size":2268,"mtime":1615207447192,"results":"47","hashOfConfig":"45"},{"size":4444,"mtime":1615202342837,"results":"48","hashOfConfig":"45"},{"size":2391,"mtime":1615225425603,"results":"49","hashOfConfig":"45"},{"size":407,"mtime":1613711306439,"results":"50","hashOfConfig":"45"},{"size":7301,"mtime":1615041288385,"results":"51","hashOfConfig":"45"},{"size":414,"mtime":1615036732107,"results":"52","hashOfConfig":"45"},{"size":380,"mtime":1615037286386,"results":"53","hashOfConfig":"45"},{"size":4883,"mtime":1615225631795,"results":"54","hashOfConfig":"45"},{"size":496,"mtime":1615204955953,"results":"55","hashOfConfig":"45"},{"size":430,"mtime":1614177239846,"results":"56","hashOfConfig":"45"},{"size":236,"mtime":1614177269771,"results":"57","hashOfConfig":"45"},{"size":719,"mtime":1615205147996,"results":"58","hashOfConfig":"45"},{"size":696,"mtime":1615125829077,"results":"59","hashOfConfig":"45"},{"size":124,"mtime":1614334519892,"results":"60","hashOfConfig":"45"},{"size":1436,"mtime":1615204111108,"results":"61","hashOfConfig":"45"},{"size":298,"mtime":1614264423237,"results":"62","hashOfConfig":"45"},{"size":343,"mtime":1615202309723,"results":"63","hashOfConfig":"45"},{"size":1966,"mtime":1614884721447,"results":"64","hashOfConfig":"45"},{"size":3495,"mtime":1615220960462,"results":"65","hashOfConfig":"45"},{"size":3082,"mtime":1615162829968,"results":"66","hashOfConfig":"45"},{"size":5217,"mtime":1615225066241,"results":"67","hashOfConfig":"45"},{"size":4572,"mtime":1615224396457,"results":"68","hashOfConfig":"45"},{"size":158,"mtime":1615202358207,"results":"69","hashOfConfig":"45"},{"size":4387,"mtime":1615208816223,"results":"70","hashOfConfig":"45"},{"size":2239,"mtime":1615207859853,"results":"71","hashOfConfig":"45"},{"size":1652,"mtime":1615209528589,"results":"72","hashOfConfig":"45"},{"size":1763,"mtime":1615210696235,"results":"73","hashOfConfig":"45"},{"size":810,"mtime":1615224340404,"results":"74","hashOfConfig":"45"},{"size":1976,"mtime":1615211004093,"results":"75","hashOfConfig":"45"},{"size":66,"mtime":1615032761954,"results":"76","hashOfConfig":"45"},{"size":5846,"mtime":1615225490250,"results":"77","hashOfConfig":"45"},{"size":329,"mtime":1615031716912,"results":"78","hashOfConfig":"45"},{"size":5925,"mtime":1615225482273,"results":"79","hashOfConfig":"45"},{"size":1062,"mtime":1615207938023,"results":"80","hashOfConfig":"45"},{"size":8811,"mtime":1615225425565,"results":"81","hashOfConfig":"45"},{"size":1224,"mtime":1615194678331,"results":"82","hashOfConfig":"45"},{"size":740,"mtime":1615225425561,"results":"83","hashOfConfig":"45"},{"size":8502,"mtime":1615226257236,"results":"84","hashOfConfig":"45"},{"size":470,"mtime":1615225339983,"results":"85","hashOfConfig":"45"},{"size":863,"mtime":1615225508392,"results":"86","hashOfConfig":"45"},{"size":3573,"mtime":1615225244526,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1tgqvh",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"163","usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"168","usedDeprecatedRules":"90"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"90"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"90"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js",[],["189","190"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx",["191"],"import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, useLocation, Redirect, withRouter } from \"react-router-dom\";\r\nimport { useTransition, animated } from \"react-spring\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport Settings from './Settings';\r\nimport Home from './Home';\r\nimport Profile from './Profile';\r\nimport Search from './Search';\r\nimport Login from './Login';\r\nimport SignUp from './SignUp';\r\nimport Header from \"../containers/Header/Header\";\r\nimport Footer from \"../components/Footer/Footer\";\r\n\r\nimport * as actions from '../store/actions';\r\n\r\nconst Main = (props) => {\r\n    return (\r\n        <BrowserRouter>\r\n            <div>\r\n                <Header />\r\n                <Content isAuthenticated={props.isAuthenticated} />\r\n                <Footer />\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nconst Content = ({ isAuthenticated }) => {\r\n    const location = useLocation();\r\n    const transitions = useTransition(location, (location) => location.pathname, {\r\n        from: { position: \"absolute\", opacity: 0 },\r\n        enter: { opacity: 1 },\r\n        leave: { opacity: 0 },\r\n    });\r\n\r\n    let routes = (item) => (\r\n        <Switch location={item}>\r\n            <Route path=\"/\" exact component={Login} />\r\n            <Route path=\"/signup\" exact component={SignUp} />\r\n            <Route path=\"/search\" component={Search} />\r\n            <Route path=\"/profiles\" component={Profile} />\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    );\r\n\r\n    if (isAuthenticated) routes = (item) => (\r\n        <Switch location={item}>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/settings\" exact component={Settings} />\r\n            <Route path=\"/search\" component={Search} />\r\n            <Route path=\"/profiles\" component={Profile} />\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    );\r\n\r\n    return transitions.map(({ item, props, key }) => (\r\n        <animated.div key={key} style={props}>\r\n            {routes(item)}\r\n        </animated.div>\r\n    ));\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: !(state.token === null || state.token === undefined),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogout: () => dispatch(actions.logout('/'))\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx",["192"],"import React, { Component } from 'react'\r\nimport {\r\n    Input, Stack, Button, InputGroup, Box,\r\n    HStack, Divider, FormControl, useToast, Heading, Text, InputRightElement, IconButton, Spinner, ReactRouterLink, Image\r\n} from '@chakra-ui/react';\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\n\r\nimport { createUser } from '../api';\r\nimport { connect } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst withToast = (Component) => {\r\n    return (props) => {\r\n        const toast = useToast();\r\n        const history = useHistory();\r\n        return <Component {...props} toast={toast} history={history} />;\r\n    }\r\n}\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        passwordConfirmed: false,\r\n        show: false,\r\n        loading: false\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({\r\n            ...this.state,\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let textField = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            [field]: textField\r\n        },\r\n            function () { if (field === \"confirmPassword\" || field === \"password\") this.checkPassword(textField) });\r\n\r\n    }\r\n\r\n    checkPassword(textField) {\r\n        if (this.state.confirmPassword === this.state.password) {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: false\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            ...this.state,\r\n            loading: true\r\n        })\r\n\r\n        const result = await createUser((({ firstName, lastName, email, password }) => ({ firstName, lastName, email, password }))(this.state));\r\n        if (result.data) {\r\n            this.props.toast({\r\n                position: \"bottom-left\",\r\n                title: `Account created successfully`,\r\n                description: `Sign in with your email and password`,\r\n                status: \"success\",\r\n                duration: 7000,\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n            this.props.history.push('/');\r\n        } else {\r\n            this.props.toast({\r\n                position: \"bottom-left\",\r\n                title: `Account creation failed`,\r\n                description: `${result.message}`,\r\n                status: \"error\",\r\n                duration: 7000,\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let form = (<Box p={8} maxWidth=\"85%\" borderWidth={3} borderRadius={8} boxShadow=\"lg\" bg=\"white.200\" borderColor=\"purple.100\">\r\n            <HStack textAlign=\"center\" color=\"blueGreen.100\" textStyle=\"h1\" wrap=\"wrap\">\r\n                <Heading fontSize=\"24px\"> Create Your Own </Heading> <Heading fontSize=\"24px\" color=\"purple.700\">Volunteer Profile! </Heading>\r\n            </HStack>\r\n            <Box my={4} textAlign=\"left\">\r\n                <form action='submit' onSubmit={this.submitHandler}>\r\n                    <Stack spacing={3}>\r\n                        <HStack>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='text' onChange={this.handleChange.bind(this, \"firstName\")} value={this.state.firstName} placeholder='First Name' bg=\"white.100\" color=\"black.600\" width=\"100%\" borderColor=\"blueGreen.100\" />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='text' onChange={this.handleChange.bind(this, \"lastName\")} value={this.state.lastName} placeholder='Last Name' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                        </HStack>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type='email' onChange={this.handleChange.bind(this, \"email\")} value={this.state.email} placeholder='Email' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                            </InputGroup>\r\n                        </FormControl>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type={this.state.show ? \"text\" : \"password\"} onChange={this.handleChange.bind(this, \"password\")} value={this.state.password} aria-label='password' placeholder='Password' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                <InputRightElement>\r\n                                    <IconButton aria-label=\"view password\" h=\"1.75rem\" colorScheme=\"gray\" icon={<ViewIcon />} size=\"sm\" onClick={this.handleClick.bind(this)} />\r\n                                </InputRightElement>\r\n                            </InputGroup>\r\n                        </FormControl>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type='password' focusBorderColor={this.state.passwordConfirmed ? this.state.password === \"\" ? \"blue.400\" : \"green.400\" : \"red.400\"} value={this.state.confirmPassword} borderColor={this.state.passwordConfirmed ? this.state.password === \"\" ? \"blueGreen.400\" : \"green.400\" : \"red.400\"} onChange={this.handleChange.bind(this, \"confirmPassword\")} aria-label='Confirm password' placeholder='Confirm Password' bg=\"white.100\" color=\"black.600\" />\r\n                            </InputGroup>\r\n                        </FormControl>\r\n\r\n                        <Divider />\r\n\r\n                        <Button type='submit' colorScheme=\"purple\" isLoading={this.state.loading} isDisabled={!this.state.passwordConfirmed}>Sign Up!</Button>\r\n                    </Stack>\r\n                    <Link as={ReactRouterLink} to=\"/\">\r\n                        <Text textStyle=\"h2\" color=\"purple.700\" pt={4}>\r\n                            Already Registered? Sign In\r\n                    </Text>\r\n                    </Link>\r\n                </form>\r\n            </Box>\r\n        </Box>);\r\n\r\n        return (\r\n            <HStack spacing={20} pt={window.innerHeight / 15} px={window.innerWidth / 45} justify=\"center\">\r\n                <Image\r\n                    boxSize=\"20%\"\r\n                    src=\"/signup-bg1.png\"\r\n                />\r\n                {form}\r\n                <Image\r\n                    boxSize=\"20%\"\r\n                    src=\"/signup-bg2.png\"\r\n                />\r\n            </HStack>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withToast(SignUp));","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js",["193","194"],"import { postRequest, putRequest, deleteRequest } from \"./utils\";\r\n\r\nconst BASE_URL = \"users\";\r\nconst URL = \"recommendations\";\r\n\r\nexport const submitRecommendation = (userId, data) => postRequest(`${BASE_URL}/${userId}/${URL}`, data);\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx",["195"],"import {\r\n    Box,\r\n    FormControl,\r\n    Input,\r\n    toast\r\n} from '@chakra-ui/react';\r\nimport React, { Component } from 'react';\r\nimport GridComponent from '../../components/ContainerTemplates/GridComponent';\r\n\r\n\r\nimport { editUserProfile } from '../../api';\r\nimport { connect } from 'react-redux';\r\n\r\n//TODO: Complete form control\r\nclass ChangePassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            currentPassword:'',\r\n            password:'',\r\n            confirmPassword:'',\r\n            passwordConfirmed: false,\r\n            loading:false\r\n         };\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let textField = e.target.value;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            [field]: textField\r\n        },\r\n        function () { if (field === \"confirmPassword\" || field === \"password\") this.checkPassword(textField) });\r\n\r\n    }\r\n\r\n    checkPassword(textField) {\r\n        if (this.state.confirmPassword === this.state.password && this.state.password!=\"\") {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: false\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            ...this.state,\r\n            loading:true\r\n        })\r\n\r\n        await editUserProfile(this.props.user, { method: 'change-password', oldPass: this.state.currentPassword, newPass: this.state.password })\r\n        .then((result)=>{\r\n            if (result.data) {\r\n                toast({\r\n                    position: \"bottom-left\",\r\n                    title: `Password changed successfully`,\r\n                    //description: `You have updated your name to '${first_name} ${last_name}'`,\r\n                    status: \"success\",\r\n                    isClosable: true,\r\n                    htmlWidth: 200\r\n                });\r\n            } else {\r\n                toast({\r\n                    position: \"bottom-left\",\r\n                    title: 'Changing password failed',\r\n                    description: result.message,\r\n                    status: \"error\",\r\n                    isClosable: true,\r\n                    htmlWidth: 200\r\n                });\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error)\r\n        })\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            loading:false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form action='submit' onSubmit={this.submitHandler.bind(this)}>\r\n                <GridComponent heading=\"Change Your Password\" isConfirm={true} loading={this.state.loading} show={this.state.passwordConfirmed?true:false}>\r\n                    <FormControl align=\"center\">\r\n                        <Box borderColor=\"blue.500\" w=\"50%\">\r\n                            <Input\r\n                                isRequired\r\n                                type=\"password\"\r\n                                placeholder=\"Current Password\"\r\n                                size=\"lg\"\r\n                                value={this.state.currentPassword}\r\n                                onChange={this.handleChange.bind(this,\"currentPassword\")}\r\n                            />\r\n                        </Box>\r\n                    </FormControl>\r\n                    <FormControl align=\"center\">\r\n                        <Box borderColor=\"blue.500\" w=\"50%\">\r\n                            <Input\r\n                                isRequired\r\n                                type=\"password\"\r\n                                placeholder=\"New Password\"\r\n                                colorScheme=\"black\"\r\n                                size=\"lg\"\r\n                                onChange={this.handleChange.bind(this,\"password\")}\r\n                            />\r\n                        </Box>\r\n                    </FormControl>\r\n                    <FormControl align=\"center\">\r\n                        <Box borderColor=\"blue.500\" w=\"50%\">\r\n                            <Input\r\n                                type=\"password\"\r\n                                placeholder=\"Confirm New Password\"\r\n                                colorScheme=\"black\"\r\n                                size=\"lg\"\r\n                                focusBorderColor={this.state.passwordConfirmed ? this.state.password === \"\" ? \"blue.400\" : \"green.400\" : \"red.400\"} \r\n                                value={this.state.confirmPassword} \r\n                                borderColor={this.state.passwordConfirmed ? this.state.password === '' ? \"blueGreen.400\" : \"green.400\" : \"red.400\"}\r\n                                onChange={this.handleChange.bind(this,\"confirmPassword\")}\r\n                            />\r\n                        </Box>\r\n                    </FormControl>\r\n                </GridComponent>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, null)(ChangePassword);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Search.jsx",["196","197"],"import { React, useState, useEffect, Redirect } from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport {\r\n    VStack,\r\n    Text,\r\n    Image,\r\n    HStack,\r\n    SkeletonCircle,\r\n    Skeleton,\r\n    Alert,\r\n    AlertIcon,\r\n    useToast\r\n} from \"@chakra-ui/react\"\r\nimport { searchUsers } from '../api';\r\nimport Connection from '../components/Connection/Connection';\r\n\r\nconst Search = () => {\r\n    const location = useLocation();\r\n    const toast = useToast();\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [networkError, setNetworkError] = useState(false);\r\n    const [noResults, setNoResults] = useState(false);\r\n    const [connections, setConnections] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        if (!location.state) return <Redirect to='/' />;\r\n        const keyword = location.state.keyword;\r\n        const results = await searchUsers(keyword);\r\n        if (results.data) {\r\n            setConnections(results.data);\r\n        } else {\r\n            if (results.code === 1) {\r\n                toast({\r\n                    position: \"bottom-left\",\r\n                    title: 'Network Error',\r\n                    description: 'Please check your internet connection',\r\n                    status: \"error\",\r\n                    isClosable: true,\r\n                    htmlWidth: 200\r\n                });\r\n                setNetworkError(true);\r\n            } else {\r\n                setNoResults(true);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }, [])\r\n\r\n    let results = (\r\n        <VStack w=\"40%\" h=\"100%\">\r\n            <HStack spacing={1} wrap=\"wrap\">\r\n                <Text color=\"gray.700\" fontWeight=\"bold\" fontSize={18}>Search results for</Text>\r\n                <Text color=\"purple.700\" fontWeight=\"bold\" fontSize={18}>{location.state.keyword}</Text>\r\n            </HStack>\r\n            <VStack w=\"100%\" p={8} verticalAlign=\"center\" alignContent=\"center\" h={window.innerHeight / 1.4} borderWidth={3} borderRadius={8} VStackShadow=\"lg\" bg=\"white.200\" borderColor=\"purple.100\" spacing={6} overflowX=\"hidden\" overflowY=\"auto\">\r\n                {loading ? <LoadingScreen />\r\n                    : networkError ? <NetworkError />\r\n                        : noResults ? <NoResults />\r\n                            : connections.map((obj =>\r\n                                <Connection\r\n                                    widthAuto\r\n                                    name={`${obj.first_name} ${obj.last_name}`}\r\n                                    user={obj.id}\r\n                                    image={obj.profile_pic} />\r\n                            ))}\r\n            </VStack>\r\n        </VStack>\r\n    );\r\n    return (\r\n        <HStack spacing={20} pt={window.innerHeight / 25} px={window.innerWidth / 45} justify=\"center\">\r\n            <Image\r\n                boxSize=\"20%\"\r\n                src=\"/signup-bg1.png\"\r\n            />\r\n            {results}\r\n            <Image\r\n                boxSize=\"20%\"\r\n                src=\"/signup-bg2.png\"\r\n            />\r\n        </HStack>\r\n    );\r\n}\r\n\r\nconst LoadingScreen = () => {\r\n    return ([\r\n        <HStack w=\"100%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"100%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"100%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"100%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"100%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"100%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>\r\n    ]);\r\n}\r\n\r\nconst NoResults = () => {\r\n    return (\r\n        <Alert status=\"info\" colorScheme=\"purple\" borderRadius=\"1rem\" h=\"25%\">\r\n            <AlertIcon />\r\n             There are no users for the given name\r\n        </Alert>\r\n    );\r\n}\r\n\r\nconst NetworkError = () => {\r\n    return (\r\n        <Alert status=\"warning\" borderRadius=\"1rem\" h=\"25%\">\r\n            <AlertIcon />\r\n             Cannot connect to the server. Please check your internet connection\r\n        </Alert>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Search;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\ConnectionRequest.jsx",["198"],"import {\r\n    Avatar,\r\n    Button,\r\n    HStack,\r\n    Spacer,\r\n    StackDivider,\r\n    VStack,\r\n} from \"@chakra-ui/react\"\r\nimport {\r\n    CheckIcon,\r\n    CloseIcon,\r\n} from '@chakra-ui/icons'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst ConnectionRequest = ({ name, onAccept, onReject, user, loader, loadingId, image }) => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <HStack borderWidth=\"1px\" borderRadius=\"lg\" bg=\"white\" px={4} py={2} bg=\"purple.100\" boxShadow=\"lg\">\r\n            <Avatar name={name} src={image} borderColor=\"purple.500\"\r\n                    showBorder borderWidth={1}/>\r\n            <VStack spacing={1}>\r\n                <Button\r\n                    fontSize=\"16px\"\r\n                    color=\"gray.700\"\r\n                    onClick={() => { history.push(`/profiles/${name}`, { user }) }}\r\n                    variant=\"link\"\r\n                >\r\n                    {name}\r\n                </Button>\r\n                <StackDivider borderWidth=\"1px\" borderColor=\"purple.200\" />\r\n                <HStack>\r\n                    <Button\r\n                        leftIcon={<CheckIcon boxSize=\"12px\" pb=\"2px\" />}\r\n                        size=\"sm\"\r\n                        variant=\"ghost\"\r\n                        colorScheme=\"blue\"\r\n                        onClick={onAccept}\r\n                        w=\"90px\"\r\n                        isLoading={loader===1 && loadingId===user}\r\n                        isDisabled={loader===2 && loadingId===user}\r\n                    >\r\n                        Accept\r\n                    </Button>\r\n                    <Spacer />\r\n                    <Button\r\n                        leftIcon={<CloseIcon boxSize=\"12px\" pb={1} />}\r\n                        size=\"sm\"\r\n                        variant=\"ghost\"\r\n                        colorScheme=\"red\"\r\n                        onClick={onReject}\r\n                        w=\"90px\"\r\n                        isLoading={loader===2 && loadingId===user}\r\n                        isDisabled={loader===1 && loadingId===user}\r\n                    >\r\n                        Reject\r\n                    </Button>\r\n                </HStack>\r\n            </VStack>\r\n        </HStack>\r\n    );\r\n}\r\n\r\nexport default ConnectionRequest","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\CardHolder.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\Connection.jsx",["199","200"],"import { React } from \"react\"\r\n//import { Link } from \"react-router-dom\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport { Text, Avatar, HStack, Button, Spacer } from \"@chakra-ui/react\"\r\nimport { ExternalLinkIcon } from '@chakra-ui/icons'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Connection({ name, user, image, widthAuto, authUser }) {\r\n    const history = useHistory();\r\n\r\n    const viewProfile = () => {\r\n        if (authUser) {\r\n            if (authUser != user)\r\n                history.push(`/profiles/${name}`, { user });\r\n            else\r\n                history.push('/');\r\n        } else\r\n            history.push(`/profiles/${name}`, { user });\r\n    }\r\n\r\n    return (\r\n        <HStack\r\n            overflowY=\"hidden\"\r\n            h=\"70px\"\r\n            minH={70}\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            px={4}\r\n            py={2}\r\n            bg=\"purple.100\"\r\n            boxShadow=\"lg\"\r\n            spacing={4}\r\n            width={widthAuto ? \"100%\" : \"350px\"}>\r\n            <Avatar name={name} src={image} borderColor=\"purple.500\"\r\n                    showBorder borderWidth={1}/>\r\n            <Text color=\"gray.700\" fontWeight={500} align=\"center\" fontSize={16} overflow=\"hidden\" isTruncated>{name}</Text>\r\n            <Spacer />\r\n            <Button\r\n                leftIcon={<ExternalLinkIcon />}\r\n                variant=\"link\"\r\n                colorScheme=\"blue\"\r\n                pb={1}\r\n                onClick={viewProfile}>\r\n                view\r\n            </Button>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authUser: state.user\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Connection);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\GridComponent.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation\\Recommendation.jsx",["201"],"import { React } from \"react\"\r\n\r\nimport {\r\n    Avatar,\r\n    HStack,\r\n    VStack,\r\n    Text,\r\n    StackDivider,\r\n    Button,\r\n    Spacer\r\n} from '@chakra-ui/react';\r\n\r\nimport { ExternalLinkIcon } from '@chakra-ui/icons';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Recommendation = ({ author, description, image, user, authUser }) => {\r\n    const history = useHistory();\r\n\r\n    const viewProfile = () => {\r\n        if (authUser) {\r\n            if (authUser != user)\r\n                history.push(`/profiles/${author}`, { user });\r\n            else\r\n                history.push('/');\r\n        } else\r\n            history.push(`/profiles/${author}`, { user });\r\n    }\r\n\r\n    return (\r\n        <HStack\r\n            gap={4}\r\n            w=\"100%\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            px={4}\r\n            py={2}\r\n            bg=\"purple.100\"\r\n            boxShadow=\"lg\"\r\n            align=\"top\"\r\n            spacing={3}\r\n            minWidth=\"350px\"\r\n        >\r\n            <Avatar name={author} src={image} borderColor=\"purple.500\"\r\n                showBorder borderWidth={1} />\r\n            <VStack align=\"left\">\r\n                <HStack>\r\n                <Text color=\"gray.600\" fontWeight=\"bold\" align=\"left\">{author}</Text>\r\n                <Spacer />\r\n                <Button\r\n                    leftIcon={<ExternalLinkIcon />}\r\n                    variant=\"link\"\r\n                    colorScheme=\"blue\"\r\n                    pb={1}\r\n                    onClick={viewProfile}>\r\n                    view\r\n                </Button>\r\n                </HStack>\r\n                <StackDivider borderWidth=\"1px\" borderColor=\"purple.200\" />\r\n                <Text>{description}</Text>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authUser: state.user\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Recommendation);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Skills.jsx",["202"],"import SkillCard from '../../components/Skill/Skill';\r\nimport CardHolder from '../../components/ContainerTemplates/CardHolder';\r\nimport NoResults from '../../components/Alerts/NoResults';\r\nimport PopupWindow from '../../components/ContainerTemplates/PopupWindow';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport {\r\n    addSkill,\r\n    deleteSkill,\r\n    validateSkill\r\n} from '../../api'\r\n\r\nimport {\r\n    Button,\r\n    Box,\r\n    Input,\r\n    useDisclosure,\r\n    useToast\r\n} from '@chakra-ui/react';\r\n\r\nimport {\r\n    AddIcon\r\n} from '@chakra-ui/icons';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nconst Skills = ({ skillList, isOwner, loading, isAuthenticated, user }) => {\r\n    const [skills, setSkills] = useState(skillList);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const toast = useToast();\r\n    const [name, setName] = useState('');\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    useEffect(() => { setSkills(skillList) }, [skillList]);\r\n\r\n    const generateSuccessMessage = (title, message) => {\r\n        toast({\r\n            position: \"bottom-left\",\r\n            title: `${title} successfully`,\r\n            description: message,\r\n            status: \"success\",\r\n            isClosable: true,\r\n            htmlWidth: 200\r\n        });\r\n    }\r\n\r\n    const generateErrorMessage = (title, message) => {\r\n        toast({\r\n            position: \"bottom-left\",\r\n            title: `${title} failed`,\r\n            description: message,\r\n            status: \"error\",\r\n            isClosable: true,\r\n            htmlWidth: 200\r\n        });\r\n    }\r\n\r\n    const onAddSkill = async () => {\r\n        setLoading(true);\r\n        const result = await addSkill(user, { name });\r\n        if (result.data) {\r\n            const skillId = result.data;\r\n\r\n            const tempSkills = [...skills];\r\n            tempSkills.push({ id: skillId, name, validations: 0 });\r\n            setSkills(tempSkills);\r\n\r\n            generateSuccessMessage('Skill added', `Added the skill, '${name}' to your profile`);\r\n            onClose();\r\n            setName('')\r\n        } else {\r\n            generateErrorMessage('Adding skill', result.message);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const onDeleteSkill = (skillId, name) => (onClose) => async () => {\r\n        setLoading(true);\r\n        const result = await deleteSkill(user, skillId);\r\n        if(result.data) {\r\n            const skillIndex = skills.findIndex(skill => {\r\n                return skill.id === skillId\r\n            });\r\n            const tempSkills = [...skills];\r\n    \r\n            if (skillIndex > -1) {\r\n                tempSkills.splice(skillIndex, 1);\r\n            }\r\n            setSkills(tempSkills);\r\n            generateSuccessMessage('Skill deleted', `Deleted ${name} from your skills`);\r\n            onClose();\r\n        } else {\r\n            generateErrorMessage('Deleting skill', result.message);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const onValidateSkill = (skillId, name) => (onClose) => async () => {\r\n        setLoading(true);\r\n        const result = await validateSkill(user, skillId);\r\n        if(result.data) {\r\n            const skillIndex = skills.findIndex(skill => {\r\n                return skill.id === skillId\r\n            });\r\n\r\n            const tempSkills = [...skills];\r\n            tempSkills[skillIndex].validations++;\r\n            tempSkills[skillIndex].alreadyValidated = true;\r\n            setSkills(tempSkills);\r\n\r\n            generateSuccessMessage('Skill validated', `You have validated the skill, ${name}`);\r\n            onClose();\r\n        } else {\r\n            generateErrorMessage('Validating skill', result.message);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    let button = isOwner ?\r\n        <Button\r\n            leftIcon={<AddIcon />}\r\n            size=\"sm\"\r\n            variant=\"outline\"\r\n            colorScheme=\"purple\"\r\n            isDisabled={isOpen || loading}\r\n            onClick={onOpen}\r\n        >\r\n            Add Skill\r\n        </Button>\r\n        : <Box h=\"30px\" />;\r\n\r\n    return (\r\n        <CardHolder\r\n            heading=\"Skills\"\r\n            isLoading={loading}\r\n            button={button}\r\n        >\r\n            {skills.length === 0 ? <NoResults message=\"There are no skills\" />\r\n                : skills.map((skill) =>\r\n                    <SkillCard\r\n                        key={skill.id}\r\n                        id={skill.id}\r\n                        isAuth={isAuthenticated}\r\n                        name={skill.name}\r\n                        validations={skill.validations}\r\n                        isOwner={isOwner}\r\n                        isLoading={isLoading}\r\n                        alreadyValidated = {skill.alreadyValidated}\r\n                        onClick={isOwner ? onDeleteSkill : onValidateSkill} />\r\n                )}\r\n            <PopupWindow\r\n                title=\"New Skill\"\r\n                buttonName=\"Add\"\r\n                onClick={onAddSkill}\r\n                isLoading={isLoading}\r\n                isOpen={isOpen}\r\n                isDisabled={name.length===0}\r\n                onClose={onClose}>\r\n                <Input\r\n                    variant=\"outline\"\r\n                    placeholder=\"type your skill...\"\r\n                    bg=\"transparent\"\r\n                    borderColor=\"purple.700\"\r\n                    isRequired\r\n                    isInvalid={name.length === 0}\r\n                    isDisabled={isLoading}\r\n                    onChange={((e) => { setName(e.target.value) }).bind(this)}\r\n                    value={name} />\r\n            </PopupWindow>\r\n        </CardHolder>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: !(state.token === null || state.token === undefined),\r\n        user: state.user\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Skills);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Alerts\\NoResults.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Recommendations.jsx",["203","204","205"],"import Recommendation from '../../components/Recommendation/Recommendation';\r\nimport CardHolder from '../../components/ContainerTemplates/CardHolder';\r\nimport NoResults from '../../components/Alerts/NoResults';\r\nimport PopupWindow from '../../components/ContainerTemplates/PopupWindow';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { submitRecommendation } from '../../api';\r\n\r\nimport {\r\n    Button,\r\n    Box,\r\n    useDisclosure,\r\n    useToast,\r\n    Textarea,\r\n    HStack,\r\n    Avatar,\r\n    Text,\r\n    VStack,\r\n    StackDivider\r\n} from '@chakra-ui/react';\r\n\r\nimport {\r\n    EmailIcon\r\n} from '@chakra-ui/icons';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nconst Recommendations = ({ recommendationList, loading, isOwner, isAuthenticated, user, firstName, lastName, profilePic, authUser }) => {\r\n    const [recommendations, setRecommendations] = useState(recommendationList);\r\n    const [description, setDescription] = useState('');\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [alreadyPosted, setAlreadyPosted] = useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const toast = useToast();\r\n\r\n    useEffect(() => { \r\n        setRecommendations(recommendationList);\r\n        recommendationList.forEach(recommendation => {\r\n            if (recommendation.id == authUser) setAlreadyPosted(true);\r\n        }); \r\n    }, [recommendationList]);\r\n\r\n    const generateSuccessMessage = (title, message) => {\r\n        toast({\r\n            position: \"bottom-left\",\r\n            title: `${title} successfully`,\r\n            description: message,\r\n            status: \"success\",\r\n            isClosable: true,\r\n            htmlWidth: 200\r\n        });\r\n    }\r\n\r\n    const generateErrorMessage = (title, message) => {\r\n        toast({\r\n            position: \"bottom-left\",\r\n            title: `${title} failed`,\r\n            description: message,\r\n            status: \"error\",\r\n            isClosable: true,\r\n            htmlWidth: 200\r\n        });\r\n    }\r\n\r\n    const onPostRecommendation = async () => {\r\n        setLoading(true);\r\n        const result = await submitRecommendation(user, { description });\r\n        if (result.data) {\r\n            const tempRecommendations = [...recommendations];\r\n            console.log(tempRecommendations);\r\n            tempRecommendations.push({ id: tempRecommendations.length + 1, first_name: firstName, last_name: lastName, description, profile_pic: profilePic });\r\n            setRecommendations(tempRecommendations);\r\n            setAlreadyPosted(true)\r\n\r\n            generateSuccessMessage('Recommendation posted', `Your recommendation has posted`);\r\n            onClose();\r\n            setDescription('')\r\n        } else {\r\n            generateErrorMessage('Posting recommendation', result.message);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    let button = !isOwner && isAuthenticated ?\r\n        <Button\r\n            leftIcon={<EmailIcon />}\r\n            size=\"sm\"\r\n            variant=\"outline\"\r\n            colorScheme=\"purple\"\r\n            isDisabled={isOpen || loading || alreadyPosted}\r\n            onClick={onOpen}\r\n        >\r\n            Post Recommendation\r\n        </Button>\r\n        : <Box h=\"30px\" />;\r\n\r\n    return (\r\n        <CardHolder\r\n            heading=\"Recommendations\"\r\n            isLoading={loading}\r\n            button={button}\r\n        >\r\n            {recommendations.length === 0 ? <NoResults message=\"There are no recommendations\" />\r\n                : recommendations.map((recommendation, index) =>\r\n                    <Recommendation\r\n                        key={index}\r\n                        image={recommendation.profile_pic}\r\n                        author={`${recommendation.first_name} ${recommendation.last_name}`}\r\n                        user={recommendation.id}\r\n                        description={recommendation.description}\r\n                    />\r\n                )}\r\n            <PopupWindow\r\n                title=\"Post Recommendation\"\r\n                buttonName=\"Post\"\r\n                onClick={onPostRecommendation}\r\n                isLoading={isLoading}\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                isDisabled={description.length===0}>\r\n                <HStack\r\n                    gap={4}\r\n                    w=\"100%\"\r\n                    px={4}\r\n                    py={2}\r\n                    align=\"top\"\r\n                    spacing={3}\r\n                    minWidth=\"350px\"\r\n                >\r\n                    <Avatar name={`${firstName} ${lastName}`} src={profilePic} borderColor=\"purple.500\" showBorder borderWidth={1}/>\r\n                    <VStack align=\"left\">\r\n                        <Text color=\"gray.600\" fontWeight=\"bold\" align=\"left\">{firstName} {lastName}</Text>\r\n                        <StackDivider borderWidth=\"1px\" borderColor=\"purple.200\" />\r\n                        <Textarea\r\n                            w=\"280px\"\r\n                            variant=\"outline\"\r\n                            placeholder=\"type your recommendation...\"\r\n                            bg=\"transparent\"\r\n                            borderColor=\"purple.700\"\r\n                            isRequired\r\n                            isInvalid={description.length === 0}\r\n                            isDisabled={isLoading}\r\n                            onChange={((e) => { setDescription(e.target.value) }).bind(this)}\r\n                            value={description} />\r\n                    </VStack>\r\n                </HStack>\r\n            </PopupWindow>\r\n        </CardHolder>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: !(state.token === null || state.token === undefined),\r\n        firstName: state.firstName,\r\n        lastName: state.lastName,\r\n        profilePic: state.profilePic,\r\n        authUser: state.user\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Recommendations);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Connections.jsx",["206"],"import Connection from '../../components/Connection/Connection';\r\nimport CardHolder from '../../components/ContainerTemplates/CardHolder';\r\nimport NoResults from '../../components/Alerts/NoResults';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Connections  = ({ connectionList, loading, user }) => {\r\n    const [connections, setConnections] = useState(connectionList);\r\n\r\n    useEffect(() => {setConnections(connectionList); console.log(connections, connectionList)}, [connectionList]);\r\n\r\n    return (\r\n        <CardHolder\r\n            heading=\"Connections\"\r\n            isLoading={loading}\r\n        >\r\n            {connections.length === 0 ? <NoResults message=\"There are no connections\"/> \r\n            : connections.map((connection) => \r\n                <Connection\r\n                id={connection.id} \r\n                name={`${connection.first_name} ${connection.last_name}`}\r\n                image={connection.profile_pic}\r\n                user={connection.id}/>\r\n            )}\r\n        </CardHolder>\r\n    );\r\n}\r\n\r\nexport default Connections;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\ProfileContent.jsx",["207","208","209","210","211"],"import { useState, useEffect, useRef } from 'react';\r\nimport ProfileInfo from \"../../components/ProfileInfo/ProfileInfo\";\r\nimport {\r\n    useToast,\r\n    VStack,\r\n    HStack,\r\n    Box,\r\n    Button,\r\n    useDisclosure,\r\n    Text,\r\n    Alert,\r\n    AlertIcon,\r\n    AlertTitle,\r\n    AlertDescription\r\n} from \"@chakra-ui/react\"\r\n\r\nimport PopupWindow from '../../components/ContainerTemplates/PopupWindow';\r\nimport Skills from './Skills';\r\nimport Recommendations from './Recommendations';\r\nimport Connections from './Connections';\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n    EmailIcon,\r\n    RepeatClockIcon,\r\n    CloseIcon\r\n} from '@chakra-ui/icons';\r\n\r\nimport { getUser, getConnectionState, addConnection, deleteConnection } from '../../api';\r\n\r\nconst ProfileContent = ({ authUser, user, isAuthenticated, profilePic }) => {\r\n    const toast = useToast()\r\n\r\n    const [profileInfo, setProfileInfo] = useState({ id: null, first_name: null, last_name: null, profile_pic: null });\r\n    const [skills, setSkills] = useState([]);\r\n    const [connections, setConnections] = useState([]);\r\n    const [recommendations, setRecommendations] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [button, setButton] = useState(0);\r\n\r\n    useEffect(async () => {\r\n        const results = await getUser(user);\r\n        if (results.data) {\r\n            console.log(results.data);\r\n            setProfileInfo({\r\n                id: results.data.id,\r\n                first_name: results.data.first_name,\r\n                last_name: results.data.last_name,\r\n                profile_pic: results.data.profile_pic\r\n            })\r\n            setSkills(results.data.skills);\r\n            setRecommendations(results.data.recommendations)\r\n            setConnections(results.data.connections);\r\n\r\n            if (isAuthenticated && authUser !== user) {\r\n                const result = await getConnectionState(authUser, user);\r\n                if (result.data) {\r\n                    switch (result.data) {\r\n                        case 'none':\r\n                            setButton(1);\r\n                            break;\r\n                        case 'accepted':\r\n                            setButton(2);\r\n                            break;\r\n                        case 'pending':\r\n                            setButton(3);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            toast({\r\n                position: \"bottom-left\",\r\n                title: 'Cannot load the profile',\r\n                description: results.message,\r\n                status: \"error\",\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n            setError(results);\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    let result = (\r\n        <VStack w={window.innerWidth - 20} h=\"100%\" pb={window.innerHeight/15} align=\"center\" justify=\"space-evenly\" px={window.innerWidth/25}>\r\n            <Box w=\"100%\" border=\"5px\" pt={2} align=\"center\">\r\n                <ProfileInfo\r\n                    name={`${profileInfo.first_name} ${profileInfo.last_name}`}\r\n                    isLoading={loading}\r\n                    profilePic={authUser === user ? profilePic : profileInfo.profile_pic} />\r\n                {!loading && <ConnectionButton\r\n                    type={button}\r\n                    user={profileInfo.id}\r\n                    authUser={authUser}\r\n                    name={`${profileInfo.first_name} ${profileInfo.last_name}`}\r\n                    setButton={setButton} />}\r\n            </Box>\r\n            <HStack spacing={6} w=\"100%\">\r\n                <Skills\r\n                    skillList={skills}\r\n                    loading={loading}\r\n                    isOwner={authUser === user} />\r\n                <Recommendations\r\n                    recommendationList={recommendations}\r\n                    loading={loading}\r\n                    user={user}\r\n                    isOwner={authUser === user} />\r\n                <Connections\r\n                    connectionList={connections}\r\n                    loading={loading} />\r\n            </HStack>\r\n        </VStack>\r\n    );\r\n\r\n    if (error === null) return result;\r\n    else {\r\n        return (\r\n            <Box w={window.innerWidth} border=\"5px\" pt={2} align=\"center\" justify=\"center\" h=\"100%\" pt={10}>\r\n                <Alert\r\n                    status=\"error\"\r\n                    variant=\"subtle\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    textAlign=\"center\"\r\n                    height=\"200px\"\r\n                    width=\"50%\"\r\n                    align=\"center\"\r\n                >\r\n                    <AlertIcon boxSize=\"40px\" mr={0} />\r\n                    <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                        Cannot load the profile\r\n            </AlertTitle>\r\n                    <AlertDescription maxWidth=\"sm\">\r\n                        {error.message}\r\n            </AlertDescription>\r\n                </Alert>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectionButton = ({ type, user, authUser, setButton, name }) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const toast = useToast();\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    const onSendRequest = async () => {\r\n        setLoading(true);\r\n        const result = await addConnection(user);\r\n        if (result.data) {\r\n            setButton(3);\r\n            toast({\r\n                position: \"bottom-left\",\r\n                title: 'Request sent successfully',\r\n                description: `You have sent a request to ${name}`,\r\n                status: \"success\",\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n        } else {\r\n            toast({\r\n                position: \"bottom-left\",\r\n                title: `${result.title}`,\r\n                description: `${result.message}`,\r\n                status: \"error\",\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const onRemoveConnection = (isCancelled) => async () => {\r\n        setLoading(true);\r\n        const result = await deleteConnection(authUser, user);\r\n        if (result.data) {\r\n            setButton(1);\r\n            toast({\r\n                position: \"bottom-left\",\r\n                title: `Request ${isCancelled ? 'cancelled' : 'removed'} successfully`,\r\n                description: `${isCancelled ? `You have cancelled request to ${name}` : `You have removed ${name} from connections`}`,\r\n                status: \"success\",\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n        } else {\r\n            toast({\r\n                position: \"bottom-left\",\r\n                title: `${result.title}`,\r\n                description: `${result.message}`,\r\n                status: \"error\",\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n        }\r\n        if (!isCancelled) onClose();\r\n        setLoading(false);\r\n    }\r\n\r\n    switch (type) {\r\n        case 1:\r\n            return (\r\n                <Button leftIcon={<EmailIcon />} colorScheme=\"green\" variant=\"outline\" my={2} isLoading={loading} onClick={onSendRequest}>\r\n                    Send Request\r\n                </Button>);\r\n        case 2:\r\n            return (\r\n                <>\r\n                    <Button leftIcon={<CloseIcon />} colorScheme=\"red\" variant=\"outline\" my={2} isDisabled={isOpen} onClick={onOpen}>\r\n                        Remove Connection\r\n                    </Button>\r\n                    <PopupWindow\r\n                        title='Connection Remove'\r\n                        buttonName='Confirm'\r\n                        onClick={onRemoveConnection(false)}\r\n                        isLoading={loading}\r\n                        isOpen={isOpen}\r\n                        onClose={onClose}>\r\n                        Do you wish to remove <Text as=\"em\">{name}</Text> from your connections?\r\n                     </PopupWindow>\r\n                </>);\r\n        case 3:\r\n            return (\r\n                <Button leftIcon={<RepeatClockIcon />} colorScheme=\"orange\" variant=\"outline\" my={2} isLoading={loading} onClick={onRemoveConnection(true)}>\r\n                    Request Pending\r\n                </Button>);\r\n        default:\r\n            return (<div></div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.token !== null,\r\n        authUser: state.user,\r\n        profilePic: state.profilePic\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProfileContent);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\PopupWindow.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer\\Footer.jsx",["212"],"import React from \"react\";\r\nimport { Flex, Box, Heading, Stack } from \"@chakra-ui/react\";\r\nimport { kPrimaryBlack } from '../../utils/constants';\r\n\r\nconst Footer = () => {\r\n  return (\r\n      [\r\n          <Box h={8} />,\r\n    <Flex\r\n      width=\"full\"\r\n      position=\"fixed\"\r\n      bottom=\"0\"\r\n      py={2}\r\n      bg=\"purple.700\"\r\n      borderTopRadius=\"1rem\"\r\n    >\r\n      <Box width=\"full\" boxShadow=\"xs\">\r\n        <Stack isInline justifyContent=\"center\" px={8}>\r\n          <FooterName />\r\n        </Stack>\r\n      </Box>\r\n    </Flex>\r\n      ]\r\n  );\r\n};\r\n\r\nconst FooterName = () => {\r\n  return (\r\n    <Heading\r\n      fontSize=\"15px\"\r\n      color = \"white\"\r\n    >\r\n      Designed by SE15\r\n    </Heading>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Header\\Header.jsx",["213","214","215","216","217"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ThemeToggler\\ThemeToggler.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo\\ProfileInfo.jsx",["218","219"],"import React from 'react';\r\n\r\nimport { Skeleton, SkeletonCircle, Button, Box, Heading, Avatar } from '@chakra-ui/react';\r\n\r\n\r\n/**\r\n * Information of the user.\r\n * \r\n * @param name - Name of the user\r\n */\r\nconst ProfileInfo = ({ name, user, isLoading, profilePic }) => {\r\n    return (\r\n        <center>\r\n            {isLoading ? <SkeletonCircle size=\"120px\" /> :\r\n                <Avatar\r\n                    name={name}\r\n                    src={profilePic}\r\n                    size=\"2xl\"\r\n                    borderColor=\"purple.500\"\r\n                    showBorder\r\n                    loading=\"lazy\"\r\n                />\r\n            }\r\n            <Skeleton isLoaded={!isLoading} w=\"50%\">\r\n                <Heading fontSize=\"20px\" color=\"purple.700\" py={2}> {name} </Heading>\r\n            </Skeleton>\r\n        </center>\r\n    );\r\n}\r\nexport default ProfileInfo;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\Skill.jsx",[],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":2,"column":63,"nodeType":"226","messageId":"227","endLine":2,"endColumn":73},{"ruleId":"224","severity":1,"message":"228","line":4,"column":91,"nodeType":"226","messageId":"227","endLine":4,"endColumn":98},{"ruleId":"224","severity":1,"message":"229","line":1,"column":23,"nodeType":"226","messageId":"227","endLine":1,"endColumn":33},{"ruleId":"224","severity":1,"message":"230","line":1,"column":35,"nodeType":"226","messageId":"227","endLine":1,"endColumn":48},{"ruleId":"231","severity":1,"message":"232","line":39,"column":86,"nodeType":"233","messageId":"234","endLine":39,"endColumn":88},{"ruleId":"235","severity":1,"message":"236","line":26,"column":15,"nodeType":"237","endLine":48,"endColumn":6},{"ruleId":"235","severity":1,"message":"238","line":48,"column":8,"nodeType":"239","endLine":48,"endColumn":10,"suggestions":"240"},{"ruleId":"241","severity":1,"message":"242","line":19,"column":78,"nodeType":"243","endLine":19,"endColumn":93},{"ruleId":"224","severity":1,"message":"244","line":3,"column":8,"nodeType":"226","messageId":"227","endLine":3,"endColumn":17},{"ruleId":"231","severity":1,"message":"232","line":16,"column":26,"nodeType":"233","messageId":"234","endLine":16,"endColumn":28},{"ruleId":"231","severity":1,"message":"232","line":23,"column":26,"nodeType":"233","messageId":"234","endLine":23,"endColumn":28},{"ruleId":"245","severity":1,"message":"246","line":168,"column":68,"nodeType":"247","messageId":"234","endLine":168,"endColumn":72,"fix":"248"},{"ruleId":"231","severity":1,"message":"249","line":40,"column":35,"nodeType":"233","messageId":"234","endLine":40,"endColumn":37},{"ruleId":"235","severity":1,"message":"250","line":42,"column":8,"nodeType":"239","endLine":42,"endColumn":28,"suggestions":"251"},{"ruleId":"245","severity":1,"message":"246","line":144,"column":83,"nodeType":"247","messageId":"234","endLine":144,"endColumn":87,"fix":"252"},{"ruleId":"235","severity":1,"message":"253","line":10,"column":97,"nodeType":"239","endLine":10,"endColumn":113,"suggestions":"254"},{"ruleId":"224","severity":1,"message":"255","line":1,"column":31,"nodeType":"226","messageId":"227","endLine":1,"endColumn":37},{"ruleId":"235","severity":1,"message":"236","line":42,"column":15,"nodeType":"237","endLine":84,"endColumn":6},{"ruleId":"256","severity":1,"message":"257","line":59,"column":21,"nodeType":"258","messageId":"259","endLine":69,"endColumn":22},{"ruleId":"235","severity":1,"message":"260","line":84,"column":8,"nodeType":"239","endLine":84,"endColumn":10,"suggestions":"261"},{"ruleId":"241","severity":1,"message":"242","line":120,"column":101,"nodeType":"243","endLine":120,"endColumn":108},{"ruleId":"224","severity":1,"message":"262","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":23},{"ruleId":"245","severity":1,"message":"246","line":61,"column":77,"nodeType":"247","messageId":"234","endLine":61,"endColumn":81,"fix":"263"},{"ruleId":"245","severity":1,"message":"246","line":63,"column":174,"nodeType":"247","messageId":"234","endLine":63,"endColumn":178,"fix":"264"},{"ruleId":"235","severity":1,"message":"236","line":98,"column":32,"nodeType":"237","endLine":102,"endColumn":6},{"ruleId":"235","severity":1,"message":"265","line":108,"column":8,"nodeType":"239","endLine":108,"endColumn":10,"suggestions":"266"},{"ruleId":"235","severity":1,"message":"267","line":110,"column":34,"nodeType":"239","endLine":110,"endColumn":51,"suggestions":"268"},{"ruleId":"224","severity":1,"message":"269","line":3,"column":36,"nodeType":"226","messageId":"227","endLine":3,"endColumn":42},{"ruleId":"224","severity":1,"message":"270","line":3,"column":44,"nodeType":"226","messageId":"227","endLine":3,"endColumn":47},"no-native-reassign",["271"],"no-negated-in-lhs",["272"],"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","'putRequest' is defined but never used.","'deleteRequest' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'location.state' and 'toast'. Either include them or remove the dependency array.","ArrayExpression",["273"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'PropTypes' is defined but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression",{"range":"274","text":"275"},"Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'authUser'. Either include it or remove the dependency array.",["276"],{"range":"277","text":"275"},"React Hook useEffect has a missing dependency: 'connections'. Either include it or remove the dependency array.",["278"],"'useRef' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'authUser', 'isAuthenticated', 'toast', and 'user'. Either include them or remove the dependency array.",["279"],"'kPrimaryBlack' is defined but never used.",{"range":"280","text":"275"},{"range":"281","text":"275"},"React Hook useEffect has a missing dependency: 'updateConnections'. Either include it or remove the dependency array.",["282"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["283"],"'Button' is defined but never used.","'Box' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},[5511,5522],"",{"desc":"286","fix":"287"},[5395,5406],{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},[2359,2370],[2591,2602],{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},"Update the dependencies array to be: [location.state, toast]",{"range":"296","text":"297"},"Update the dependencies array to be: [authUser, recommendationList]",{"range":"298","text":"299"},"Update the dependencies array to be: [connectionList, connections]",{"range":"300","text":"301"},"Update the dependencies array to be: [authUser, isAuthenticated, toast, user]",{"range":"302","text":"303"},"Update the dependencies array to be: [updateConnections]",{"range":"304","text":"305"},"Update the dependencies array to be: [isAuthenticated, user]",{"range":"306","text":"307"},[1505,1507],"[location.state, toast]",[1377,1397],"[authUser, recommendationList]",[480,496],"[connectionList, connections]",[2852,2854],"[authUser, isAuthenticated, toast, user]",[4465,4467],"[updateConnections]",[4506,4523],"[isAuthenticated, user]"]