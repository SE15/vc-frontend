[{"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js":"1","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js":"2","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js":"3","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js":"4","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx":"5","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx":"6","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx":"7","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js":"8","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx":"9","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx":"10","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx":"11","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx":"12","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx":"13","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx":"14","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx":"15","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx":"16","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js":"17","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx":"18","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\TempBox.jsx":"19","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js":"20","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js":"21","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js":"22","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js":"23","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js":"24","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx":"25","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js":"26","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\ReccomendationPost.js":"27","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\Reccomendation.js":"28","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\Skill.js":"29","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\addSkill.js":"30","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connections\\Connection\\Connection.js":"31","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js":"32","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\constants.js":"33","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js":"34","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx":"35","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx":"36","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx":"37","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx":"38","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx":"39","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\GridComponent\\GridComponent.jsx":"40","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js":"41"},{"size":829,"mtime":1613711181393,"results":"42","hashOfConfig":"43"},{"size":708,"mtime":1614883143542,"results":"44","hashOfConfig":"43"},{"size":1567,"mtime":1614882824639,"results":"45","hashOfConfig":"43"},{"size":3073,"mtime":1614883123698,"results":"46","hashOfConfig":"43"},{"size":737,"mtime":1614862351879,"results":"47","hashOfConfig":"43"},{"size":3796,"mtime":1614883710557,"results":"48","hashOfConfig":"43"},{"size":3009,"mtime":1614884220560,"results":"49","hashOfConfig":"43"},{"size":407,"mtime":1613711306439,"results":"50","hashOfConfig":"43"},{"size":536,"mtime":1611509267764,"results":"51","hashOfConfig":"43"},{"size":6394,"mtime":1611474902132,"results":"52","hashOfConfig":"43"},{"size":6547,"mtime":1614882485581,"results":"53","hashOfConfig":"43"},{"size":3499,"mtime":1614860867540,"results":"54","hashOfConfig":"43"},{"size":3782,"mtime":1614861375390,"results":"55","hashOfConfig":"43"},{"size":4799,"mtime":1614883479571,"results":"56","hashOfConfig":"43"},{"size":5941,"mtime":1611341203071,"results":"57","hashOfConfig":"43"},{"size":3729,"mtime":1611494090127,"results":"58","hashOfConfig":"43"},{"size":423,"mtime":1614334400196,"results":"59","hashOfConfig":"43"},{"size":351,"mtime":1611341670955,"results":"60","hashOfConfig":"43"},{"size":6938,"mtime":1614836885031,"results":"61","hashOfConfig":"43"},{"size":430,"mtime":1614177239846,"results":"62","hashOfConfig":"43"},{"size":236,"mtime":1614177269771,"results":"63","hashOfConfig":"43"},{"size":575,"mtime":1614860292276,"results":"64","hashOfConfig":"43"},{"size":477,"mtime":1614263589177,"results":"65","hashOfConfig":"43"},{"size":124,"mtime":1614334519892,"results":"66","hashOfConfig":"43"},{"size":1988,"mtime":1614862622904,"results":"67","hashOfConfig":"43"},{"size":1343,"mtime":1614858728223,"results":"68","hashOfConfig":"43"},{"size":3723,"mtime":1614836885026,"results":"69","hashOfConfig":"43"},{"size":1128,"mtime":1614836885024,"results":"70","hashOfConfig":"43"},{"size":7018,"mtime":1614836885028,"results":"71","hashOfConfig":"43"},{"size":2643,"mtime":1614836885029,"results":"72","hashOfConfig":"43"},{"size":1346,"mtime":1614836885022,"results":"73","hashOfConfig":"43"},{"size":298,"mtime":1614264423237,"results":"74","hashOfConfig":"43"},{"size":463,"mtime":1613711181391,"results":"75","hashOfConfig":"43"},{"size":233,"mtime":1614857403108,"results":"76","hashOfConfig":"43"},{"size":1936,"mtime":1614881490717,"results":"77","hashOfConfig":"43"},{"size":1264,"mtime":1614876210460,"results":"78","hashOfConfig":"43"},{"size":859,"mtime":1614878712201,"results":"79","hashOfConfig":"43"},{"size":1746,"mtime":1614876295188,"results":"80","hashOfConfig":"43"},{"size":2008,"mtime":1614876203309,"results":"81","hashOfConfig":"43"},{"size":736,"mtime":1614876183568,"results":"82","hashOfConfig":"43"},{"size":114,"mtime":1614857475940,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1tgqvh",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"86"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"86"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js",[],["186","187"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx",["188"],"import React from \"react\";\r\nimport { Flex, Box, Heading, Stack } from \"@chakra-ui/react\";\r\nimport { kPrimaryBlack } from '../utils/constants';\r\n\r\nconst Footer = () => {\r\n  return (\r\n      [\r\n          <Box h={8} />,\r\n    <Flex\r\n      width=\"full\"\r\n      position=\"fixed\"\r\n      bottom=\"0\"\r\n      py={2}\r\n      bg=\"purple.700\"\r\n      borderTopRadius=\"1rem\"\r\n    >\r\n      <Box width=\"full\" boxShadow=\"xs\">\r\n        <Stack isInline justifyContent=\"center\" px={8}>\r\n          <FooterName />\r\n        </Stack>\r\n      </Box>\r\n    </Flex>\r\n      ]\r\n  );\r\n};\r\n\r\nconst FooterName = () => {\r\n  return (\r\n    <Heading\r\n      fontSize=\"15px\"\r\n      color = \"white\"\r\n    >\r\n      Designed by SE15\r\n    </Heading>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx",["189","190","191","192","193"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx",["194","195","196","197","198","199"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  Image,\r\n  Stack\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { kPrimaryGray } from '../utils/constants';\r\n\r\nexport default function Profile() {\r\n  const [fname, setFName] = useState('');\r\n  const [lname, setLName] = useState('');\r\n \r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const [isChangePassword, setIsChangePassword] = useState(false);\r\n  const [isDeleteAccount, setIsDeleteAccount] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //save fname and lname\r\n      setIsLoggedIn(true);\r\n      setIsLoading(false);\r\n      \r\n    } catch (error) {\r\n      setError('Invalid');\r\n      setIsLoading(false);\r\n      \r\n    }\r\n  };\r\n\r\n  //image uploading\r\n  const uploadedImage = React.useRef(null);\r\n  const imageUploader = React.useRef(null);\r\n\r\n  const handleImageUpload = e => {\r\n    const [file] = e.target.files;\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      const { current } = uploadedImage;\r\n      current.file = file;\r\n      reader.onload = e => {\r\n        current.src = e.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\r\n      <Box\r\n        p={8}\r\n        w = \"30%\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n        bg = {kPrimaryGray}\r\n      >\r\n        {isLoggedIn ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Changed Profile!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsLoggedIn(false)}\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box >\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\" >\r\n              <Heading>Profile</Heading>\r\n            </Box>\r\n            <Box height=\"20px\"></Box>\r\n            <Box >\r\n              <center>\r\n              <Image                  \r\n                  borderRadius=\"full\"\r\n                  width=\"50%\"\r\n                  height=\"50%\"\r\n                  objectFit=\"cover\"\r\n                  src = {anonymous}\r\n                  alt=\"Profile Picture\"\r\n                  ref={uploadedImage}\r\n                />\r\n                </center>\r\n            </Box>\r\n            <Stack align=\"center\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n                ref={imageUploader}\r\n                style={{\r\n                  display: \"none\"\r\n                }}\r\n              />\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                variant=\"solid\"\r\n                type=\"submit\"\r\n                alignItems=\"center\"\r\n                mt={4}\r\n                onClick={() => imageUploader.current.click()}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    isIndeterminate\r\n                    size=\"sm\"\r\n                    color=\"teal\"\r\n                                      \r\n                  />\r\n                ) : (\r\n                  'Change Picture'\r\n                )}\r\n              </Button>\r\n            </Stack>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl>\r\n                    <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    size=\"lg\"\r\n                    onChange={event => setFName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"20px\"></Box>\r\n                <FormControl>\r\n                <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    colorScheme = \"black\"\r\n                    size=\"lg\"\r\n                    onChange={event => setLName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Save'\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Change Password'\r\n                  )}\r\n                </Button>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete Account'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx",["200","201"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx",["202","203","204","205","206","207"],"import React, { Component } from \"react\";\r\nimport ProfileInfo from \"../components/ProfileInfo\";\r\nimport { Box, Heading, Wrap, WrapItem, Center, Spinner } from \"@chakra-ui/react\"\r\nimport TempBox from \"../components/TempBox\"\r\nimport { connect } from 'react-redux'\r\n//import * as actions from '../store/actions/auth'\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\n\r\nimport { searchUser } from '../api';\r\n\r\nclass Home extends Component {\r\n\r\n    state = { \r\n        loading:true,\r\n        profile:{},\r\n        skill: {},\r\n        recommendation:{},\r\n        connections:{}\r\n     }\r\n        \r\n    \r\n\r\n    async componentDidMount() {\r\n        console.log(this.props.isAuthenticated)\r\n        console.log(this.props.user)\r\n        if (this.props.isAuthenticated) {\r\n            var response = await searchUser(2)\r\n            console.log(response)\r\n            if(response.data){\r\n                this.setState({\r\n                    ...this.state,\r\n                    profile: response.data[0][0],\r\n                    skill: response.data[1],\r\n                    recommendation: response.data[2],\r\n                    connections: response.data[3],\r\n                    loading: false\r\n                });\r\n            }else{\r\n                console.log(response.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"dfhD\"+this.props.isAuthenticated)\r\n        if (this.state.loading) {\r\n            console.log(\"object\")\r\n            if (this.props.isAuthenticated) {\r\n                console.log(\"1\")\r\n                return (\r\n                    <Center>\r\n                        <Spinner\r\n                            thickness=\"5px\"\r\n                            speed=\"0.65s\"\r\n                            emptyColor=\"purple.700\"\r\n                            color=\"purple.200\"\r\n                            size=\"xl\"\r\n                        />\r\n                    </Center>\r\n                );\r\n            } else {\r\n                return (\r\n                    <Center>\r\n                        <Spinner\r\n                            thickness=\"5px\"\r\n                            speed=\"0.65s\"\r\n                            emptyColor=\"purple.700\"\r\n                            color=\"purple.200\"\r\n                            size=\"xl\"\r\n                        />\r\n                    </Center>\r\n                );\r\n            }\r\n        }else{\r\n            return (\r\n                // <div>\r\n                //     <ProfileInfo name={this.state.profile.first_name+\" \"+this.state.profile.last_name} button=\"0\" />\r\n                //     <Box h={3}/>\r\n                //     <Wrap justify=\"space-around\">\r\n                //         {/* visit method will show whether a user or guest */}\r\n                //         <TempBox name = \"Skills\" data={this.state.skill} visit={false}/>\r\n                //         <TempBox name = \"Connections\" data={this.state.connections} visit={false}/>\r\n                //         <TempBox name = \"Recommendations\" data={this.state.recommendation} visit={false}/>\r\n                //     </Wrap>\r\n                // </div>\r\n                <Redirect to={{\r\n                    pathname: \"/user/profile\",\r\n                    state: { userId: this.props.user }\r\n                  }} />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      isAuthenticated: state.token !== null,\r\n      user: state.user\r\n    };\r\n  };\r\n\r\nexport default withRouter( connect( mapStateToProps )( Home ) );","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx",["208"],"import React, { Component } from \"react\";\r\nimport ProfileInfo from \"../components/ProfileInfo\";\r\nimport { Box, Center, Wrap, Spinner } from \"@chakra-ui/react\"\r\nimport TempBox from \"../components/TempBox\"\r\nimport axios from \"axios\";\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profile: {},\r\n            skill: {},\r\n            recommendation: {},\r\n            connections: {},\r\n            loading: true,\r\n            visit: false\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(this.props.userId)\r\n        if (this.props.userId) {\r\n            console.log(this.props.userId)\r\n        }\r\n        const token = localStorage.getItem('token');\r\n        console.log(\" sd\" + token);\r\n        let data = {\r\n            headers: {\r\n                'Access-Control-Allow-Headers': 'x-Auth-token',\r\n                'x-Auth-token': token\r\n            }\r\n        }\r\n\r\n\r\n        const result = await axios.get(\"http://localhost:5000/users/2\", Object.assign({}, {}, data))\r\n            .then((result) => {\r\n                if (result.data.results) {\r\n                    this.setState({\r\n                        profile: result.data.results[0][0],\r\n                        skill: result.data.results[1],\r\n                        recommendation: result.data.results[2],\r\n                        connections: result.data.results[3],\r\n                        loading: false\r\n                    });\r\n                    console.log(this.state.skill);\r\n                    console.log('window inner height: ', window.innerHeight);\r\n\r\n                    console.log('document Element client hieght: ', document.documentElement.clientHeight);\r\n\r\n                    console.log('document Element scroll hieght: ', document.documentElement.scrollHeight);\r\n\r\n                    console.log('document Element offset height: ', document.documentElement.offsetHeight);\r\n\r\n                    console.log('document element scrolltop: ', document.documentElement.scrollTop);\r\n\r\n                    console.log('window page Y Offset: ', window.pageYOffset);\r\n\r\n                    console.log('window document body offsetheight: ', window.document.body.offsetHeight);\r\n                } else {\r\n         \r\n                    console.log(result.data.message);\r\n                }\r\n\r\n            },\r\n                (error) => {\r\n                    console.log(\"Error\");\r\n                });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (\r\n                <div>\r\n                    <Center>\r\n                        <Spinner\r\n                            thickness=\"5px\"\r\n                            speed=\"0.65s\"\r\n                            emptyColor=\"black\"\r\n                            color=\"white\"\r\n                            size=\"xl\"\r\n                        />\r\n                    </Center>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <ProfileInfo name={this.state.profile.first_name + \" \" + this.state.profile.last_name} button=\"1\" visit={this.state.visit} />\r\n                    <Box h={3} />\r\n                    <Wrap justify=\"space-around\">\r\n                        {/* visit method will show whether a user or guest */}\r\n                        <TempBox name=\"Skills\" data={this.state.skill} visit={this.state.visit} />\r\n                        <TempBox name=\"Connections\" data={this.state.connections} visit={this.state.visit} />\r\n                        <TempBox name=\"Recommendations\" data={this.state.recommendation} visit={this.state.visit} />\r\n                    </Wrap>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Profile;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx",["209"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx",["210","211","212"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function ChangePassword() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [newpassword, setNewPassword] = useState('');\r\n  const [confnewpassword, setConfNewPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //if(newpassword===confnewpassword) && await(){\r\n      \r\n      //await() -confirm the current password from back end\r\n\r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setNewPassword('');\r\n      setConfNewPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Change Password</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Confirm New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setConfNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Confirm'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx",["213"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function DeleteAccount() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //await() -confirm the current password from back end\r\n      \r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Delete Account</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                \r\n                \r\n                <Button\r\n                  colorScheme = \"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\TempBox.jsx",["214","215","216","217","218","219","220","221","222","223","224"],"import { Box, Button, Heading, WrapItem, Center,Spinner, VStack , ScrollView, Flex} from \"@chakra-ui/react\"\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport Skill from './Skills/Skill/Skill';\r\nimport Connections from './Connections/Connection/Connection';\r\nimport Reccomendation from './Reccomendation/Reccomendation';\r\nimport ReccomendationPost from './Reccomendation/ReccomendationPost';\r\nimport AddSkill from './Skills/Skill/addSkill'\r\n\r\n\r\nclass TempBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          details: this.props.data,\r\n          isLoading: false\r\n        };\r\n        console.log(\"constructor\" + JSON.stringify(this.state.isLoading));\r\n    }\r\n\r\n    componentDidMount(){\r\n        //this.callEvents();\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps,prevState){\r\n        // if (this.state.details.length!=prevState.details.length) {\r\n        //     this.setState({\r\n        //         ...this.state,\r\n        //         isLoading: false\r\n        //     });\r\n        //     console.log(\"CDM\" + this.props.isLoading)\r\n        // }\r\n\r\n        if(this.state.isLoading==true && prevState.isLoading==true){\r\n            this.setState({\r\n                ...this.state,\r\n                isLoading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    eventHandler = (ev) => {\r\n        // this.callEvents();\r\n        this.setState({\r\n            ...this.state,\r\n        }); \r\n    }\r\n\r\n    callEvents = (e) => {\r\n        axios.get(\"http://localhost:5000/api/users\",{},{\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'x-auth-token': 'avishka'\r\n             }\r\n        })\r\n        .then((result) => {\r\n            console.log(result.data);\r\n            if(result.data.err!=1){\r\n                this.setState({\r\n                    users: result\r\n                });\r\n                //console.log(this.state.users);\r\n            }else{\r\n\r\n            }\r\n        },\r\n        (error) =>{\r\n            console.log(\"Error\");\r\n        });\r\n    }\r\n\r\n    async removeElement(skillname) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: true\r\n        });\r\n        let filteredArray = this.state.details.filter(skill => skill.name !== skillname);\r\n        this.setState({\r\n                ...this.state,\r\n                isLoading: true\r\n            },\r\n            function() {\r\n                this.setState({\r\n                    ...this.state,\r\n                    details:filteredArray,\r\n                },)\r\n            }\r\n        );\r\n    }\r\n\r\n    async addSkill(skill){\r\n        console.log(\"addskill\");\r\n        console.log(skill);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div>\r\n                    <Center>\r\n                        <Spinner\r\n                            thickness=\"5px\"\r\n                            speed=\"0.65s\"\r\n                            emptyColor=\"black\"\r\n                            color=\"white\"\r\n                            size=\"xl\"\r\n                        />\r\n                    </Center>\r\n                </div>\r\n            );\r\n        }else{\r\n            console.log(\"render\" + this.state.details)\r\n            return (\r\n                <WrapItem>\r\n                    <Flex>\r\n                        <Box bg=\"gray.500\" w=\"450px\" h=\"450px\" color=\"white\">\r\n                            <Center m = {4}>\r\n                                <Heading size=\"md\" color=\"gray.600\">{this.props.name}</Heading>\r\n                            </Center>\r\n                            \r\n                            <VStack overflowY=\"scroll\" h=\"320px\" w=\"436px\" ml=\"2\" mb=\"5\">\r\n                                \r\n                                <BoxContent type = {this.props.name} detailss={this.state.details} visit={this.props.visit} onClickRemove={this.removeElement.bind(this)}  />\r\n                            \r\n                            </VStack>\r\n    \r\n                            <Center>\r\n                                <Box h={3}/>\r\n                                    <EventButton new = {this.eventHandler.bind(this)} type = {this.props.name} visit={this.props.visit} onClickAddSkill={this.addSkill.bind(this)}/>\r\n                                <Box h={3}/>\r\n                            </Center>\r\n                            \r\n                        </Box>\r\n                    </Flex>\r\n              </WrapItem>\r\n            );\r\n        }\r\n        \r\n    }  \r\n}\r\n\r\n\r\nconst BoxContent = (props) => {\r\n\r\n    if (props.type == \"Skills\") {\r\n        return (\r\n            <>\r\n                 {\r\n                    props.detailss.map((skill, i) =>\r\n                        <Skill key={i} skillname={skill.name} validations={skill.validations} visit={props.visit} onClick={props.onClickRemove} />\r\n\r\n                    )\r\n                    \r\n                }\r\n                \r\n            </>\r\n            );\r\n    } else if (props.type == \"Connections\") {\r\n        return (\r\n            <>\r\n                {\r\n                    props.detailss.map((connection, i) =>\r\n                        <Connections key={i} cname={connection.first_name+\" \"+connection.last_name} cimage={null}/>\r\n                    )\r\n                        \r\n                }\r\n            </>\r\n            );\r\n    } else if (props.type == \"Recommendations\") {\r\n        return (\r\n            <>\r\n                {\r\n                    props.detailss.map((recommendation, i) =>\r\n                        <Reccomendation key={i} postedBy={recommendation.first_name+\" \"+recommendation.last_name} postedImage=\"null\" reccomendation={recommendation.description}/>\r\n                    )\r\n                        \r\n                }\r\n            </>\r\n            );  \r\n    } else {\r\n        throw new Error(\"Invalid type for ConnectionButton\");\r\n    }\r\n}\r\n\r\nconst EventButton = (props) => {\r\n    if (props.type == \"Skills\") {\r\n        if (props.visit) {\r\n            return (\r\n                <div>\r\n    \r\n                </div>);\r\n        }else{\r\n            return (\r\n                <AddSkill onClick={props.new} onClickAddSkill={props.onClickAddSkill}/>);\r\n        }\r\n    } else if (props.type == \"Connections\") {\r\n        return (\r\n            <div>\r\n\r\n            </div>);\r\n    } else if (props.type == \"Recommendations\") {\r\n        if (props.visit) {\r\n            return (\r\n                <ReccomendationPost onClick={props.new} name=\"Thushani Jayasekera\" image=\"null\"/>);\r\n                // <Button  colorScheme=\"blue\" variant=\"solid\">\r\n                // Add Recommendation\r\n                // </Button>);  \r\n        }else{\r\n            return (\r\n                <div>\r\n    \r\n                </div>);\r\n        }\r\n    } else {\r\n        throw new Error(\"Invalid type for ConnectionButton\");\r\n    }\r\n}\r\n\r\nexport default TempBox;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js",["225","226"],"import { postRequest, putRequest, deleteRequest } from \"./utils\";\r\n\r\nconst BASE_URL = \"users\";\r\nconst URL = \"recommendations\";\r\n\r\nexport const submitRecommendation = (userId, data) => postRequest(`${BASE_URL}/${userId}/${URL}`, data);\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx",["227","228","229","230","231","232","233"],"import React from 'react';\r\n\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { Image, Button, Box, Heading, Avatar } from '@chakra-ui/react';\r\nimport { kSecondaryBlue} from '../utils/constants';\r\n\r\n\r\n/**\r\n * Information of the user.\r\n * \r\n * @param name - Name of the user\r\n * @param type - 0-guest/home, 1-add, 2-remove 3-pending\r\n */\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <center>\r\n            <Box w=\"100%\" border = \"5px\" pt={2}>\r\n                <Avatar \r\n                    name=\"Ryan Florence\" \r\n                    src=\"https://bit.ly/ryan-florence\"\r\n                    size=\"2xl\"\r\n                    borderColor=\"purple.500\"\r\n                    showBorder={true}\r\n                />\r\n                <Heading fontSize=\"20px\" color=\"purple.700\"> {props.name} </Heading>\r\n                <Box h={3}/>\r\n                <ConnectionButton type = {props.button} visit={props.visit}/>\r\n                <Box h={3}/>\r\n            </Box>\r\n        </center>\r\n    );\r\n}\r\n\r\n/**\r\n * Add Connection / Remove Connection button display\r\n * \r\n * @param {*} props \r\n */\r\n//TODO: Add onClick method\r\nconst ConnectionButton = (props) => {\r\n    if (props.visit) {\r\n        if (props.type == \"1\") {\r\n            return (\r\n            <Button colorScheme=\"blue\" variant=\"solid\" >\r\n            Add Connection\r\n             </Button>);\r\n        } else if (props.type == \"2\") {\r\n            return (\r\n            <Button colorScheme=\"red\" variant=\"solid\">\r\n            Remove Connection\r\n            </Button>);\r\n        } else if (props.type == \"3\") {\r\n            return (\r\n            <Heading color = \"green.100\" size = \"md\">Request Pending</Heading>);  \r\n        } else if (props.type == \"0\") {\r\n            return (<div></div>)\r\n        } else {\r\n            throw new Error(\"Invalid type for ConnectionButton\");\r\n        }\r\n    } else {\r\n        return(\r\n            <div>\r\n            \r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default ProfileInfo;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js",["234"],"import axios from './axios';\r\n\r\nexport const getRequest = async (url) => {\r\n\ttry {\r\n\t\tconsole.log(url);\r\n\t\tlet response = await axios.get(url);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nexport const postRequest = async (url, data) => {\r\n\ttry {\r\n\t\tconsole.log(url, data);\r\n\t\tlet response = await axios.post(url, data);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nexport const putRequest = async (url, data) => {\r\n\ttry {\r\n\t\tlet response = (data) ? await axios.put(url, data) : await axios.put(url);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nexport const deleteRequest = async (url) => {\r\n\ttry {\r\n\t\tlet response = await axios.delete(url);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nconst generateSuccessOutput = (response) => {\r\n\tconsole.log(response);\r\n\treturn  {\r\n\t\tdata: response.data.results,\r\n\t\tmessage: response.data.message,\r\n\t}\r\n}\r\n\r\nconst generateErrorOutput = (error) => {\r\n\tif (error.message = \"Network Error\")\r\n\t\treturn {\r\n\t\t\terror: error,\r\n\t\t\tmessage: error.message\r\n\t\t}\r\n\telse\r\n\t\treturn {\r\n\t\t\terror: error,\r\n\t\t\tmessage: error.response.data.message\r\n\t\t}\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\ReccomendationPost.js",["235","236","237","238","239","240"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\nimport { kPrimaryBlackLight,kSecondaryBlueLight } from '../../constants';\r\n\r\nconst ReccomendationPost = props => {\r\n    return (\r\n        <>\r\n            <ReccomendationButton visit={props.visit} name={props.name} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction ReccomendationButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const[isreccomended,setIsReccomended]=useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const handleReccomendation= async event=>{\r\n        setIsLoading(true);\r\n        try{\r\n            //wait for update validation in db\r\n            setIsReccomended(true);\r\n            setIsLoading(false);\r\n\r\n        }catch{\r\n            setIsReccomended(false);\r\n            setIsLoading(false);\r\n            setError(\"Couldn't Post Reccomendation\")\r\n        }\r\n    }\r\n    if (props.visit == true && isLoggedIn == true && isreccomended==false) {\r\n\r\n        return (\r\n            <>\r\n                <Box>\r\n                    <Button onClick={onOpen} bg={kSecondaryBlueLight} isDisabled={false}>Post Reccomendation</Button>\r\n                </Box>\r\n                <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n                            <Stack>\r\n                                <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                    Post Reccomendation\r\n                                </Heading>\r\n                                <br />\r\n                                <Stack direction=\"row\">\r\n                                    {props.cimage!=null?(\r\n                                        <Image src={props.image}  borderRadius=\"full\" boxSize=\"3rem\" />\r\n                                    ) :(\r\n                                        <Avatar name={props.name} src=\"https://bit.ly/broken-link\" />\r\n                                    )\r\n                                    }\r\n                                    <Text color={kSecondaryBlueLight}>\r\n                                        {props.name}\r\n                                    </Text>\r\n                   \r\n                                    <Textarea placeholder=\"Enter reccomendation\" color=\"black.400\" />\r\n                                    \r\n                                    <ModalCloseButton />\r\n                                </Stack>\r\n                            </Stack>\r\n                            <ModalFooter>\r\n                                <Button colorScheme=\"blue\" mr={3} onClick={()=>handleReccomendation()}>\r\n                                    Post\r\n                                </Button>\r\n                            </ModalFooter>\r\n                        </Box>\r\n                    </ModalContent>\r\n                </Modal>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <Button onClick={onOpen} bg={kSecondaryBlueLight}isDisabled={true}>Post Reccomendation</Button>\r\n        );\r\n    }\r\n}\r\n\r\nReccomendationPost.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nReccomendationPost.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default ReccomendationPost  \r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\Reccomendation.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\Skill.js",["241","242","243","244"],"\r\n//import { Link } from \"react-router-dom\"\r\n\r\nimport { Spacer, Heading, Flex, Button, Box, HStack ,CircularProgress} from \"@chakra-ui/react\";\r\nimport { DeleteIcon,AddIcon} from '@chakra-ui/icons';\r\n// import {\r\n//     Modal, ModalOverlay, ModalContent, Image\r\n//     , ModalCloseButton, Text, ModalFooter,\r\n//      Textarea, Avatar, Stack\r\n// } from '@chakra-ui/react';\r\nimport {\r\n    AlertDialog,Badge,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay \r\n} from \"@chakra-ui/react\";\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport axios from 'axios';\r\nimport { kPrimaryBlack, kPrimaryBlackLight,kPrimaryGray, kSecondaryBlue, kSecondaryBlueLight } from './../../../constants';\r\n\r\n\r\nclass Skill extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            isValidated:false,\r\n            key: props.key,\r\n            isOpen: false,\r\n            name: props.name,\r\n            image: props.image,\r\n            isLoading: false,\r\n            validation: props.validations,\r\n            skillname: props.skillname,\r\n            error: ''\r\n         };\r\n    }\r\n\r\n    onClose(){\r\n        this.setState({\r\n            ...this.state,\r\n            isOpen: false\r\n        }); \r\n    }\r\n    onOpen(){\r\n        this.setState({\r\n            ...this.state,\r\n            isOpen: true\r\n        }); \r\n    }\r\n\r\n    handleValidation= event=>{\r\n        console.log(this.state.validation + 1)\r\n        // this.setState({\r\n        //     ...this.state,\r\n        //     isLoading: true\r\n        // });\r\n\r\n        try{\r\n            var validations = this.state.validation;\r\n            //need to create correct api call\r\n            //const res=axios.put('api/users/skills/:id',{validations})\r\n            this.setState({\r\n                ...this.state,\r\n                validation: validations+1,\r\n                isLoading: false,\r\n                isValidated: true\r\n            });\r\n\r\n        }catch{\r\n            this.setState({\r\n                ...this.state,\r\n                validation: this.validation,\r\n                isLoading: false,\r\n                error: \"Couldn't validate skill\"\r\n            });\r\n        }\r\n    }\r\n\r\n    deleteSkill = () => {\r\n        if (this.state.skillname!=undefined) {\r\n            console.log(this.state.skillname);\r\n            this.onClose();\r\n            this.props.onClick(this.props.skillname);\r\n        }\r\n    }\r\n\r\n    cancelRef = React.createRef();\r\n\r\n    render() {\r\n        \r\n        if(this.props.visit==false){             \r\n            return (\r\n                <>\r\n                    <Flex>\r\n                        <Box w=\"390px\" p={4} bg={kPrimaryGray}>\r\n                            <HStack  spacing=\"3rem\">\r\n                                    \r\n                                <Badge ml=\"1\" fontSize=\"lg\" colorScheme=\"blue\" variant=\"outline\" borderRadius=\"5rem\">\r\n                                    {this.state.validation}\r\n                                </Badge>\r\n                                    \r\n                                <Heading size=\"md\" color={kSecondaryBlue}>{this.state.skillname}</Heading>\r\n                                \r\n                                <Spacer />\r\n                            \r\n                                <Button rightIcon={<DeleteIcon />} colorScheme=\"red\"  onClick={this.onOpen.bind(this)}></Button>\r\n                            \r\n                                <AlertDialog\r\n                                    isOpen={this.state.isOpen}\r\n                                    leastDestructiveRef={this.cancelRef}\r\n                                    onClose={this.onClose.bind(this)}\r\n                                >\r\n                                    <AlertDialogOverlay>\r\n                                    <AlertDialogContent>\r\n                                        <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n    \r\n                                            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                                Delete Skill\r\n                                            </AlertDialogHeader>\r\n    \r\n                                            <AlertDialogBody>\r\n                                                Are you sure? You can't undo this action afterwards.\r\n                                            </AlertDialogBody>\r\n    \r\n                                            <AlertDialogFooter>\r\n                                            \r\n                                            <Button colorScheme={kPrimaryBlack} ref={this.cancelRef} onClick={this.onClose.bind(this)}>\r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"red\" onClick={this.deleteSkill.bind(this)} ml={3}>\r\n                                                Delete\r\n                                            </Button>\r\n                                            </AlertDialogFooter>\r\n    \r\n                                        </Box>\r\n    \r\n                                    </AlertDialogContent>\r\n                                    </AlertDialogOverlay>\r\n                                </AlertDialog>\r\n                            </HStack>\r\n                        </Box>\r\n                    </Flex>\r\n                </>  \r\n            );\r\n        }else{\r\n            return (\r\n                <>\r\n                    <Flex>\r\n                        <Box w=\"390px\" p={4} bg={kPrimaryGray}>\r\n                            <HStack  spacing=\"3rem\">\r\n                                <Badge ml=\"1\" fontSize=\"0.8em\" colorScheme=\"blue\" variant=\"outline\" borderRadius=\"5rem\">\r\n                                    {this.state.validation}\r\n                                </Badge>\r\n                                \r\n                                <Heading size=\"md\" color={kSecondaryBlue}>{this.state.skillname}</Heading>\r\n                            \r\n                                <Spacer />\r\n                        \r\n                                {\r\n                                    this.state.isLoading ? (\r\n                                        <CircularProgress isIndeterminate color=\"green.300\"/>\r\n                        \r\n                                    ) :(\r\n                                        <>\r\n                                            <Button isDisabled={this.state.isValidated? true:false}  size=\"sm\" rightIcon={<AddIcon />} colorScheme=\"blue\" onClick={this.handleValidation.bind(this)}>\r\n                                            </Button>\r\n                                            \r\n                                        </>\r\n                                    )\r\n                                }\r\n                            </HStack>\r\n                        </Box>\r\n                    </Flex>\r\n                </>            \r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Skill;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\addSkill.js",["245","246","247","248","249","250","251"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\nimport { kPrimaryBlackLight,kSecondaryBlueLight } from '../../../utils/constants';\r\n\r\n\r\nconst AddSkill = props => {\r\n    return (\r\n        <>\r\n            <AddSkillButton onClickAddSkill={props.onClickAddSkill}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction AddSkillButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const onClickAddSkill = async (event, skill)=>{\r\n        var s = event.target.value();\r\n        setIsLoading(true);\r\n        try{\r\n            onClose();\r\n            props.onClickAddSkill(s);\r\n            setIsLoading(false);\r\n\r\n        }catch{\r\n            setIsLoading(false);\r\n            setError(\"Couldn't add skill\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <Button onClick={onOpen} bg={kSecondaryBlueLight}>Add Skill</Button>\r\n            </Box>\r\n            <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n                        <Stack>\r\n                            <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                Add new Skill\r\n                            </Heading>\r\n                            <br />\r\n                            <Stack direction=\"row\">\r\n                \r\n                                <Textarea placeholder=\"Enter reccomendation\" color=\"black.400\" />\r\n                                \r\n                                <ModalCloseButton />\r\n                            </Stack>\r\n                        </Stack>\r\n                        <ModalFooter>\r\n                            <Button colorScheme=\"blue\" mr={3} onClick={()=> onClickAddSkill()}>\r\n                                Add\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Box>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nAddSkill.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nAddSkill.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default AddSkill;  \r\n\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connections\\Connection\\Connection.js",["252","253"],"import {React,useState} from \"react\"\r\n//import { Link } from \"react-router-dom\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {  Heading, Flex, Avatar, Box, HStack,Image,Link } from \"@chakra-ui/react\"\r\nimport { kPrimaryBlackDark, kPrimaryGray } from \"../../../constants\"\r\n\r\nfunction Connections(props){\r\n\r\n    const [image, setImage] = useState(props.cimage);\r\n    return(\r\n        <>\r\n        <Flex>\r\n            <Box w=\"390px\" p={4} bg={kPrimaryGray}>\r\n                <HStack  spacing=\"3rem\">\r\n                {props.cimage!=null?(\r\n                     <Image src={props.cimage}  borderRadius=\"full\" boxSize=\"3rem\" />\r\n                 \r\n                 ) :(\r\n                     <Avatar name={props.cname} src=\"https://bit.ly/broken-link\" />\r\n                 )\r\n                }\r\n                \r\n                <Heading size=\"sm\" color={kPrimaryBlackDark}>{props.cname}</Heading>\r\n                <Link color=\"blue.200\" fontSize=\"md\"href={props.plink} textAlign=\"end\">\r\n                        View\r\n                    </Link>\r\n        \r\n                </HStack>\r\n            </Box>\r\n        </Flex>\r\n\r\n    </>\r\n    )\r\n}\r\nConnections.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    plink: PropTypes.string,\r\n  }\r\n  Connections.defaultProps =   {\r\n      image:\"null\"\r\n  }\r\n  export default Connections  ","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\constants.js",["254"],"export const  kPrimaryBlack = \"#263238\";\r\nexport const kPrimaryBlackDark = \"#000a12\";\r\nexport const kPrimaryBlackLight = \"#4f5b62\";\r\nexport const kPrimaryGray = \"#E2E8F0\";\r\n\r\n//SECONDARY\r\nexport const kSecondaryBlue = \"#01579b\";\r\nexport const kSecondaryBlueDark = \"#002f6c\";\r\nexport const kSecondaryBlueLight = \"#4f83cc\";\r\n\r\nexport default {kPrimaryBlack,kPrimaryBlackDark,kPrimaryBlackLight,kPrimaryGray,\r\nkSecondaryBlue,kSecondaryBlueDark,kSecondaryBlueLight}\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx",["255","256","257","258"],"import {\r\n    VStack,\r\n    Button,\r\n    Box,\r\n    Heading,\r\n    StackDivider,\r\n    FormControl,\r\n    Input\r\n} from '@chakra-ui/react';\r\nimport GridComponent from '../../components/GridComponent/GridComponent';\r\n\r\n//TODO: Complete form control\r\nconst ChangeName = () => {\r\n    return (\r\n        <GridComponent heading=\"Change Your Name\" isConfirm={true}>\r\n        <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"First Name\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setFName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Last Name\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n        </GridComponent>\r\n    );\r\n}\r\n\r\nexport default ChangeName;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx",["259"],"import {\r\n    VStack,\r\n    Button,\r\n    Heading,\r\n    Text,\r\n    StackDivider,\r\n    Spacer,\r\n    Alert,\r\n    AlertIcon\r\n} from '@chakra-ui/react';\r\n\r\nconst DeleteAccount = () => {\r\n    return (\r\n        <VStack py={5} w=\"100%\" h=\"100%\" justify=\"center\">\r\n            <Heading size=\"md\" color=\"purple.700\">\r\n                Delete Your Account\r\n        </Heading>\r\n            <StackDivider borderColor=\"purple.100\" borderWidth={1} />\r\n            <Spacer />\r\n            <VStack spacing={3}>\r\n                <Button colorScheme=\"red\" w=\"40%\">Delete Account</Button>\r\n                <Alert status=\"error\" w=\"80%\">\r\n                    <AlertIcon />\r\n                    Once you delete your account, you cannot restore it.\r\n                </Alert>\r\n            </VStack>\r\n            <Spacer />\r\n        </VStack>\r\n    );\r\n}\r\n\r\nexport default DeleteAccount;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx",["260","261","262","263"],"import {\r\n    VStack,\r\n    Button,\r\n    Box,\r\n    Heading,\r\n    StackDivider,\r\n    FormControl,\r\n    Input\r\n} from '@chakra-ui/react';\r\nimport GridComponent from '../../components/GridComponent/GridComponent';\r\n\r\n//TODO: Complete form control\r\nconst ChangePassword = () => {\r\n    return (\r\n        <GridComponent heading=\"Change Your Password\" isConfirm={true}>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Current Password\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setFName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"New Password\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Confirm New Password\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n        </GridComponent>\r\n    );\r\n}\r\n\r\nexport default ChangePassword;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\GridComponent\\GridComponent.jsx",["264"],"import {\r\n    VStack,\r\n    Heading,\r\n    StackDivider,\r\n    Spacer,\r\n    Button\r\n} from '@chakra-ui/react';\r\nimport { Children } from 'react';\r\n\r\nconst GridComponent = (props) => {\r\n    return (\r\n        <VStack py={5} w=\"100%\" h=\"100%\" justify=\"center\">\r\n            <Heading size=\"md\" color=\"purple.700\">\r\n                {props.heading}\r\n            </Heading>\r\n            <StackDivider borderColor=\"purple.100\" borderWidth={1} />\r\n            <Spacer />\r\n            <VStack spacing={3} w=\"100%\">\r\n                {props.children}\r\n            </VStack>\r\n            <Spacer />\r\n            {props.isConfirm && <Button colorScheme=\"green\" w=\"40%\"> Confirm </Button>}\r\n        </VStack>\r\n    );\r\n\r\n}\r\n\r\nexport default GridComponent;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js",[],{"ruleId":"265","replacedBy":"266"},{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","severity":1,"message":"270","line":3,"column":10,"nodeType":"271","messageId":"272","endLine":3,"endColumn":23},{"ruleId":"269","severity":1,"message":"273","line":3,"column":25,"nodeType":"271","messageId":"272","endLine":3,"endColumn":31},{"ruleId":"269","severity":1,"message":"274","line":3,"column":48,"nodeType":"271","messageId":"272","endLine":3,"endColumn":57},{"ruleId":"269","severity":1,"message":"275","line":17,"column":17,"nodeType":"271","messageId":"272","endLine":17,"endColumn":25},{"ruleId":"269","severity":1,"message":"270","line":18,"column":10,"nodeType":"271","messageId":"272","endLine":18,"endColumn":23},{"ruleId":"269","severity":1,"message":"276","line":18,"column":25,"nodeType":"271","messageId":"272","endLine":18,"endColumn":39},{"ruleId":"269","severity":1,"message":"277","line":21,"column":10,"nodeType":"271","messageId":"272","endLine":21,"endColumn":15},{"ruleId":"269","severity":1,"message":"278","line":22,"column":10,"nodeType":"271","messageId":"272","endLine":22,"endColumn":15},{"ruleId":"269","severity":1,"message":"279","line":28,"column":10,"nodeType":"271","messageId":"272","endLine":28,"endColumn":26},{"ruleId":"269","severity":1,"message":"280","line":28,"column":28,"nodeType":"271","messageId":"272","endLine":28,"endColumn":47},{"ruleId":"269","severity":1,"message":"281","line":29,"column":10,"nodeType":"271","messageId":"272","endLine":29,"endColumn":25},{"ruleId":"269","severity":1,"message":"282","line":29,"column":27,"nodeType":"271","messageId":"272","endLine":29,"endColumn":45},{"ruleId":"269","severity":1,"message":"283","line":4,"column":35,"nodeType":"271","messageId":"272","endLine":4,"endColumn":39},{"ruleId":"269","severity":1,"message":"284","line":4,"column":87,"nodeType":"271","messageId":"272","endLine":4,"endColumn":94},{"ruleId":"269","severity":1,"message":"285","line":2,"column":8,"nodeType":"271","messageId":"272","endLine":2,"endColumn":19},{"ruleId":"269","severity":1,"message":"286","line":3,"column":10,"nodeType":"271","messageId":"272","endLine":3,"endColumn":13},{"ruleId":"269","severity":1,"message":"287","line":3,"column":15,"nodeType":"271","messageId":"272","endLine":3,"endColumn":22},{"ruleId":"269","severity":1,"message":"288","line":3,"column":24,"nodeType":"271","messageId":"272","endLine":3,"endColumn":28},{"ruleId":"269","severity":1,"message":"289","line":3,"column":30,"nodeType":"271","messageId":"272","endLine":3,"endColumn":38},{"ruleId":"269","severity":1,"message":"290","line":4,"column":8,"nodeType":"271","messageId":"272","endLine":4,"endColumn":15},{"ruleId":"269","severity":1,"message":"291","line":35,"column":15,"nodeType":"271","messageId":"272","endLine":35,"endColumn":21},{"ruleId":"269","severity":1,"message":"284","line":6,"column":50,"nodeType":"271","messageId":"272","endLine":6,"endColumn":57},{"ruleId":"269","severity":1,"message":"292","line":21,"column":10,"nodeType":"271","messageId":"272","endLine":21,"endColumn":25},{"ruleId":"269","severity":1,"message":"293","line":22,"column":10,"nodeType":"271","messageId":"272","endLine":22,"endColumn":21},{"ruleId":"269","severity":1,"message":"294","line":23,"column":10,"nodeType":"271","messageId":"272","endLine":23,"endColumn":25},{"ruleId":"269","severity":1,"message":"292","line":21,"column":10,"nodeType":"271","messageId":"272","endLine":21,"endColumn":25},{"ruleId":"269","severity":1,"message":"295","line":1,"column":15,"nodeType":"271","messageId":"272","endLine":1,"endColumn":21},{"ruleId":"269","severity":1,"message":"296","line":1,"column":67,"nodeType":"271","messageId":"272","endLine":1,"endColumn":77},{"ruleId":"297","severity":1,"message":"298","line":40,"column":32,"nodeType":"299","messageId":"300","endLine":40,"endColumn":34},{"ruleId":"297","severity":1,"message":"298","line":40,"column":61,"nodeType":"299","messageId":"300","endLine":40,"endColumn":63},{"ruleId":"297","severity":1,"message":"301","line":64,"column":31,"nodeType":"299","messageId":"300","endLine":64,"endColumn":33},{"ruleId":"297","severity":1,"message":"298","line":151,"column":20,"nodeType":"299","messageId":"300","endLine":151,"endColumn":22},{"ruleId":"297","severity":1,"message":"298","line":164,"column":27,"nodeType":"299","messageId":"300","endLine":164,"endColumn":29},{"ruleId":"297","severity":1,"message":"298","line":175,"column":27,"nodeType":"299","messageId":"300","endLine":175,"endColumn":29},{"ruleId":"297","severity":1,"message":"298","line":192,"column":20,"nodeType":"299","messageId":"300","endLine":192,"endColumn":22},{"ruleId":"297","severity":1,"message":"298","line":202,"column":27,"nodeType":"299","messageId":"300","endLine":202,"endColumn":29},{"ruleId":"297","severity":1,"message":"298","line":207,"column":27,"nodeType":"299","messageId":"300","endLine":207,"endColumn":29},{"ruleId":"269","severity":1,"message":"302","line":1,"column":23,"nodeType":"271","messageId":"272","endLine":1,"endColumn":33},{"ruleId":"269","severity":1,"message":"303","line":1,"column":35,"nodeType":"271","messageId":"272","endLine":1,"endColumn":48},{"ruleId":"269","severity":1,"message":"304","line":3,"column":8,"nodeType":"271","messageId":"272","endLine":3,"endColumn":17},{"ruleId":"269","severity":1,"message":"305","line":4,"column":10,"nodeType":"271","messageId":"272","endLine":4,"endColumn":15},{"ruleId":"269","severity":1,"message":"276","line":5,"column":10,"nodeType":"271","messageId":"272","endLine":5,"endColumn":24},{"ruleId":"297","severity":1,"message":"298","line":42,"column":24,"nodeType":"299","messageId":"300","endLine":42,"endColumn":26},{"ruleId":"297","severity":1,"message":"298","line":47,"column":31,"nodeType":"299","messageId":"300","endLine":47,"endColumn":33},{"ruleId":"297","severity":1,"message":"298","line":52,"column":31,"nodeType":"299","messageId":"300","endLine":52,"endColumn":33},{"ruleId":"297","severity":1,"message":"298","line":55,"column":31,"nodeType":"299","messageId":"300","endLine":55,"endColumn":33},{"ruleId":"306","severity":1,"message":"307","line":50,"column":6,"nodeType":"308","messageId":"309","endLine":50,"endColumn":37},{"ruleId":"269","severity":1,"message":"310","line":21,"column":24,"nodeType":"271","messageId":"272","endLine":21,"endColumn":37},{"ruleId":"269","severity":1,"message":"311","line":24,"column":12,"nodeType":"271","messageId":"272","endLine":24,"endColumn":21},{"ruleId":"269","severity":1,"message":"312","line":25,"column":12,"nodeType":"271","messageId":"272","endLine":25,"endColumn":17},{"ruleId":"297","severity":1,"message":"298","line":40,"column":21,"nodeType":"299","messageId":"300","endLine":40,"endColumn":23},{"ruleId":"297","severity":1,"message":"298","line":40,"column":43,"nodeType":"299","messageId":"300","endLine":40,"endColumn":45},{"ruleId":"297","severity":1,"message":"298","line":40,"column":67,"nodeType":"299","messageId":"300","endLine":40,"endColumn":69},{"ruleId":"269","severity":1,"message":"313","line":22,"column":8,"nodeType":"271","messageId":"272","endLine":22,"endColumn":13},{"ruleId":"269","severity":1,"message":"314","line":23,"column":74,"nodeType":"271","messageId":"272","endLine":23,"endColumn":93},{"ruleId":"297","severity":1,"message":"301","line":84,"column":33,"nodeType":"299","messageId":"300","endLine":84,"endColumn":35},{"ruleId":"297","severity":1,"message":"298","line":95,"column":28,"nodeType":"299","messageId":"300","endLine":95,"endColumn":30},{"ruleId":"269","severity":1,"message":"305","line":5,"column":48,"nodeType":"271","messageId":"272","endLine":5,"endColumn":53},{"ruleId":"269","severity":1,"message":"315","line":6,"column":25,"nodeType":"271","messageId":"272","endLine":6,"endColumn":29},{"ruleId":"269","severity":1,"message":"316","line":7,"column":16,"nodeType":"271","messageId":"272","endLine":7,"endColumn":22},{"ruleId":"269","severity":1,"message":"317","line":22,"column":12,"nodeType":"271","messageId":"272","endLine":22,"endColumn":22},{"ruleId":"269","severity":1,"message":"310","line":22,"column":24,"nodeType":"271","messageId":"272","endLine":22,"endColumn":37},{"ruleId":"269","severity":1,"message":"311","line":24,"column":12,"nodeType":"271","messageId":"272","endLine":24,"endColumn":21},{"ruleId":"269","severity":1,"message":"312","line":25,"column":12,"nodeType":"271","messageId":"272","endLine":25,"endColumn":17},{"ruleId":"269","severity":1,"message":"318","line":10,"column":12,"nodeType":"271","messageId":"272","endLine":10,"endColumn":17},{"ruleId":"269","severity":1,"message":"319","line":10,"column":19,"nodeType":"271","messageId":"272","endLine":10,"endColumn":27},{"ruleId":"320","severity":1,"message":"321","line":11,"column":1,"nodeType":"322","endLine":12,"endColumn":55},{"ruleId":"269","severity":1,"message":"323","line":2,"column":5,"nodeType":"271","messageId":"272","endLine":2,"endColumn":11},{"ruleId":"269","severity":1,"message":"295","line":3,"column":5,"nodeType":"271","messageId":"272","endLine":3,"endColumn":11},{"ruleId":"269","severity":1,"message":"287","line":5,"column":5,"nodeType":"271","messageId":"272","endLine":5,"endColumn":12},{"ruleId":"269","severity":1,"message":"324","line":6,"column":5,"nodeType":"271","messageId":"272","endLine":6,"endColumn":17},{"ruleId":"269","severity":1,"message":"315","line":5,"column":5,"nodeType":"271","messageId":"272","endLine":5,"endColumn":9},{"ruleId":"269","severity":1,"message":"323","line":2,"column":5,"nodeType":"271","messageId":"272","endLine":2,"endColumn":11},{"ruleId":"269","severity":1,"message":"295","line":3,"column":5,"nodeType":"271","messageId":"272","endLine":3,"endColumn":11},{"ruleId":"269","severity":1,"message":"287","line":5,"column":5,"nodeType":"271","messageId":"272","endLine":5,"endColumn":12},{"ruleId":"269","severity":1,"message":"324","line":6,"column":5,"nodeType":"271","messageId":"272","endLine":6,"endColumn":17},{"ruleId":"269","severity":1,"message":"325","line":8,"column":10,"nodeType":"271","messageId":"272","endLine":8,"endColumn":18},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"no-unused-vars","'kPrimaryBlack' is defined but never used.","Identifier","unusedVar","'Spacer' is defined but never used.","'Container' is defined but never used.","'useState' is defined but never used.","'kSecondaryBlue' is defined but never used.","'fname' is assigned a value but never used.","'lname' is assigned a value but never used.","'isChangePassword' is assigned a value but never used.","'setIsChangePassword' is assigned a value but never used.","'isDeleteAccount' is assigned a value but never used.","'setIsDeleteAccount' is assigned a value but never used.","'Flex' is defined but never used.","'Spinner' is defined but never used.","'ProfileInfo' is defined but never used.","'Box' is defined but never used.","'Heading' is defined but never used.","'Wrap' is defined but never used.","'WrapItem' is defined but never used.","'TempBox' is defined but never used.","'result' is assigned a value but never used.","'currentpassword' is assigned a value but never used.","'newpassword' is assigned a value but never used.","'confnewpassword' is assigned a value but never used.","'Button' is defined but never used.","'ScrollView' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'putRequest' is defined but never used.","'deleteRequest' is defined but never used.","'anonymous' is defined but never used.","'Image' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'setIsLoggedIn' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'axios' is defined but never used.","'kSecondaryBlueLight' is defined but never used.","'Text' is defined but never used.","'Avatar' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'image' is assigned a value but never used.","'setImage' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'VStack' is defined but never used.","'StackDivider' is defined but never used.","'Children' is defined but never used.","no-global-assign","no-unsafe-negation"]