[{"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js":"1","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js":"2","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\reportWebVitals.js":"3","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ThemeToggler.jsx":"4","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx":"5","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\TempScreen.jsx":"6","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx":"7","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx":"8","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx":"9","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx":"10","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js":"11","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx":"12","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx":"13","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx":"14","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx":"15","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation.jsx":"16","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\RecommendationPost.jsx":"17","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js":"18","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\actionTypes.js":"19","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\ajax.js":"20","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js":"21","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Login\\Button\\Button.js":"22","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Login\\Spinner\\Spinner.js":"23","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Login\\Input\\Input.js":"24","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx":"25","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx":"26","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx":"27"},{"size":827,"mtime":1611426624403,"results":"28","hashOfConfig":"29"},{"size":968,"mtime":1611502074990,"results":"30","hashOfConfig":"29"},{"size":375,"mtime":1610380932308,"results":"31","hashOfConfig":"29"},{"size":470,"mtime":1611341932671,"results":"32","hashOfConfig":"29"},{"size":1367,"mtime":1611494044581,"results":"33","hashOfConfig":"29"},{"size":845,"mtime":1611411668548,"results":"34","hashOfConfig":"29"},{"size":6394,"mtime":1611474902132,"results":"35","hashOfConfig":"29"},{"size":1672,"mtime":1611472230952,"results":"36","hashOfConfig":"29"},{"size":351,"mtime":1611341670955,"results":"37","hashOfConfig":"29"},{"size":754,"mtime":1611472872653,"results":"38","hashOfConfig":"29"},{"size":343,"mtime":1611407206520,"results":"39","hashOfConfig":"29"},{"size":1702,"mtime":1611473431979,"results":"40","hashOfConfig":"29"},{"size":6221,"mtime":1611502269975,"results":"41","hashOfConfig":"29"},{"size":2587,"mtime":1611429213317,"results":"42","hashOfConfig":"29"},{"size":2375,"mtime":1611491789436,"results":"43","hashOfConfig":"29"},{"size":1386,"mtime":1611412925157,"results":"44","hashOfConfig":"29"},{"size":3050,"mtime":1611413249448,"results":"45","hashOfConfig":"29"},{"size":1843,"mtime":1611502609795,"results":"46","hashOfConfig":"29"},{"size":233,"mtime":1611425129637,"results":"47","hashOfConfig":"29"},{"size":138,"mtime":1611481871656,"results":"48","hashOfConfig":"29"},{"size":1566,"mtime":1611502396442,"results":"49","hashOfConfig":"29"},{"size":294,"mtime":1508419674000,"results":"50","hashOfConfig":"29"},{"size":170,"mtime":1508419674000,"results":"51","hashOfConfig":"29"},{"size":1787,"mtime":1508419674000,"results":"52","hashOfConfig":"29"},{"size":536,"mtime":1611489370624,"results":"53","hashOfConfig":"29"},{"size":3729,"mtime":1611494090127,"results":"54","hashOfConfig":"29"},{"size":5941,"mtime":1611341203071,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1tgqvh",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js",[],["121","122"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\reportWebVitals.js",[],["123","124"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ThemeToggler.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx",["125"],"import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport TempScreen from './TempScreen';\r\nimport ProfileSettings from './ProfileSettings';\r\nimport Profile from './Profile';\r\nimport Login from './Login';\r\nimport SignUp from './SignUp';\r\nimport Logout from './Logout';\r\nimport Delete from '../popups/DeleteAccount'\r\nimport Change from '../popups/ChangePassword'\r\n\r\nconst Main = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <TempScreen />\r\n            </Route>\r\n            <Route path=\"/delete\" exact>\r\n                <Delete />\r\n            </Route>\r\n            <Route path=\"/change\" exact>\r\n                <Change />\r\n            </Route>\r\n            <Route path=\"/home\" exact>\r\n                <Profile button=\"0\" />\r\n            </Route>\r\n            <Route path=\"/settings\" exact>\r\n                <ProfileSettings />\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n                <Profile button=\"3\" />\r\n            </Route>\r\n            <Route path=\"/login\" exact>\r\n                <Login />\r\n            </Route>\r\n            <Route path=\"/signup\" exact>\r\n                <SignUp />\r\n            </Route>\r\n            <Route path=\"/logout\" exact>\r\n                <Logout />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\TempScreen.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx",["126","127","128","129","130","131"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  Image,\r\n  Stack\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { kPrimaryGray } from '../utils/constants';\r\n\r\nexport default function Profile() {\r\n  const [fname, setFName] = useState('');\r\n  const [lname, setLName] = useState('');\r\n \r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const [isChangePassword, setIsChangePassword] = useState(false);\r\n  const [isDeleteAccount, setIsDeleteAccount] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //save fname and lname\r\n      setIsLoggedIn(true);\r\n      setIsLoading(false);\r\n      \r\n    } catch (error) {\r\n      setError('Invalid');\r\n      setIsLoading(false);\r\n      \r\n    }\r\n  };\r\n\r\n  //image uploading\r\n  const uploadedImage = React.useRef(null);\r\n  const imageUploader = React.useRef(null);\r\n\r\n  const handleImageUpload = e => {\r\n    const [file] = e.target.files;\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      const { current } = uploadedImage;\r\n      current.file = file;\r\n      reader.onload = e => {\r\n        current.src = e.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\r\n      <Box\r\n        p={8}\r\n        w = \"30%\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n        bg = {kPrimaryGray}\r\n      >\r\n        {isLoggedIn ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Changed Profile!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsLoggedIn(false)}\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box >\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\" >\r\n              <Heading>Profile</Heading>\r\n            </Box>\r\n            <Box height=\"20px\"></Box>\r\n            <Box >\r\n              <center>\r\n              <Image                  \r\n                  borderRadius=\"full\"\r\n                  width=\"50%\"\r\n                  height=\"50%\"\r\n                  objectFit=\"cover\"\r\n                  src = {anonymous}\r\n                  alt=\"Profile Picture\"\r\n                  ref={uploadedImage}\r\n                />\r\n                </center>\r\n            </Box>\r\n            <Stack align=\"center\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n                ref={imageUploader}\r\n                style={{\r\n                  display: \"none\"\r\n                }}\r\n              />\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                variant=\"solid\"\r\n                type=\"submit\"\r\n                alignItems=\"center\"\r\n                mt={4}\r\n                onClick={() => imageUploader.current.click()}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    isIndeterminate\r\n                    size=\"sm\"\r\n                    color=\"teal\"\r\n                                      \r\n                  />\r\n                ) : (\r\n                  'Change Picture'\r\n                )}\r\n              </Button>\r\n            </Stack>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl>\r\n                    <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    size=\"lg\"\r\n                    onChange={event => setFName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"20px\"></Box>\r\n                <FormControl>\r\n                <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    colorScheme = \"black\"\r\n                    size=\"lg\"\r\n                    onChange={event => setLName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Save'\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Change Password'\r\n                  )}\r\n                </Button>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete Account'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx",["132","133","134","135"],"import React from 'react';\r\n\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { Image, Button, Box, Heading } from '@chakra-ui/react';\r\nimport { kSecondaryBlue} from '../utils/constants';\r\n\r\n\r\n/**\r\n * Information of the user.\r\n * \r\n * @param name - Name of the user\r\n * @param type - 0-guest/home, 1-add, 2-remove 3-pending\r\n */\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <center>\r\n            <Box w=\"100%\" border = \"5px\"  bg = {kSecondaryBlue}>\r\n                <Image\r\n                    src = {anonymous} //TODO: Need a method to update the profile pic\r\n                    htmlWidth=\"150px\"\r\n                />\r\n                <Heading fontSize=\"25px\" color=\"white\"> {props.name} </Heading>\r\n                <Box h={3}/>\r\n                <ConnectionButton type = {props.button}/>\r\n                <Box h={3}/>\r\n            </Box>\r\n        </center>\r\n    );\r\n}\r\n\r\n/**\r\n * Add Connection / Remove Connection button display\r\n * \r\n * @param {*} props \r\n */\r\n//TODO: Add onClick method\r\nconst ConnectionButton = (props) => {\r\n    if (props.type == \"1\") {\r\n        return (\r\n        <Button colorScheme=\"blue\" variant=\"solid\" >\r\n        Add Connection\r\n         </Button>);\r\n    } else if (props.type == \"2\") {\r\n        return (\r\n        <Button colorScheme=\"red\" variant=\"solid\">\r\n        Remove Connection\r\n        </Button>);\r\n    } else if (props.type == \"3\") {\r\n        return (\r\n        <Heading color = \"green.100\" size = \"md\">Request Pending</Heading>);  \r\n    } else if (props.type == \"0\") {\r\n        return (<div></div>)\r\n    } else {\r\n        throw new Error(\"Invalid type for ConnectionButton\");\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx",["136","137","138"],"import React, { Component } from \"react\";\r\nimport ProfileInfo from \"../components/ProfileInfo\";\r\nimport { Box, Heading, Wrap, WrapItem, Center, VStack, Spacer, Flex } from \"@chakra-ui/react\";\r\nimport Recommendation from  '../components/Recommendation.jsx';\r\nimport RecommendationPost from  '../popups/RecommendationPost.jsx';\r\n\r\n\r\nclass Profile extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ProfileInfo name=\"Danushka Gunathilake\" button={this.props.button} />\r\n                <Box h={3}/>\r\n                <Wrap justify=\"space-around\">\r\n                    <TempBox name = \"Skills\"/>\r\n                    <TempBox name = \"Connections\"/>\r\n                    \r\n                    <TempBox name = \"Recommendations\" button = {<RecommendationPost />}>\r\n                    <Recommendation postedBy = \"Angelo Mathews\" recommendation = \"Hello World Hello World\"/>\r\n                    <Recommendation postedBy = \"Mahela Jayawardena\" recommendation = \"Good good good good good\"/>\r\n                    </TempBox>\r\n                </Wrap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst TempBox = (props) => {\r\n    return (\r\n        <WrapItem>\r\n        <Box bg=\"gray.200\" w=\"400px\" h=\"400px\">\r\n            <Center m = {4}>\r\n                <Heading size=\"md\" color=\"gray.600\">{props.name}</Heading>\r\n            </Center>\r\n            <Box bg=\"gray.200\" w=\"370px\" h=\"280px\" p = {0}>\r\n            <VStack>\r\n                {props.children}\r\n            </VStack>\r\n            </Box>\r\n            <Center>{props.button}</Center>\r\n        </Box>\r\n      </WrapItem>\r\n    );\r\n}\r\nexport default Profile;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx",["139","140","141","142","143"],"import { Input, Heading, InputGroup, InputLeftElement, Box,\r\n    HStack, IconButton, Spacer,Button, Image, Container} from \"@chakra-ui/react\"\r\nimport { Search2Icon,BellIcon,SettingsIcon } from '@chakra-ui/icons'\r\nimport {React,useState} from 'react'\r\nimport { kPrimaryBlack, kSecondaryBlue } from '../utils/constants'\r\nimport logo from '../assets/logo.png';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction Header(props) {\r\n\r\n   return ([\r\n           <Box bg={kPrimaryBlack} w=\"100%\" p={5}  position=\"fixed\" color=\"white\" h = {16} p= {2}>\r\n               <HStack>\r\n                    <Image \r\n                        src = {logo}\r\n                        htmlWidth = \"60px\"\r\n                        />\r\n                    <Heading  size=\"md\" color=\"black.500\">\r\n                        Volunteer Circle\r\n                    </Heading>\r\n                    <Spacer />\r\n                   <InputGroup w=\"50%\">\r\n                       <InputLeftElement\r\n                       pointerEvents=\"none\"\r\n                       children={<Search2Icon color=\"white.100\" />}\r\n                       \r\n                       />\r\n                       <Input type=\"search\" placeholder=\"Search\" color=\"black.400\"/>\r\n                       <IconButton aria-label=\"Search database\" icon={<Search2Icon />} bg=\"blueGreen.400\"/>\r\n                   </InputGroup>\r\n                   <Spacer/>\r\n                   <HStack>\r\n                   <SignButton type={props.type}/>                  \r\n                   </HStack>\r\n                   \r\n               </HStack>\r\n           </Box>,\r\n           <Box h = {16} bg = {kSecondaryBlue}/>\r\n   ]\r\n   )\r\n}\r\n\r\nfunction SignButton(props){\r\n   if(props.type==false){\r\n       //Guest\r\n       return(\r\n           <HStack>\r\n           <Button size=\"md\" bg=\"blueGreen.100\" >Sign In</Button> \r\n       </HStack>); \r\n   }\r\n   if(props.type==true){\r\n       return(\r\n           <HStack>\r\n               <IconButton icon={<BellIcon />} bg=\"blueGreen.200\"/>\r\n                <IconButton icon={<SettingsIcon />} bg=\"blueGreen.200\" />\r\n                <NavLink\r\n                    to=\"/logout\"\r\n                    activeStyle={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\"\r\n                    }}\r\n                    >Sign Out</NavLink>\r\n           </HStack>\r\n           );\r\n   }\r\n   \r\n}\r\n\r\n\r\nexport default Header;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation.jsx",["144","145","146","147","148","149","150","151","152","153","154"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n    Textarea, Avatar, Stack, Heading, Box, Divider, VStack\r\n} from '@chakra-ui/react';\r\n\r\nconst Reccomendation = props => {\r\n    return (\r\n        <>\r\n            <Box bg=\"white\" w=\"90%\" p={4} >\r\n                <stack>\r\n                    <Stack direction=\"row\" align = \"center\">\r\n                        if({props.postedImage}!=null){\r\n                            <Image src={props.postedImage} size=\"30%\" rounded=\"1rem\" shadow=\"2xl\" />\r\n                        }\r\n                                    else{\r\n                            <Avatar name={props.postedBy} src=\"https://bit.ly/broken-link\" />\r\n                        }\r\n                        <VStack>\r\n                        <Heading color=\"gray.500\" fontSize=\"md\">\r\n                            {props.postedBy}\r\n                        </Heading>\r\n                        <Text color=\"gray.900\" fontSize=\"md\" textAlign=\"left\">\r\n                        {props.recommendation}\r\n                        </Text>\r\n                        </VStack>\r\n                        \r\n                    </Stack>\r\n                \r\n                </stack>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\nexport default Reccomendation;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\RecommendationPost.jsx",["155","156","157","158","159"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\n\r\nconst ReccomendationPost = props => {\r\n    return (\r\n        <>\r\n            <ReccomendationButton visit={props.visit} name={props.name} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction ReccomendationButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const [isUser, setUser] = useState(true);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    if (props.visit == true && isLoggedIn == true) {\r\n\r\n        return (\r\n            <>\r\n                <Box>\r\n                    <Button onClick={onOpen} bg=\"blueGreen.200\" isDisabled={false}>Post Reccomendation</Button>\r\n                </Box>\r\n                <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <Box bg=\"white.200\" w=\"100%\" p={4} color=\"white\">\r\n                            <stack>\r\n                                <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                    Post Reccomendation\r\n                </Heading>\r\n                                <br />\r\n                                <Stack direction=\"row\">\r\n                                    if({props.image}!=null){\r\n                                        <Image src={props.image} size=\"100%\" rounded=\"1rem\" shadow=\"2xl\" />\r\n                                    }\r\n                 else{\r\n                                        <Avatar name={props.name} src=\"https://bit.ly/broken-link\" />\r\n                                    }\r\n\r\n\r\n                                    <Text color=\"blue.100\">\r\n                                        {props.name}\r\n                                    </Text>\r\n                    if({props.visit}===true){\r\n                                        <Textarea placeholder=\"Enter reccomendation\" color=\"black.400\" />\r\n                                    }\r\n                                    <ModalCloseButton />\r\n                                </Stack>\r\n                            </stack>\r\n                            <ModalFooter>\r\n                                <Button colorScheme=\"blue\" mr={3} >\r\n                                    Post\r\n            </Button>\r\n                            </ModalFooter>\r\n                        </Box>\r\n                    </ModalContent>\r\n\r\n                </Modal>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <Button onClick={onOpen} bg=\"blueGreen.200\" isDisabled={true}>Post Reccomendation</Button>);\r\n    }\r\n\r\n}\r\n\r\n\r\nReccomendationPost.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nReccomendationPost.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default ReccomendationPost  ","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\actionTypes.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\ajax.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Login\\Button\\Button.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Login\\Spinner\\Spinner.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Login\\Input\\Input.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx",["160"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function DeleteAccount() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //await() -confirm the current password from back end\r\n      \r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Delete Account</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                \r\n                \r\n                <Button\r\n                  colorScheme = \"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx",["161","162","163"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function ChangePassword() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [newpassword, setNewPassword] = useState('');\r\n  const [confnewpassword, setConfNewPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //if(newpassword===confnewpassword) && await(){\r\n      \r\n      //await() -confirm the current password from back end\r\n\r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setNewPassword('');\r\n      setConfNewPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Change Password</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Confirm New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setConfNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Confirm'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":23},{"ruleId":"170","severity":1,"message":"174","line":21,"column":10,"nodeType":"172","messageId":"173","endLine":21,"endColumn":15},{"ruleId":"170","severity":1,"message":"175","line":22,"column":10,"nodeType":"172","messageId":"173","endLine":22,"endColumn":15},{"ruleId":"170","severity":1,"message":"176","line":28,"column":10,"nodeType":"172","messageId":"173","endLine":28,"endColumn":26},{"ruleId":"170","severity":1,"message":"177","line":28,"column":28,"nodeType":"172","messageId":"173","endLine":28,"endColumn":47},{"ruleId":"170","severity":1,"message":"178","line":29,"column":10,"nodeType":"172","messageId":"173","endLine":29,"endColumn":25},{"ruleId":"170","severity":1,"message":"179","line":29,"column":27,"nodeType":"172","messageId":"173","endLine":29,"endColumn":45},{"ruleId":"180","severity":1,"message":"181","line":38,"column":20,"nodeType":"182","messageId":"183","endLine":38,"endColumn":22},{"ruleId":"180","severity":1,"message":"181","line":43,"column":27,"nodeType":"182","messageId":"183","endLine":43,"endColumn":29},{"ruleId":"180","severity":1,"message":"181","line":48,"column":27,"nodeType":"182","messageId":"183","endLine":48,"endColumn":29},{"ruleId":"180","severity":1,"message":"181","line":51,"column":27,"nodeType":"182","messageId":"183","endLine":51,"endColumn":29},{"ruleId":"170","severity":1,"message":"184","line":3,"column":56,"nodeType":"172","messageId":"173","endLine":3,"endColumn":62},{"ruleId":"170","severity":1,"message":"185","line":3,"column":64,"nodeType":"172","messageId":"173","endLine":3,"endColumn":68},{"ruleId":"186","severity":1,"message":"187","line":9,"column":5,"nodeType":"188","messageId":"189","endLine":12,"endColumn":6},{"ruleId":"170","severity":1,"message":"190","line":2,"column":47,"nodeType":"172","messageId":"173","endLine":2,"endColumn":56},{"ruleId":"170","severity":1,"message":"191","line":4,"column":15,"nodeType":"172","messageId":"173","endLine":4,"endColumn":23},{"ruleId":"192","severity":1,"message":"193","line":12,"column":92,"nodeType":"194","endLine":12,"endColumn":98},{"ruleId":"180","severity":1,"message":"181","line":44,"column":17,"nodeType":"182","messageId":"183","endLine":44,"endColumn":19},{"ruleId":"180","severity":1,"message":"181","line":51,"column":17,"nodeType":"182","messageId":"183","endLine":51,"endColumn":19},{"ruleId":"170","severity":1,"message":"191","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"195","line":3,"column":8,"nodeType":"172","messageId":"173","endLine":3,"endColumn":17},{"ruleId":"170","severity":1,"message":"196","line":5,"column":5,"nodeType":"172","messageId":"173","endLine":5,"endColumn":11},{"ruleId":"170","severity":1,"message":"197","line":5,"column":13,"nodeType":"172","messageId":"173","endLine":5,"endColumn":18},{"ruleId":"170","severity":1,"message":"198","line":5,"column":20,"nodeType":"172","messageId":"173","endLine":5,"endColumn":32},{"ruleId":"170","severity":1,"message":"199","line":5,"column":34,"nodeType":"172","messageId":"173","endLine":5,"endColumn":46},{"ruleId":"170","severity":1,"message":"200","line":6,"column":7,"nodeType":"172","messageId":"173","endLine":6,"endColumn":23},{"ruleId":"170","severity":1,"message":"201","line":6,"column":31,"nodeType":"172","messageId":"173","endLine":6,"endColumn":44},{"ruleId":"170","severity":1,"message":"202","line":6,"column":46,"nodeType":"172","messageId":"173","endLine":6,"endColumn":57},{"ruleId":"170","severity":1,"message":"203","line":7,"column":5,"nodeType":"172","messageId":"173","endLine":7,"endColumn":13},{"ruleId":"170","severity":1,"message":"204","line":7,"column":44,"nodeType":"172","messageId":"173","endLine":7,"endColumn":51},{"ruleId":"170","severity":1,"message":"205","line":20,"column":24,"nodeType":"172","messageId":"173","endLine":20,"endColumn":37},{"ruleId":"170","severity":1,"message":"206","line":21,"column":12,"nodeType":"172","messageId":"173","endLine":21,"endColumn":18},{"ruleId":"170","severity":1,"message":"207","line":21,"column":20,"nodeType":"172","messageId":"173","endLine":21,"endColumn":27},{"ruleId":"180","severity":1,"message":"181","line":23,"column":21,"nodeType":"182","messageId":"183","endLine":23,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":23,"column":43,"nodeType":"182","messageId":"183","endLine":23,"endColumn":45},{"ruleId":"170","severity":1,"message":"208","line":21,"column":10,"nodeType":"172","messageId":"173","endLine":21,"endColumn":25},{"ruleId":"170","severity":1,"message":"208","line":21,"column":10,"nodeType":"172","messageId":"173","endLine":21,"endColumn":25},{"ruleId":"170","severity":1,"message":"209","line":22,"column":10,"nodeType":"172","messageId":"173","endLine":22,"endColumn":21},{"ruleId":"170","severity":1,"message":"210","line":23,"column":10,"nodeType":"172","messageId":"173","endLine":23,"endColumn":25},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],["211"],["212"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'fname' is assigned a value but never used.","'lname' is assigned a value but never used.","'isChangePassword' is assigned a value but never used.","'setIsChangePassword' is assigned a value but never used.","'isDeleteAccount' is assigned a value but never used.","'setIsDeleteAccount' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Spacer' is defined but never used.","'Flex' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Container' is defined but never used.","'useState' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'PropTypes' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'ModalOverlay' is defined but never used.","'ModalContent' is defined but never used.","'ModalCloseButton' is defined but never used.","'useDisclosure' is defined but never used.","'ModalFooter' is defined but never used.","'Textarea' is defined but never used.","'Divider' is defined but never used.","'setIsLoggedIn' is assigned a value but never used.","'isUser' is assigned a value but never used.","'setUser' is assigned a value but never used.","'currentpassword' is assigned a value but never used.","'newpassword' is assigned a value but never used.","'confnewpassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]