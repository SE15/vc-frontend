[{"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\index.js":"1","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\App.js":"2","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\store\\reducers\\auth.js":"3","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\store\\actions\\actionTypes.js":"4","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\store\\actions\\auth.js":"5","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Footer.jsx":"6","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Header.jsx":"7","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Main.jsx":"8","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\utils\\ajax.js":"9","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\utils\\constants.js":"10","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\ProfileSettings.jsx":"11","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Logout.jsx":"12","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\SignUp.jsx":"13","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Profile.jsx":"14","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Login.jsx":"15","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\popups\\ChangePassword.jsx":"16","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\popups\\DeleteAccount.jsx":"17","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Home.jsx":"18","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\ProfileInfo.jsx":"19","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\ErrorMessage.jsx":"20","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\TempBox.jsx":"21","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\constants.js":"22","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Skills\\Skill\\Skill.js":"23","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Connections\\Connection\\Connection.js":"24","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Reccomendation\\Reccomendation.js":"25","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Reccomendation\\ReccomendationPost.js":"26","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Skills\\Skill\\addSkill.js":"27"},{"size":829,"mtime":1613722046491,"results":"28","hashOfConfig":"29"},{"size":845,"mtime":1613967132579,"results":"30","hashOfConfig":"29"},{"size":1566,"mtime":1614172036651,"results":"31","hashOfConfig":"29"},{"size":233,"mtime":1613722046630,"results":"32","hashOfConfig":"29"},{"size":1864,"mtime":1614235638414,"results":"33","hashOfConfig":"29"},{"size":754,"mtime":1613722046292,"results":"34","hashOfConfig":"29"},{"size":2375,"mtime":1613722046324,"results":"35","hashOfConfig":"29"},{"size":1336,"mtime":1614174374611,"results":"36","hashOfConfig":"29"},{"size":138,"mtime":1613722046631,"results":"37","hashOfConfig":"29"},{"size":343,"mtime":1613722046632,"results":"38","hashOfConfig":"29"},{"size":6394,"mtime":1613722046559,"results":"39","hashOfConfig":"29"},{"size":536,"mtime":1613722046544,"results":"40","hashOfConfig":"29"},{"size":6370,"mtime":1613967739679,"results":"41","hashOfConfig":"29"},{"size":2860,"mtime":1614241382702,"results":"42","hashOfConfig":"29"},{"size":4938,"mtime":1614234265440,"results":"43","hashOfConfig":"29"},{"size":5941,"mtime":1613722046579,"results":"44","hashOfConfig":"29"},{"size":3729,"mtime":1613722046611,"results":"45","hashOfConfig":"29"},{"size":1918,"mtime":1614235569736,"results":"46","hashOfConfig":"29"},{"size":1899,"mtime":1614001538600,"results":"47","hashOfConfig":"29"},{"size":351,"mtime":1613722046281,"results":"48","hashOfConfig":"29"},{"size":6938,"mtime":1614252282448,"results":"49","hashOfConfig":"29"},{"size":463,"mtime":1613722046490,"results":"50","hashOfConfig":"29"},{"size":7018,"mtime":1614240110297,"results":"51","hashOfConfig":"29"},{"size":1346,"mtime":1614174595041,"results":"52","hashOfConfig":"29"},{"size":1128,"mtime":1614176674622,"results":"53","hashOfConfig":"29"},{"size":3723,"mtime":1614240233555,"results":"54","hashOfConfig":"29"},{"size":2643,"mtime":1614253624638,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1p7gug7",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\index.js",[],["121","122"],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\App.js",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\store\\reducers\\auth.js",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\store\\actions\\actionTypes.js",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\store\\actions\\auth.js",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Footer.jsx",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Header.jsx",["123","124","125","126","127"],"import { Input, Heading, InputGroup, InputLeftElement, Box,\r\n    HStack, IconButton, Spacer,Button, Image, Container} from \"@chakra-ui/react\"\r\nimport { Search2Icon,BellIcon,SettingsIcon } from '@chakra-ui/icons'\r\nimport {React,useState} from 'react'\r\nimport { kPrimaryBlack, kSecondaryBlue } from '../utils/constants'\r\nimport logo from '../assets/logo.png';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction Header(props) {\r\n\r\n   return ([\r\n           <Box bg={kPrimaryBlack} w=\"100%\" p={5}  position=\"fixed\" color=\"white\" h = {16} p= {2}>\r\n               <HStack>\r\n                    <Image \r\n                        src = {logo}\r\n                        htmlWidth = \"60px\"\r\n                        />\r\n                    <Heading  size=\"md\" color=\"black.500\">\r\n                        Volunteer Circle\r\n                    </Heading>\r\n                    <Spacer />\r\n                   <InputGroup w=\"50%\">\r\n                       <InputLeftElement\r\n                       pointerEvents=\"none\"\r\n                       children={<Search2Icon color=\"white.100\" />}\r\n                       \r\n                       />\r\n                       <Input type=\"search\" placeholder=\"Search\" color=\"black.400\"/>\r\n                       <IconButton aria-label=\"Search database\" icon={<Search2Icon />} bg=\"blueGreen.400\"/>\r\n                   </InputGroup>\r\n                   <Spacer/>\r\n                   <HStack>\r\n                   <SignButton type={props.type}/>                  \r\n                   </HStack>\r\n                   \r\n               </HStack>\r\n           </Box>,\r\n           <Box h = {16} bg = {kSecondaryBlue}/>\r\n   ]\r\n   )\r\n}\r\n\r\nfunction SignButton(props){\r\n   if(props.type==false){\r\n       //Guest\r\n       return(\r\n           <HStack>\r\n           <Button size=\"md\" bg=\"blueGreen.100\" >Sign In</Button> \r\n       </HStack>); \r\n   }\r\n   if(props.type==true){\r\n       return(\r\n           <HStack>\r\n               <IconButton icon={<BellIcon />} bg=\"blueGreen.200\"/>\r\n                <IconButton icon={<SettingsIcon />} bg=\"blueGreen.200\" />\r\n                <NavLink\r\n                    to=\"/logout\"\r\n                    activeStyle={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\"\r\n                    }}\r\n                    >Sign Out</NavLink>\r\n           </HStack>\r\n           );\r\n   }\r\n   \r\n}\r\n\r\n\r\nexport default Header;","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Main.jsx",["128"],"import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport ProfileSettings from './ProfileSettings';\r\nimport Profile from './Profile';\r\nimport Home from './Home';\r\nimport Login from './Login';\r\nimport SignUp from './SignUp';\r\nimport Logout from './Logout';\r\nimport Delete from '../popups/DeleteAccount'\r\nimport Change from '../popups/ChangePassword'\r\n\r\nconst Main = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <Login />\r\n            </Route>\r\n            <Route path=\"/delete\" exact>\r\n                <Delete />\r\n            </Route>\r\n            <Route path=\"/change\" exact>\r\n                <Change />\r\n            </Route>\r\n            <Route path=\"/home\" exact>\r\n                <Home />\r\n            </Route>\r\n            <Route path=\"/settings\" exact>\r\n                <ProfileSettings />\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n                <Profile button=\"3\" />\r\n            </Route>\r\n            <Route path=\"/login\" exact>\r\n                <Login />\r\n            </Route>\r\n            <Route path=\"/signup\" exact>\r\n                <SignUp />\r\n            </Route>\r\n            <Route path=\"/logout\" exact>\r\n                <Logout />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\utils\\ajax.js",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\utils\\constants.js",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\ProfileSettings.jsx",["129","130","131","132","133","134"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  Image,\r\n  Stack\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { kPrimaryGray } from '../utils/constants';\r\n\r\nexport default function Profile() {\r\n  const [fname, setFName] = useState('');\r\n  const [lname, setLName] = useState('');\r\n \r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const [isChangePassword, setIsChangePassword] = useState(false);\r\n  const [isDeleteAccount, setIsDeleteAccount] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //save fname and lname\r\n      setIsLoggedIn(true);\r\n      setIsLoading(false);\r\n      \r\n    } catch (error) {\r\n      setError('Invalid');\r\n      setIsLoading(false);\r\n      \r\n    }\r\n  };\r\n\r\n  //image uploading\r\n  const uploadedImage = React.useRef(null);\r\n  const imageUploader = React.useRef(null);\r\n\r\n  const handleImageUpload = e => {\r\n    const [file] = e.target.files;\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      const { current } = uploadedImage;\r\n      current.file = file;\r\n      reader.onload = e => {\r\n        current.src = e.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\r\n      <Box\r\n        p={8}\r\n        w = \"30%\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n        bg = {kPrimaryGray}\r\n      >\r\n        {isLoggedIn ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Changed Profile!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsLoggedIn(false)}\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box >\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\" >\r\n              <Heading>Profile</Heading>\r\n            </Box>\r\n            <Box height=\"20px\"></Box>\r\n            <Box >\r\n              <center>\r\n              <Image                  \r\n                  borderRadius=\"full\"\r\n                  width=\"50%\"\r\n                  height=\"50%\"\r\n                  objectFit=\"cover\"\r\n                  src = {anonymous}\r\n                  alt=\"Profile Picture\"\r\n                  ref={uploadedImage}\r\n                />\r\n                </center>\r\n            </Box>\r\n            <Stack align=\"center\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n                ref={imageUploader}\r\n                style={{\r\n                  display: \"none\"\r\n                }}\r\n              />\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                variant=\"solid\"\r\n                type=\"submit\"\r\n                alignItems=\"center\"\r\n                mt={4}\r\n                onClick={() => imageUploader.current.click()}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    isIndeterminate\r\n                    size=\"sm\"\r\n                    color=\"teal\"\r\n                                      \r\n                  />\r\n                ) : (\r\n                  'Change Picture'\r\n                )}\r\n              </Button>\r\n            </Stack>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl>\r\n                    <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    size=\"lg\"\r\n                    onChange={event => setFName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"20px\"></Box>\r\n                <FormControl>\r\n                <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    colorScheme = \"black\"\r\n                    size=\"lg\"\r\n                    onChange={event => setLName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Save'\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Change Password'\r\n                  )}\r\n                </Button>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete Account'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Logout.jsx",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\SignUp.jsx",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Profile.jsx",["135","136"],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Login.jsx",["137"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react'\r\n\r\nimport{Input, Stack,Button,InputGroup, Box\r\n,Divider, FormControl,Flex,Heading ,Text, Spinner, InputRightElement, IconButton} from '@chakra-ui/react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../store/actions/auth';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\n\r\nclass Login extends Component {\r\n    state = { \r\n        email: '',\r\n        password: '',\r\n        show: false\r\n     }\r\n\r\n    handleClick(){\r\n        this.setState({\r\n            ...this.state,\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.authRedirectPath !== '/login') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        await this.props.onAuth(this.state.email, this.state.password);\r\n        \r\n        console.log(\"token : \"  + localStorage.getItem('token'))\r\n        console.log(\"user : \"  + localStorage.getItem('user'))\r\n    }\r\n  \r\n    handleChange(field, e){         \r\n        let textField = e.target.value;        \r\n        this.setState({\r\n          ...this.state,\r\n          [field]: textField\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let form = \r\n            <Box p={8} maxWidth=\"95%\" borderWidth={3} borderRadius={8} boxShadow=\"lg\" bg=\"white.200\" borderColor=\"blueGreen.100\">\r\n                <Box textAlign=\"center\" color=\"blueGreen.100\" textStyle=\"h1\">\r\n                    <Heading> Login </Heading>\r\n                </Box>\r\n                <Box my={4} textAlign=\"left\">\r\n                    <form action='submit' onSubmit={this.submitHandler}>\r\n                        <Stack spacing={3}>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='email' placeholder='Email' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" onChange={this.handleChange.bind(this, \"email\")} value={this.state.email} />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type={this.state.show ? \"text\" : \"password\"} onChange={this.handleChange.bind(this, \"password\")} value={this.state.password} aria-label='password' placeholder='Password' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                    <InputRightElement>\r\n                                        <IconButton aria-label=\"view password\" h=\"1.75rem\" colorScheme=\"gray\" icon={<ViewIcon/>} size=\"sm\" onClick={this.handleClick.bind(this)}/>\r\n                                    </InputRightElement>\r\n                                </InputGroup>\r\n                            </FormControl>\r\n\r\n                            <Divider />\r\n\r\n                            <Button type='submit' variant='solid' boxShadow='sm' _hover={{ boxShadow: 'md' }} bg=\"black.500\">Log In!</Button>\r\n                        </Stack>\r\n                        <Text textStyle=\"h2\" color=\"blue.200\">\r\n                            <br />\r\n                            <a href=\"signup\">Create New Account</a>\r\n                        </Text>\r\n                    </form>\r\n                </Box>\r\n            </Box>;\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner\r\n            thickness=\"5px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"black\"\r\n            color=\"white\"\r\n            size=\"xl\"\r\n          />;\r\n        }\r\n        \r\n        if (this.props.error) \r\n        console.log(this.props.error.errorMessage);\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            console.log(localStorage.getItem('token'));\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        } else {\r\n            authRedirect = <Redirect to='/login' />\r\n        }\r\n\r\n        return(\r\n            [\r\n                <Box h={window.innerHeight * 0.1} />,\r\n                <Flex width=\"Full\" align=\"center\" justifyContent=\"center\">\r\n                    {form}\r\n                </Flex>\r\n            ]\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error,\r\n        isAuthenticated: !(state.token === null || state.token === undefined),\r\n        token : state.token,\r\n        authRedirectPath: state.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/home'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\popups\\ChangePassword.jsx",["138","139","140"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function ChangePassword() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [newpassword, setNewPassword] = useState('');\r\n  const [confnewpassword, setConfNewPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //if(newpassword===confnewpassword) && await(){\r\n      \r\n      //await() -confirm the current password from back end\r\n\r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setNewPassword('');\r\n      setConfNewPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Change Password</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Confirm New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setConfNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Confirm'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\popups\\DeleteAccount.jsx",["141"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function DeleteAccount() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //await() -confirm the current password from back end\r\n      \r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Delete Account</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                \r\n                \r\n                <Button\r\n                  colorScheme = \"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\pages\\Home.jsx",["142","143"],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\ProfileInfo.jsx",["144","145","146","147"],"import React from 'react';\r\n\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { Image, Button, Box, Heading } from '@chakra-ui/react';\r\nimport { kSecondaryBlue} from '../utils/constants';\r\n\r\n\r\n/**\r\n * Information of the user.\r\n * \r\n * @param name - Name of the user\r\n * @param type - 0-guest/home, 1-add, 2-remove 3-pending\r\n */\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <center>\r\n            <Box w=\"100%\" border = \"5px\"  bg = {kSecondaryBlue}>\r\n                <Image\r\n                    src = {anonymous} //TODO: Need a method to update the profile pic\r\n                    htmlWidth=\"150px\"\r\n                />\r\n                <Heading fontSize=\"25px\" color=\"white\"> {props.name} </Heading>\r\n                <Box h={3}/>\r\n                <ConnectionButton type = {props.button} visit={props.visit}/>\r\n                <Box h={3}/>\r\n            </Box>\r\n        </center>\r\n    );\r\n}\r\n\r\n/**\r\n * Add Connection / Remove Connection button display\r\n * \r\n * @param {*} props \r\n */\r\n//TODO: Add onClick method\r\nconst ConnectionButton = (props) => {\r\n    if (props.visit) {\r\n        if (props.type == \"1\") {\r\n            return (\r\n            <Button colorScheme=\"blue\" variant=\"solid\" >\r\n            Add Connection\r\n             </Button>);\r\n        } else if (props.type == \"2\") {\r\n            return (\r\n            <Button colorScheme=\"red\" variant=\"solid\">\r\n            Remove Connection\r\n            </Button>);\r\n        } else if (props.type == \"3\") {\r\n            return (\r\n            <Heading color = \"green.100\" size = \"md\">Request Pending</Heading>);  \r\n        } else if (props.type == \"0\") {\r\n            return (<div></div>)\r\n        } else {\r\n            throw new Error(\"Invalid type for ConnectionButton\");\r\n        }\r\n    } else {\r\n        return(\r\n            <div>\r\n            \r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default ProfileInfo;","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\ErrorMessage.jsx",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\TempBox.jsx",["148","149","150","151","152","153","154","155","156","157","158"],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\constants.js",["159"],"export const  kPrimaryBlack = \"#263238\";\r\nexport const kPrimaryBlackDark = \"#000a12\";\r\nexport const kPrimaryBlackLight = \"#4f5b62\";\r\nexport const kPrimaryGray = \"#E2E8F0\";\r\n\r\n//SECONDARY\r\nexport const kSecondaryBlue = \"#01579b\";\r\nexport const kSecondaryBlueDark = \"#002f6c\";\r\nexport const kSecondaryBlueLight = \"#4f83cc\";\r\n\r\nexport default {kPrimaryBlack,kPrimaryBlackDark,kPrimaryBlackLight,kPrimaryGray,\r\nkSecondaryBlue,kSecondaryBlueDark,kSecondaryBlueLight}\r\n","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Skills\\Skill\\Skill.js",["160","161","162","163"],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Connections\\Connection\\Connection.js",["164","165"],"import {React,useState} from \"react\"\r\n//import { Link } from \"react-router-dom\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {  Heading, Flex, Avatar, Box, HStack,Image,Link } from \"@chakra-ui/react\"\r\nimport { kPrimaryBlackDark, kPrimaryGray } from \"../../../constants\"\r\n\r\nfunction Connections(props){\r\n\r\n    const [image, setImage] = useState(props.cimage);\r\n    return(\r\n        <>\r\n        <Flex>\r\n            <Box w=\"390px\" p={4} bg={kPrimaryGray}>\r\n                <HStack  spacing=\"3rem\">\r\n                {props.cimage!=null?(\r\n                     <Image src={props.cimage}  borderRadius=\"full\" boxSize=\"3rem\" />\r\n                 \r\n                 ) :(\r\n                     <Avatar name={props.cname} src=\"https://bit.ly/broken-link\" />\r\n                 )\r\n                }\r\n                \r\n                <Heading size=\"sm\" color={kPrimaryBlackDark}>{props.cname}</Heading>\r\n                <Link color=\"blue.200\" fontSize=\"md\"href={props.plink} textAlign=\"end\">\r\n                        View\r\n                    </Link>\r\n        \r\n                </HStack>\r\n            </Box>\r\n        </Flex>\r\n\r\n    </>\r\n    )\r\n}\r\nConnections.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    plink: PropTypes.string,\r\n  }\r\n  Connections.defaultProps =   {\r\n      image:\"null\"\r\n  }\r\n  export default Connections  ","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Reccomendation\\Reccomendation.js",[],"D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Reccomendation\\ReccomendationPost.js",["166","167","168","169","170","171"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\nimport { kPrimaryBlackLight,kSecondaryBlueLight } from '../../constants';\r\n\r\nconst ReccomendationPost = props => {\r\n    return (\r\n        <>\r\n            <ReccomendationButton visit={props.visit} name={props.name} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction ReccomendationButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const[isreccomended,setIsReccomended]=useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const handleReccomendation= async event=>{\r\n        setIsLoading(true);\r\n        try{\r\n            //wait for update validation in db\r\n            setIsReccomended(true);\r\n            setIsLoading(false);\r\n\r\n        }catch{\r\n            setIsReccomended(false);\r\n            setIsLoading(false);\r\n            setError(\"Couldn't Post Reccomendation\")\r\n        }\r\n    }\r\n    if (props.visit == true && isLoggedIn == true && isreccomended==false) {\r\n\r\n        return (\r\n            <>\r\n                <Box>\r\n                    <Button onClick={onOpen} bg={kSecondaryBlueLight} isDisabled={false}>Post Reccomendation</Button>\r\n                </Box>\r\n                <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n                            <Stack>\r\n                                <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                    Post Reccomendation\r\n                                </Heading>\r\n                                <br />\r\n                                <Stack direction=\"row\">\r\n                                    {props.cimage!=null?(\r\n                                        <Image src={props.image}  borderRadius=\"full\" boxSize=\"3rem\" />\r\n                                    ) :(\r\n                                        <Avatar name={props.name} src=\"https://bit.ly/broken-link\" />\r\n                                    )\r\n                                    }\r\n                                    <Text color={kSecondaryBlueLight}>\r\n                                        {props.name}\r\n                                    </Text>\r\n                   \r\n                                    <Textarea placeholder=\"Enter reccomendation\" color=\"black.400\" />\r\n                                    \r\n                                    <ModalCloseButton />\r\n                                </Stack>\r\n                            </Stack>\r\n                            <ModalFooter>\r\n                                <Button colorScheme=\"blue\" mr={3} onClick={()=>handleReccomendation()}>\r\n                                    Post\r\n                                </Button>\r\n                            </ModalFooter>\r\n                        </Box>\r\n                    </ModalContent>\r\n                </Modal>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <Button onClick={onOpen} bg={kSecondaryBlueLight}isDisabled={true}>Post Reccomendation</Button>\r\n        );\r\n    }\r\n}\r\n\r\nReccomendationPost.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nReccomendationPost.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default ReccomendationPost  \r\n","D:\\Semester 4\\Software Engineering\\Group project\\vc-frontend\\vc-frontend\\src\\components\\Skills\\Skill\\addSkill.js",["172","173","174","175","176","177","178"],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":2,"column":47,"nodeType":"185","messageId":"186","endLine":2,"endColumn":56},{"ruleId":"183","severity":1,"message":"187","line":4,"column":15,"nodeType":"185","messageId":"186","endLine":4,"endColumn":23},{"ruleId":"188","severity":1,"message":"189","line":12,"column":92,"nodeType":"190","endLine":12,"endColumn":98},{"ruleId":"191","severity":1,"message":"192","line":44,"column":17,"nodeType":"193","messageId":"194","endLine":44,"endColumn":19},{"ruleId":"191","severity":1,"message":"192","line":51,"column":17,"nodeType":"193","messageId":"194","endLine":51,"endColumn":19},{"ruleId":"183","severity":1,"message":"195","line":2,"column":10,"nodeType":"185","messageId":"186","endLine":2,"endColumn":23},{"ruleId":"183","severity":1,"message":"196","line":21,"column":10,"nodeType":"185","messageId":"186","endLine":21,"endColumn":15},{"ruleId":"183","severity":1,"message":"197","line":22,"column":10,"nodeType":"185","messageId":"186","endLine":22,"endColumn":15},{"ruleId":"183","severity":1,"message":"198","line":28,"column":10,"nodeType":"185","messageId":"186","endLine":28,"endColumn":26},{"ruleId":"183","severity":1,"message":"199","line":28,"column":28,"nodeType":"185","messageId":"186","endLine":28,"endColumn":47},{"ruleId":"183","severity":1,"message":"200","line":29,"column":10,"nodeType":"185","messageId":"186","endLine":29,"endColumn":25},{"ruleId":"183","severity":1,"message":"201","line":29,"column":27,"nodeType":"185","messageId":"186","endLine":29,"endColumn":45},{"ruleId":"183","severity":1,"message":"202","line":32,"column":15,"nodeType":"185","messageId":"186","endLine":32,"endColumn":21},{"ruleId":"191","severity":1,"message":"192","line":34,"column":31,"nodeType":"193","messageId":"194","endLine":34,"endColumn":33},{"ruleId":"183","severity":1,"message":"203","line":101,"column":13,"nodeType":"185","messageId":"186","endLine":101,"endColumn":25},{"ruleId":"183","severity":1,"message":"204","line":21,"column":10,"nodeType":"185","messageId":"186","endLine":21,"endColumn":25},{"ruleId":"183","severity":1,"message":"205","line":22,"column":10,"nodeType":"185","messageId":"186","endLine":22,"endColumn":21},{"ruleId":"183","severity":1,"message":"206","line":23,"column":10,"nodeType":"185","messageId":"186","endLine":23,"endColumn":25},{"ruleId":"183","severity":1,"message":"204","line":21,"column":10,"nodeType":"185","messageId":"186","endLine":21,"endColumn":25},{"ruleId":"183","severity":1,"message":"207","line":3,"column":15,"nodeType":"185","messageId":"186","endLine":3,"endColumn":22},{"ruleId":"183","severity":1,"message":"208","line":3,"column":30,"nodeType":"185","messageId":"186","endLine":3,"endColumn":38},{"ruleId":"191","severity":1,"message":"192","line":39,"column":24,"nodeType":"193","messageId":"194","endLine":39,"endColumn":26},{"ruleId":"191","severity":1,"message":"192","line":44,"column":31,"nodeType":"193","messageId":"194","endLine":44,"endColumn":33},{"ruleId":"191","severity":1,"message":"192","line":49,"column":31,"nodeType":"193","messageId":"194","endLine":49,"endColumn":33},{"ruleId":"191","severity":1,"message":"192","line":52,"column":31,"nodeType":"193","messageId":"194","endLine":52,"endColumn":33},{"ruleId":"183","severity":1,"message":"209","line":1,"column":15,"nodeType":"185","messageId":"186","endLine":1,"endColumn":21},{"ruleId":"183","severity":1,"message":"210","line":1,"column":67,"nodeType":"185","messageId":"186","endLine":1,"endColumn":77},{"ruleId":"191","severity":1,"message":"192","line":40,"column":32,"nodeType":"193","messageId":"194","endLine":40,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":40,"column":61,"nodeType":"193","messageId":"194","endLine":40,"endColumn":63},{"ruleId":"191","severity":1,"message":"211","line":64,"column":31,"nodeType":"193","messageId":"194","endLine":64,"endColumn":33},{"ruleId":"191","severity":1,"message":"192","line":151,"column":20,"nodeType":"193","messageId":"194","endLine":151,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":164,"column":27,"nodeType":"193","messageId":"194","endLine":164,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":175,"column":27,"nodeType":"193","messageId":"194","endLine":175,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":192,"column":20,"nodeType":"193","messageId":"194","endLine":192,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":202,"column":27,"nodeType":"193","messageId":"194","endLine":202,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":207,"column":27,"nodeType":"193","messageId":"194","endLine":207,"endColumn":29},{"ruleId":"212","severity":1,"message":"213","line":11,"column":1,"nodeType":"214","endLine":12,"endColumn":55},{"ruleId":"183","severity":1,"message":"215","line":22,"column":8,"nodeType":"185","messageId":"186","endLine":22,"endColumn":13},{"ruleId":"183","severity":1,"message":"216","line":23,"column":74,"nodeType":"185","messageId":"186","endLine":23,"endColumn":93},{"ruleId":"191","severity":1,"message":"211","line":84,"column":33,"nodeType":"193","messageId":"194","endLine":84,"endColumn":35},{"ruleId":"191","severity":1,"message":"192","line":95,"column":28,"nodeType":"193","messageId":"194","endLine":95,"endColumn":30},{"ruleId":"183","severity":1,"message":"217","line":10,"column":12,"nodeType":"185","messageId":"186","endLine":10,"endColumn":17},{"ruleId":"183","severity":1,"message":"218","line":10,"column":19,"nodeType":"185","messageId":"186","endLine":10,"endColumn":27},{"ruleId":"183","severity":1,"message":"219","line":21,"column":24,"nodeType":"185","messageId":"186","endLine":21,"endColumn":37},{"ruleId":"183","severity":1,"message":"220","line":24,"column":12,"nodeType":"185","messageId":"186","endLine":24,"endColumn":21},{"ruleId":"183","severity":1,"message":"221","line":25,"column":12,"nodeType":"185","messageId":"186","endLine":25,"endColumn":17},{"ruleId":"191","severity":1,"message":"192","line":40,"column":21,"nodeType":"193","messageId":"194","endLine":40,"endColumn":23},{"ruleId":"191","severity":1,"message":"192","line":40,"column":43,"nodeType":"193","messageId":"194","endLine":40,"endColumn":45},{"ruleId":"191","severity":1,"message":"192","line":40,"column":67,"nodeType":"193","messageId":"194","endLine":40,"endColumn":69},{"ruleId":"183","severity":1,"message":"222","line":5,"column":48,"nodeType":"185","messageId":"186","endLine":5,"endColumn":53},{"ruleId":"183","severity":1,"message":"223","line":6,"column":25,"nodeType":"185","messageId":"186","endLine":6,"endColumn":29},{"ruleId":"183","severity":1,"message":"224","line":7,"column":16,"nodeType":"185","messageId":"186","endLine":7,"endColumn":22},{"ruleId":"183","severity":1,"message":"225","line":22,"column":12,"nodeType":"185","messageId":"186","endLine":22,"endColumn":22},{"ruleId":"183","severity":1,"message":"219","line":22,"column":24,"nodeType":"185","messageId":"186","endLine":22,"endColumn":37},{"ruleId":"183","severity":1,"message":"220","line":24,"column":12,"nodeType":"185","messageId":"186","endLine":24,"endColumn":21},{"ruleId":"183","severity":1,"message":"221","line":25,"column":12,"nodeType":"185","messageId":"186","endLine":25,"endColumn":17},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'BrowserRouter' is defined but never used.","'fname' is assigned a value but never used.","'lname' is assigned a value but never used.","'isChangePassword' is assigned a value but never used.","'setIsChangePassword' is assigned a value but never used.","'isDeleteAccount' is assigned a value but never used.","'setIsDeleteAccount' is assigned a value but never used.","'result' is assigned a value but never used.","'authRedirect' is assigned a value but never used.","'currentpassword' is assigned a value but never used.","'newpassword' is assigned a value but never used.","'confnewpassword' is assigned a value but never used.","'Heading' is defined but never used.","'WrapItem' is defined but never used.","'Button' is defined but never used.","'ScrollView' is defined but never used.","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'axios' is defined but never used.","'kSecondaryBlueLight' is defined but never used.","'image' is assigned a value but never used.","'setImage' is assigned a value but never used.","'setIsLoggedIn' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'Image' is defined but never used.","'Text' is defined but never used.","'Avatar' is defined but never used.","'isLoggedIn' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]