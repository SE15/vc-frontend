[{"D:\\Web Applications\\ReactTutorials\\React\\confusion\\src\\index.js":"1","D:\\Web Applications\\ReactTutorials\\React\\confusion\\src\\reportWebVitals.js":"2","D:\\Web Applications\\ReactTutorials\\React\\confusion\\src\\App.js":"3","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js":"4","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js":"5","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\reportWebVitals.js":"6","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ThemeToggler.jsx":"7","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx":"8","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\TempScreen.jsx":"9","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx":"10","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx":"11","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx":"12","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":528,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":517,"mtime":1611340083259,"results":"18","hashOfConfig":"19"},{"size":340,"mtime":1611341939984,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1610380932308,"results":"21","hashOfConfig":"19"},{"size":470,"mtime":1611341932671,"results":"22","hashOfConfig":"19"},{"size":698,"mtime":1611340882470,"results":"23","hashOfConfig":"19"},{"size":739,"mtime":1611341695254,"results":"24","hashOfConfig":"19"},{"size":5327,"mtime":1611341011329,"results":"25","hashOfConfig":"19"},{"size":282,"mtime":1611343882774,"results":"26","hashOfConfig":"19"},{"size":351,"mtime":1611341670955,"results":"27","hashOfConfig":"19"},{"size":1488,"mtime":1611344971131,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ibu9tb",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1tgqvh",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Web Applications\\ReactTutorials\\React\\confusion\\src\\index.js",[],"D:\\Web Applications\\ReactTutorials\\React\\confusion\\src\\reportWebVitals.js",[],"D:\\Web Applications\\ReactTutorials\\React\\confusion\\src\\App.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js",[],["57","58"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\reportWebVitals.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ThemeToggler.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\TempScreen.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx",["59","60","61","62","63","64"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  Image,\r\n  Stack\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport logo from '../assets/logo.png';\r\n\r\nexport default function Profile() {\r\n  const [fname, setFName] = useState('');\r\n  const [lname, setLName] = useState('');\r\n \r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const [isChangePassword, setIsChangePassword] = useState(false);\r\n  const [isDeleteAccount, setIsDeleteAccount] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //save fname and lname\r\n      setIsLoggedIn(true);\r\n      setIsLoading(false);\r\n      \r\n    } catch (error) {\r\n      setError('Invalid');\r\n      setIsLoading(false);\r\n      \r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isLoggedIn ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Changed Profile!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsLoggedIn(false)}\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Profile</Heading>\r\n            </Box>\r\n            <Box height=\"20px\"></Box>\r\n            <Box >\r\n              <center>\r\n              <Image                  \r\n                  borderRadius=\"full\"\r\n                  width=\"50%\"\r\n                  height=\"50%\"\r\n                  objectFit=\"cover\"\r\n                  src = {logo}\r\n                  alt=\"Profile Picture\"\r\n                />\r\n                </center>\r\n            </Box>\r\n            <Stack align=\"center\">\r\n              <Button\r\n                variantColor=\"teal\"\r\n                variant=\"outline\"\r\n                type=\"submit\"\r\n                alignItems=\"center\"\r\n                mt={4}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    isIndeterminate\r\n                    size=\"sm\"\r\n                    color=\"teal\"\r\n                                      \r\n                  />\r\n                ) : (\r\n                  'Change Picture'\r\n                )}\r\n              </Button>\r\n            </Stack>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    size=\"lg\"\r\n                    onChange={event => setFName(event.currentTarget.value)}\r\n                  />\r\n                </FormControl>\r\n                <Box height=\"20px\"></Box>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    size=\"lg\"\r\n                    onChange={event => setLName(event.currentTarget.value)}\r\n                  />\r\n                </FormControl>\r\n                \r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Save'\r\n                  )}\r\n                </Button>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Change Password'\r\n                  )}\r\n                </Button>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete Account'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx",["65","66","67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":20,"column":10,"nodeType":"75","messageId":"76","endLine":20,"endColumn":15},{"ruleId":"73","severity":1,"message":"77","line":21,"column":10,"nodeType":"75","messageId":"76","endLine":21,"endColumn":15},{"ruleId":"73","severity":1,"message":"78","line":27,"column":10,"nodeType":"75","messageId":"76","endLine":27,"endColumn":26},{"ruleId":"73","severity":1,"message":"79","line":27,"column":28,"nodeType":"75","messageId":"76","endLine":27,"endColumn":47},{"ruleId":"73","severity":1,"message":"80","line":28,"column":10,"nodeType":"75","messageId":"76","endLine":28,"endColumn":25},{"ruleId":"73","severity":1,"message":"81","line":28,"column":27,"nodeType":"75","messageId":"76","endLine":28,"endColumn":45},{"ruleId":"73","severity":1,"message":"82","line":4,"column":39,"nodeType":"75","messageId":"76","endLine":4,"endColumn":43},{"ruleId":"83","severity":1,"message":"84","line":37,"column":20,"nodeType":"85","messageId":"86","endLine":37,"endColumn":22},{"ruleId":"83","severity":1,"message":"84","line":42,"column":27,"nodeType":"85","messageId":"86","endLine":42,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":47,"column":27,"nodeType":"85","messageId":"86","endLine":47,"endColumn":29},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'fname' is assigned a value but never used.","Identifier","unusedVar","'lname' is assigned a value but never used.","'isChangePassword' is assigned a value but never used.","'setIsChangePassword' is assigned a value but never used.","'isDeleteAccount' is assigned a value but never used.","'setIsDeleteAccount' is assigned a value but never used.","'Text' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]