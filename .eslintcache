[{"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js":"1","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js":"2","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js":"3","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js":"4","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx":"5","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx":"6","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx":"7","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js":"8","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx":"9","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx":"10","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx":"11","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx":"12","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx":"13","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx":"14","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx":"15","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx":"16","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js":"17","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx":"18","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\TempBox.jsx":"19","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js":"20","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js":"21","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js":"22","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js":"23","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js":"24","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx":"25","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js":"26","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\ReccomendationPost.js":"27","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\Reccomendation.js":"28","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\Skill.js":"29","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\addSkill.js":"30","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js":"31","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\constants.js":"32","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js":"33","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx":"34","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx":"35","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx":"36","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx":"37","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx":"38","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\GridComponent\\GridComponent.jsx":"39","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js":"40","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Search.jsx":"41","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\ConnectionRequest.jsx":"42","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\Connection.js":"43"},{"size":829,"mtime":1613711181393,"results":"44","hashOfConfig":"45"},{"size":708,"mtime":1614883143542,"results":"46","hashOfConfig":"45"},{"size":1567,"mtime":1614882824639,"results":"47","hashOfConfig":"45"},{"size":3073,"mtime":1614883123698,"results":"48","hashOfConfig":"45"},{"size":737,"mtime":1614862351879,"results":"49","hashOfConfig":"45"},{"size":4511,"mtime":1614949956670,"results":"50","hashOfConfig":"45"},{"size":3326,"mtime":1614941994130,"results":"51","hashOfConfig":"45"},{"size":407,"mtime":1613711306439,"results":"52","hashOfConfig":"45"},{"size":536,"mtime":1611509267764,"results":"53","hashOfConfig":"45"},{"size":6394,"mtime":1611474902132,"results":"54","hashOfConfig":"45"},{"size":6547,"mtime":1614882485581,"results":"55","hashOfConfig":"45"},{"size":3420,"mtime":1614888723943,"results":"56","hashOfConfig":"45"},{"size":2943,"mtime":1614888270871,"results":"57","hashOfConfig":"45"},{"size":4799,"mtime":1614883479571,"results":"58","hashOfConfig":"45"},{"size":5941,"mtime":1611341203071,"results":"59","hashOfConfig":"45"},{"size":3729,"mtime":1611494090127,"results":"60","hashOfConfig":"45"},{"size":423,"mtime":1614334400196,"results":"61","hashOfConfig":"45"},{"size":351,"mtime":1611341670955,"results":"62","hashOfConfig":"45"},{"size":6926,"mtime":1614942137674,"results":"63","hashOfConfig":"45"},{"size":430,"mtime":1614177239846,"results":"64","hashOfConfig":"45"},{"size":236,"mtime":1614177269771,"results":"65","hashOfConfig":"45"},{"size":575,"mtime":1614860292276,"results":"66","hashOfConfig":"45"},{"size":477,"mtime":1614263589177,"results":"67","hashOfConfig":"45"},{"size":124,"mtime":1614334519892,"results":"68","hashOfConfig":"45"},{"size":1988,"mtime":1614862622904,"results":"69","hashOfConfig":"45"},{"size":1343,"mtime":1614858728223,"results":"70","hashOfConfig":"45"},{"size":3723,"mtime":1614836885026,"results":"71","hashOfConfig":"45"},{"size":1128,"mtime":1614836885024,"results":"72","hashOfConfig":"45"},{"size":7041,"mtime":1614889055235,"results":"73","hashOfConfig":"45"},{"size":2643,"mtime":1614836885029,"results":"74","hashOfConfig":"45"},{"size":298,"mtime":1614264423237,"results":"75","hashOfConfig":"45"},{"size":463,"mtime":1613711181391,"results":"76","hashOfConfig":"45"},{"size":233,"mtime":1614857403108,"results":"77","hashOfConfig":"45"},{"size":1966,"mtime":1614884721447,"results":"78","hashOfConfig":"45"},{"size":1264,"mtime":1614876210460,"results":"79","hashOfConfig":"45"},{"size":859,"mtime":1614878712201,"results":"80","hashOfConfig":"45"},{"size":1746,"mtime":1614876295188,"results":"81","hashOfConfig":"45"},{"size":2008,"mtime":1614876203309,"results":"82","hashOfConfig":"45"},{"size":736,"mtime":1614876183568,"results":"83","hashOfConfig":"45"},{"size":114,"mtime":1614857475940,"results":"84","hashOfConfig":"45"},{"size":1966,"mtime":1614940078794,"results":"85","hashOfConfig":"45"},{"size":1682,"mtime":1614945500808,"results":"86","hashOfConfig":"45"},{"size":1343,"mtime":1614942173853,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1tgqvh",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"90"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js",[],["193","194"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx",["195"],"import React from \"react\";\r\nimport { Flex, Box, Heading, Stack } from \"@chakra-ui/react\";\r\nimport { kPrimaryBlack } from '../utils/constants';\r\n\r\nconst Footer = () => {\r\n  return (\r\n      [\r\n          <Box h={8} />,\r\n    <Flex\r\n      width=\"full\"\r\n      position=\"fixed\"\r\n      bottom=\"0\"\r\n      py={2}\r\n      bg=\"purple.700\"\r\n      borderTopRadius=\"1rem\"\r\n    >\r\n      <Box width=\"full\" boxShadow=\"xs\">\r\n        <Stack isInline justifyContent=\"center\" px={8}>\r\n          <FooterName />\r\n        </Stack>\r\n      </Box>\r\n    </Flex>\r\n      ]\r\n  );\r\n};\r\n\r\nconst FooterName = () => {\r\n  return (\r\n    <Heading\r\n      fontSize=\"15px\"\r\n      color = \"white\"\r\n    >\r\n      Designed by SE15\r\n    </Heading>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx",["196","197","198","199","200"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx",["201","202","203","204","205","206"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  Image,\r\n  Stack\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { kPrimaryGray } from '../utils/constants';\r\n\r\nexport default function Profile() {\r\n  const [fname, setFName] = useState('');\r\n  const [lname, setLName] = useState('');\r\n \r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const [isChangePassword, setIsChangePassword] = useState(false);\r\n  const [isDeleteAccount, setIsDeleteAccount] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //save fname and lname\r\n      setIsLoggedIn(true);\r\n      setIsLoading(false);\r\n      \r\n    } catch (error) {\r\n      setError('Invalid');\r\n      setIsLoading(false);\r\n      \r\n    }\r\n  };\r\n\r\n  //image uploading\r\n  const uploadedImage = React.useRef(null);\r\n  const imageUploader = React.useRef(null);\r\n\r\n  const handleImageUpload = e => {\r\n    const [file] = e.target.files;\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      const { current } = uploadedImage;\r\n      current.file = file;\r\n      reader.onload = e => {\r\n        current.src = e.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\r\n      <Box\r\n        p={8}\r\n        w = \"30%\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n        bg = {kPrimaryGray}\r\n      >\r\n        {isLoggedIn ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Changed Profile!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsLoggedIn(false)}\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box >\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\" >\r\n              <Heading>Profile</Heading>\r\n            </Box>\r\n            <Box height=\"20px\"></Box>\r\n            <Box >\r\n              <center>\r\n              <Image                  \r\n                  borderRadius=\"full\"\r\n                  width=\"50%\"\r\n                  height=\"50%\"\r\n                  objectFit=\"cover\"\r\n                  src = {anonymous}\r\n                  alt=\"Profile Picture\"\r\n                  ref={uploadedImage}\r\n                />\r\n                </center>\r\n            </Box>\r\n            <Stack align=\"center\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n                ref={imageUploader}\r\n                style={{\r\n                  display: \"none\"\r\n                }}\r\n              />\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                variant=\"solid\"\r\n                type=\"submit\"\r\n                alignItems=\"center\"\r\n                mt={4}\r\n                onClick={() => imageUploader.current.click()}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    isIndeterminate\r\n                    size=\"sm\"\r\n                    color=\"teal\"\r\n                                      \r\n                  />\r\n                ) : (\r\n                  'Change Picture'\r\n                )}\r\n              </Button>\r\n            </Stack>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl>\r\n                    <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    size=\"lg\"\r\n                    onChange={event => setFName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"20px\"></Box>\r\n                <FormControl>\r\n                <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    colorScheme = \"black\"\r\n                    size=\"lg\"\r\n                    onChange={event => setLName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Save'\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Change Password'\r\n                  )}\r\n                </Button>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete Account'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx",["207","208"],"import React, { Component } from 'react'\r\nimport {\r\n    Input, Stack, Button, InputGroup, Box,\r\n    HStack, Divider, FormControl, Flex, Heading, Text, InputRightElement, IconButton, Spinner, ReactRouterLink, Image\r\n} from '@chakra-ui/react';\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\n\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        passwordConfirmed: true,\r\n        show: false,\r\n        loading: false\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({\r\n            ...this.state,\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let textField = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            [field]: textField\r\n        },\r\n            function () { if (field === \"confirmPassword\" || field === \"password\") this.checkPassword(textField) });\r\n\r\n    }\r\n\r\n    checkPassword(textField) {\r\n        if (this.state.confirmPassword === this.state.password) {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: false\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            ...this.state,\r\n            loading: true\r\n        })\r\n        if (this.state.passwordConfirmed) {\r\n            await axios.post('http://localhost:5000/api/guests/users/registration', this.state)\r\n                .then(data => {\r\n                    console.log(\"RESPONSE: \" + JSON.stringify(data))\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"ERR: \" + err.message)\r\n                })\r\n            alert(\"SignUp is Success\");\r\n        } else {\r\n            console.log(\"error\")\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let form = (<Box p={8} maxWidth=\"85%\" borderWidth={3} borderRadius={8} boxShadow=\"lg\" bg=\"white.200\" borderColor=\"purple.100\">\r\n            <HStack textAlign=\"center\" color=\"blueGreen.100\" textStyle=\"h1\" wrap=\"wrap\">\r\n                <Heading fontSize=\"24px\"> Create Your Own </Heading> <Heading fontSize=\"24px\" color=\"purple.700\">Volunteer Profile! </Heading>\r\n            </HStack>\r\n            <Box my={4} textAlign=\"left\">\r\n                <form action='submit' onSubmit={this.submitHandler}>\r\n                    <Stack spacing={3}>\r\n                        <HStack>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='text' onChange={this.handleChange.bind(this, \"firstName\")} value={this.state.firstName} placeholder='First Name' bg=\"white.100\" color=\"black.600\" width=\"100%\" borderColor=\"blueGreen.100\" />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='text' onChange={this.handleChange.bind(this, \"lastName\")} value={this.state.lastName} placeholder='Last Name' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                        </HStack>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type='email' onChange={this.handleChange.bind(this, \"email\")} value={this.state.email} placeholder='Email' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                            </InputGroup>\r\n                        </FormControl>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type={this.state.show ? \"text\" : \"password\"} onChange={this.handleChange.bind(this, \"password\")} value={this.state.password} aria-label='password' placeholder='Password' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                <InputRightElement>\r\n                                    <IconButton aria-label=\"view password\" h=\"1.75rem\" colorScheme=\"gray\" icon={<ViewIcon />} size=\"sm\" onClick={this.handleClick.bind(this)} />\r\n                                </InputRightElement>\r\n                            </InputGroup>\r\n                        </FormControl>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type='password' focusBorderColor={this.state.passwordConfirmed ? this.state.password === \"\" ? \"blue.400\" : \"green.400\" : \"red.400\"} value={this.state.confirmPassword} borderColor={this.state.passwordConfirmed ? this.state.password === \"\" ? \"blueGreen.400\" : \"green.400\" : \"red.400\"} onChange={this.handleChange.bind(this, \"confirmPassword\")} aria-label='Confirm password' placeholder='Confirm Password' bg=\"white.100\" color=\"black.600\" />\r\n                            </InputGroup>\r\n                        </FormControl>\r\n\r\n                        <Divider />\r\n\r\n                        <Button type='submit' colorScheme=\"purple\" isLoading={this.state.loading}>Sign Up!</Button>\r\n                    </Stack>\r\n                    <Link as={ReactRouterLink} to=\"/\">\r\n                        <Text textStyle=\"h2\" color=\"purple.700\" pt={4}>\r\n                            Already Registered? Sign In\r\n                    </Text>\r\n                    </Link>\r\n                </form>\r\n            </Box>\r\n        </Box>);\r\n\r\n        return (\r\n            <HStack spacing={20} pt={window.innerHeight / 15} px={window.innerWidth / 45} justify=\"center\">\r\n                <Image\r\n                    boxSize=\"20%\"\r\n                    src=\"/signup-bg1.png\"\r\n                />\r\n                {form}\r\n                <Image\r\n                    boxSize=\"20%\"\r\n                    src=\"/signup-bg2.png\"\r\n                />\r\n            </HStack>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SignUp);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx",["209","210","211","212","213","214"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx",["215"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react'\r\n\r\nimport {\r\n    Input, Stack, Button, InputGroup, Box, ReactRouterLink\r\n    , Divider, FormControl, Flex, Heading, Text, Spinner, InputRightElement, IconButton, HStack, Image\r\n} from '@chakra-ui/react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../store/actions/auth';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        show: false\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({\r\n            ...this.state,\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.authRedirectPath !== '/login') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        await this.props.onAuth(this.state.email, this.state.password);\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let textField = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            [field]: textField\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let form =\r\n            <Box p={8} maxWidth=\"95%\" borderWidth={3} borderRadius={8} boxShadow=\"lg\" bg=\"white.200\" borderColor=\"purple.100\" right={0} align=\"right\">\r\n                <Box textAlign=\"center\" color=\"blueGreen.100\" textStyle=\"h1\">\r\n                    <Heading color=\"gray.700\"> Sign In </Heading>\r\n                </Box>\r\n                <Box my={4} textAlign=\"left\">\r\n                    <form action='submit' onSubmit={this.submitHandler}>\r\n                        <Stack spacing={3}>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='email' placeholder='Email' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" onChange={this.handleChange.bind(this, \"email\")} value={this.state.email} />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type={this.state.show ? \"text\" : \"password\"} onChange={this.handleChange.bind(this, \"password\")} value={this.state.password} aria-label='password' placeholder='Password' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                    <InputRightElement>\r\n                                        <IconButton aria-label=\"view password\" h=\"1.75rem\" colorScheme=\"gray\" icon={<ViewIcon />} size=\"sm\" onClick={this.handleClick.bind(this)} />\r\n                                    </InputRightElement>\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <Divider />\r\n                            <Button type='submit' colorScheme=\"purple\" isLoading={this.props.loading}>Sign In</Button>\r\n                        </Stack>\r\n                        <Link as={ReactRouterLink} to=\"/signup\" >\r\n                            <Text textStyle=\"h2\" color=\"purple.500\" pt={4}>\r\n                                Create New Account\r\n                        </Text>\r\n                        </Link>\r\n                    </form>\r\n                </Box>\r\n            </Box>;\r\n\r\n        console.log(this.props.isAuthenticated);\r\n        console.log(this.props.authRedirectPath);\r\n        if (this.props.isAuthenticated) {\r\n            console.log(\"object\");\r\n            return (<Redirect to={this.props.authRedirectPath} />);\r\n        }\r\n\r\n        return (\r\n            <HStack spacing={10} pt={window.innerHeight / 10} px={window.innerWidth / 50}>\r\n                <Image\r\n                    boxSize=\"70%\"\r\n                    src=\"/login-bg.png\"\r\n                />\r\n                <Box h={window.innerHeight * 0.1} />,\r\n                <Flex width=\"Full\" align=\"center\" justifyContent=\"center\">\r\n                    {form}\r\n                </Flex>\r\n            </HStack>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error,\r\n        isAuthenticated: !(state.token === null || state.token === undefined),\r\n        token: state.token,\r\n        authRedirectPath: state.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx",["216","217","218"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function ChangePassword() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [newpassword, setNewPassword] = useState('');\r\n  const [confnewpassword, setConfNewPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //if(newpassword===confnewpassword) && await(){\r\n      \r\n      //await() -confirm the current password from back end\r\n\r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setNewPassword('');\r\n      setConfNewPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Change Password</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Confirm New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setConfNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Confirm'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx",["219"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function DeleteAccount() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //await() -confirm the current password from back end\r\n      \r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Delete Account</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                \r\n                \r\n                <Button\r\n                  colorScheme = \"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\TempBox.jsx",["220","221","222","223","224","225","226","227","228","229","230"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js",["231","232"],"import { postRequest, putRequest, deleteRequest } from \"./utils\";\r\n\r\nconst BASE_URL = \"users\";\r\nconst URL = \"recommendations\";\r\n\r\nexport const submitRecommendation = (userId, data) => postRequest(`${BASE_URL}/${userId}/${URL}`, data);\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx",["233","234","235","236","237","238","239"],"import React from 'react';\r\n\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { Image, Button, Box, Heading, Avatar } from '@chakra-ui/react';\r\nimport { kSecondaryBlue} from '../utils/constants';\r\n\r\n\r\n/**\r\n * Information of the user.\r\n * \r\n * @param name - Name of the user\r\n * @param type - 0-guest/home, 1-add, 2-remove 3-pending\r\n */\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <center>\r\n            <Box w=\"100%\" border = \"5px\" pt={2}>\r\n                <Avatar \r\n                    name=\"Ryan Florence\" \r\n                    src=\"https://bit.ly/ryan-florence\"\r\n                    size=\"2xl\"\r\n                    borderColor=\"purple.500\"\r\n                    showBorder={true}\r\n                />\r\n                <Heading fontSize=\"20px\" color=\"purple.700\"> {props.name} </Heading>\r\n                <Box h={3}/>\r\n                <ConnectionButton type = {props.button} visit={props.visit}/>\r\n                <Box h={3}/>\r\n            </Box>\r\n        </center>\r\n    );\r\n}\r\n\r\n/**\r\n * Add Connection / Remove Connection button display\r\n * \r\n * @param {*} props \r\n */\r\n//TODO: Add onClick method\r\nconst ConnectionButton = (props) => {\r\n    if (props.visit) {\r\n        if (props.type == \"1\") {\r\n            return (\r\n            <Button colorScheme=\"blue\" variant=\"solid\" >\r\n            Add Connection\r\n             </Button>);\r\n        } else if (props.type == \"2\") {\r\n            return (\r\n            <Button colorScheme=\"red\" variant=\"solid\">\r\n            Remove Connection\r\n            </Button>);\r\n        } else if (props.type == \"3\") {\r\n            return (\r\n            <Heading color = \"green.100\" size = \"md\">Request Pending</Heading>);  \r\n        } else if (props.type == \"0\") {\r\n            return (<div></div>)\r\n        } else {\r\n            throw new Error(\"Invalid type for ConnectionButton\");\r\n        }\r\n    } else {\r\n        return(\r\n            <div>\r\n            \r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default ProfileInfo;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js",["240"],"import axios from './axios';\r\n\r\nexport const getRequest = async (url) => {\r\n\ttry {\r\n\t\tconsole.log(url);\r\n\t\tlet response = await axios.get(url);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nexport const postRequest = async (url, data) => {\r\n\ttry {\r\n\t\tconsole.log(url, data);\r\n\t\tlet response = await axios.post(url, data);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nexport const putRequest = async (url, data) => {\r\n\ttry {\r\n\t\tlet response = (data) ? await axios.put(url, data) : await axios.put(url);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nexport const deleteRequest = async (url) => {\r\n\ttry {\r\n\t\tlet response = await axios.delete(url);\r\n\t\treturn generateSuccessOutput(response);\r\n\t} catch (error) {\r\n\t\treturn generateErrorOutput(error);\r\n\t}\r\n};\r\n\r\nconst generateSuccessOutput = (response) => {\r\n\tconsole.log(response);\r\n\treturn  {\r\n\t\tdata: response.data.results,\r\n\t\tmessage: response.data.message,\r\n\t}\r\n}\r\n\r\nconst generateErrorOutput = (error) => {\r\n\tif (error.message = \"Network Error\")\r\n\t\treturn {\r\n\t\t\terror: error,\r\n\t\t\tmessage: error.message\r\n\t\t}\r\n\telse\r\n\t\treturn {\r\n\t\t\terror: error,\r\n\t\t\tmessage: error.response.data.message\r\n\t\t}\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\ReccomendationPost.js",["241","242","243","244","245","246"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\nimport { kPrimaryBlackLight,kSecondaryBlueLight } from '../../constants';\r\n\r\nconst ReccomendationPost = props => {\r\n    return (\r\n        <>\r\n            <ReccomendationButton visit={props.visit} name={props.name} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction ReccomendationButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const[isreccomended,setIsReccomended]=useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const handleReccomendation= async event=>{\r\n        setIsLoading(true);\r\n        try{\r\n            //wait for update validation in db\r\n            setIsReccomended(true);\r\n            setIsLoading(false);\r\n\r\n        }catch{\r\n            setIsReccomended(false);\r\n            setIsLoading(false);\r\n            setError(\"Couldn't Post Reccomendation\")\r\n        }\r\n    }\r\n    if (props.visit == true && isLoggedIn == true && isreccomended==false) {\r\n\r\n        return (\r\n            <>\r\n                <Box>\r\n                    <Button onClick={onOpen} bg={kSecondaryBlueLight} isDisabled={false}>Post Reccomendation</Button>\r\n                </Box>\r\n                <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n                            <Stack>\r\n                                <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                    Post Reccomendation\r\n                                </Heading>\r\n                                <br />\r\n                                <Stack direction=\"row\">\r\n                                    {props.cimage!=null?(\r\n                                        <Image src={props.image}  borderRadius=\"full\" boxSize=\"3rem\" />\r\n                                    ) :(\r\n                                        <Avatar name={props.name} src=\"https://bit.ly/broken-link\" />\r\n                                    )\r\n                                    }\r\n                                    <Text color={kSecondaryBlueLight}>\r\n                                        {props.name}\r\n                                    </Text>\r\n                   \r\n                                    <Textarea placeholder=\"Enter reccomendation\" color=\"black.400\" />\r\n                                    \r\n                                    <ModalCloseButton />\r\n                                </Stack>\r\n                            </Stack>\r\n                            <ModalFooter>\r\n                                <Button colorScheme=\"blue\" mr={3} onClick={()=>handleReccomendation()}>\r\n                                    Post\r\n                                </Button>\r\n                            </ModalFooter>\r\n                        </Box>\r\n                    </ModalContent>\r\n                </Modal>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <Button onClick={onOpen} bg={kSecondaryBlueLight}isDisabled={true}>Post Reccomendation</Button>\r\n        );\r\n    }\r\n}\r\n\r\nReccomendationPost.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nReccomendationPost.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default ReccomendationPost  \r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Reccomendation\\Reccomendation.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\Skill.js",["247","248","249","250"],"\r\n//import { Link } from \"react-router-dom\"\r\n\r\nimport { Spacer, Heading, Flex, Button, Box, HStack ,CircularProgress} from \"@chakra-ui/react\";\r\nimport { DeleteIcon,AddIcon} from '@chakra-ui/icons';\r\n// import {\r\n//     Modal, ModalOverlay, ModalContent, Image\r\n//     , ModalCloseButton, Text, ModalFooter,\r\n//      Textarea, Avatar, Stack\r\n// } from '@chakra-ui/react';\r\nimport {\r\n    AlertDialog,Badge,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n    IconButton \r\n} from \"@chakra-ui/react\";\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport axios from 'axios';\r\nimport { kPrimaryBlack, kPrimaryBlackLight,kPrimaryGray, kSecondaryBlue, kSecondaryBlueLight } from './../../../constants';\r\n\r\n\r\nclass Skill extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            isValidated:false,\r\n            key: props.key,\r\n            isOpen: false,\r\n            name: props.name,\r\n            image: props.image,\r\n            isLoading: false,\r\n            validation: props.validations,\r\n            skillname: props.skillname,\r\n            error: ''\r\n         };\r\n    }\r\n\r\n    onClose(){\r\n        this.setState({\r\n            ...this.state,\r\n            isOpen: false\r\n        }); \r\n    }\r\n    onOpen(){\r\n        this.setState({\r\n            ...this.state,\r\n            isOpen: true\r\n        }); \r\n    }\r\n\r\n    handleValidation= event=>{\r\n        console.log(this.state.validation + 1)\r\n        // this.setState({\r\n        //     ...this.state,\r\n        //     isLoading: true\r\n        // });\r\n\r\n        try{\r\n            var validations = this.state.validation;\r\n            //need to create correct api call\r\n            //const res=axios.put('api/users/skills/:id',{validations})\r\n            this.setState({\r\n                ...this.state,\r\n                validation: validations+1,\r\n                isLoading: false,\r\n                isValidated: true\r\n            });\r\n\r\n        }catch{\r\n            this.setState({\r\n                ...this.state,\r\n                validation: this.validation,\r\n                isLoading: false,\r\n                error: \"Couldn't validate skill\"\r\n            });\r\n        }\r\n    }\r\n\r\n    deleteSkill = () => {\r\n        if (this.state.skillname!=undefined) {\r\n            console.log(this.state.skillname);\r\n            this.onClose();\r\n            this.props.onClick(this.props.skillname);\r\n        }\r\n    }\r\n\r\n    cancelRef = React.createRef();\r\n\r\n    render() {\r\n        \r\n        if(this.props.visit==false){             \r\n            return (\r\n                <>\r\n                    <Flex>\r\n                        <Box w=\"390px\" p={4} bg={kPrimaryGray}>\r\n                            <HStack  spacing=\"3rem\">\r\n                                    \r\n                                <Badge ml=\"1\" fontSize=\"lg\" colorScheme=\"blue\" variant=\"outline\" borderRadius=\"5rem\">\r\n                                    {this.state.validation}\r\n                                </Badge>\r\n                                    \r\n                                <Heading size=\"md\" color={kSecondaryBlue}>{this.state.skillname}</Heading>\r\n                                \r\n                                <Spacer />\r\n                            \r\n                                <IconButton icon={<DeleteIcon />} colorScheme=\"red\" variant=\"ghost\" onClick={this.onOpen.bind(this)}/>\r\n                            \r\n                                <AlertDialog\r\n                                    isOpen={this.state.isOpen}\r\n                                    leastDestructiveRef={this.cancelRef}\r\n                                    onClose={this.onClose.bind(this)}\r\n                                >\r\n                                    <AlertDialogOverlay>\r\n                                    <AlertDialogContent>\r\n                                        <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n    \r\n                                            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                                Delete Skill\r\n                                            </AlertDialogHeader>\r\n    \r\n                                            <AlertDialogBody>\r\n                                                Are you sure? You can't undo this action afterwards.\r\n                                            </AlertDialogBody>\r\n    \r\n                                            <AlertDialogFooter>\r\n                                            \r\n                                            <Button colorScheme={kPrimaryBlack} ref={this.cancelRef} onClick={this.onClose.bind(this)}>\r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"red\" onClick={this.deleteSkill.bind(this)} ml={3}>\r\n                                                Delete\r\n                                            </Button>\r\n                                            </AlertDialogFooter>\r\n    \r\n                                        </Box>\r\n    \r\n                                    </AlertDialogContent>\r\n                                    </AlertDialogOverlay>\r\n                                </AlertDialog>\r\n                            </HStack>\r\n                        </Box>\r\n                    </Flex>\r\n                </>  \r\n            );\r\n        }else{\r\n            return (\r\n                <>\r\n                    <Flex>\r\n                        <Box w=\"390px\" p={4} bg={kPrimaryGray}>\r\n                            <HStack  spacing=\"3rem\">\r\n                                <Badge ml=\"1\" fontSize=\"0.8em\" colorScheme=\"blue\" variant=\"outline\" borderRadius=\"5rem\">\r\n                                    {this.state.validation}\r\n                                </Badge>\r\n                                \r\n                                <Heading size=\"md\" color={kSecondaryBlue}>{this.state.skillname}</Heading>\r\n                            \r\n                                <Spacer />\r\n                        \r\n                                {\r\n                                    this.state.isLoading ? (\r\n                                        <CircularProgress isIndeterminate color=\"green.300\"/>\r\n                        \r\n                                    ) :(\r\n                                        <>\r\n                                            <Button isDisabled={this.state.isValidated? true:false}  size=\"sm\" rightIcon={<AddIcon />} colorScheme=\"blue\" onClick={this.handleValidation.bind(this)}>\r\n                                            </Button>\r\n                                            \r\n                                        </>\r\n                                    )\r\n                                }\r\n                            </HStack>\r\n                        </Box>\r\n                    </Flex>\r\n                </>            \r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Skill;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skills\\Skill\\addSkill.js",["251","252","253","254","255","256","257"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\nimport { kPrimaryBlackLight,kSecondaryBlueLight } from '../../../utils/constants';\r\n\r\n\r\nconst AddSkill = props => {\r\n    return (\r\n        <>\r\n            <AddSkillButton onClickAddSkill={props.onClickAddSkill}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction AddSkillButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const onClickAddSkill = async (event, skill)=>{\r\n        var s = event.target.value();\r\n        setIsLoading(true);\r\n        try{\r\n            onClose();\r\n            props.onClickAddSkill(s);\r\n            setIsLoading(false);\r\n\r\n        }catch{\r\n            setIsLoading(false);\r\n            setError(\"Couldn't add skill\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <Button onClick={onOpen} bg={kSecondaryBlueLight}>Add Skill</Button>\r\n            </Box>\r\n            <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n                        <Stack>\r\n                            <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                Add new Skill\r\n                            </Heading>\r\n                            <br />\r\n                            <Stack direction=\"row\">\r\n                \r\n                                <Textarea placeholder=\"Enter reccomendation\" color=\"black.400\" />\r\n                                \r\n                                <ModalCloseButton />\r\n                            </Stack>\r\n                        </Stack>\r\n                        <ModalFooter>\r\n                            <Button colorScheme=\"blue\" mr={3} onClick={()=> onClickAddSkill()}>\r\n                                Add\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Box>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nAddSkill.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nAddSkill.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default AddSkill;  \r\n\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\constants.js",["258"],"export const  kPrimaryBlack = \"#263238\";\r\nexport const kPrimaryBlackDark = \"#000a12\";\r\nexport const kPrimaryBlackLight = \"#4f5b62\";\r\nexport const kPrimaryGray = \"#E2E8F0\";\r\n\r\n//SECONDARY\r\nexport const kSecondaryBlue = \"#01579b\";\r\nexport const kSecondaryBlueDark = \"#002f6c\";\r\nexport const kSecondaryBlueLight = \"#4f83cc\";\r\n\r\nexport default {kPrimaryBlack,kPrimaryBlackDark,kPrimaryBlackLight,kPrimaryGray,\r\nkSecondaryBlue,kSecondaryBlueDark,kSecondaryBlueLight}\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx",["259","260","261","262"],"import {\r\n    VStack,\r\n    Button,\r\n    Box,\r\n    Heading,\r\n    StackDivider,\r\n    FormControl,\r\n    Input\r\n} from '@chakra-ui/react';\r\nimport GridComponent from '../../components/GridComponent/GridComponent';\r\n\r\n//TODO: Complete form control\r\nconst ChangeName = () => {\r\n    return (\r\n        <GridComponent heading=\"Change Your Name\" isConfirm={true}>\r\n        <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"First Name\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setFName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Last Name\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n        </GridComponent>\r\n    );\r\n}\r\n\r\nexport default ChangeName;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx",["263"],"import {\r\n    VStack,\r\n    Button,\r\n    Heading,\r\n    Text,\r\n    StackDivider,\r\n    Spacer,\r\n    Alert,\r\n    AlertIcon\r\n} from '@chakra-ui/react';\r\n\r\nconst DeleteAccount = () => {\r\n    return (\r\n        <VStack py={5} w=\"100%\" h=\"100%\" justify=\"center\">\r\n            <Heading size=\"md\" color=\"purple.700\">\r\n                Delete Your Account\r\n        </Heading>\r\n            <StackDivider borderColor=\"purple.100\" borderWidth={1} />\r\n            <Spacer />\r\n            <VStack spacing={3}>\r\n                <Button colorScheme=\"red\" w=\"40%\">Delete Account</Button>\r\n                <Alert status=\"error\" w=\"80%\">\r\n                    <AlertIcon />\r\n                    Once you delete your account, you cannot restore it.\r\n                </Alert>\r\n            </VStack>\r\n            <Spacer />\r\n        </VStack>\r\n    );\r\n}\r\n\r\nexport default DeleteAccount;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx",["264","265","266","267"],"import {\r\n    VStack,\r\n    Button,\r\n    Box,\r\n    Heading,\r\n    StackDivider,\r\n    FormControl,\r\n    Input\r\n} from '@chakra-ui/react';\r\nimport GridComponent from '../../components/GridComponent/GridComponent';\r\n\r\n//TODO: Complete form control\r\nconst ChangePassword = () => {\r\n    return (\r\n        <GridComponent heading=\"Change Your Password\" isConfirm={true}>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Current Password\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setFName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"New Password\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Confirm New Password\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n        </GridComponent>\r\n    );\r\n}\r\n\r\nexport default ChangePassword;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\GridComponent\\GridComponent.jsx",["268"],"import {\r\n    VStack,\r\n    Heading,\r\n    StackDivider,\r\n    Spacer,\r\n    Button\r\n} from '@chakra-ui/react';\r\nimport { Children } from 'react';\r\n\r\nconst GridComponent = (props) => {\r\n    return (\r\n        <VStack py={5} w=\"100%\" h=\"100%\" justify=\"center\">\r\n            <Heading size=\"md\" color=\"purple.700\">\r\n                {props.heading}\r\n            </Heading>\r\n            <StackDivider borderColor=\"purple.100\" borderWidth={1} />\r\n            <Spacer />\r\n            <VStack spacing={3} w=\"100%\">\r\n                {props.children}\r\n            </VStack>\r\n            <Spacer />\r\n            {props.isConfirm && <Button colorScheme=\"green\" w=\"40%\"> Confirm </Button>}\r\n        </VStack>\r\n    );\r\n\r\n}\r\n\r\nexport default GridComponent;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Search.jsx",["269","270"],"import {\r\n    VStack,\r\n    Heading,\r\n    Image,\r\n    HStack,\r\n    SkeletonCircle,\r\n    Skeleton,\r\n    Alert,\r\n    AlertIcon\r\n} from \"@chakra-ui/react\"\r\n\r\nconst Search = () => {\r\n    let results = (\r\n        <VStack p={8} w=\"40%\" verticalAlign=\"center\" alignContent=\"center\" h={window.innerHeight / 1.4} borderWidth={3} borderRadius={8} VStackShadow=\"lg\" bg=\"white.200\" borderColor=\"purple.100\" spacing={6}>\r\n            <LoadingScreen />\r\n            {/* <NoResults /> */}\r\n        </VStack>);\r\n    return (\r\n        <HStack spacing={20} pt={window.innerHeight / 15} px={window.innerWidth / 45} justify=\"center\">\r\n            <Image\r\n                boxSize=\"20%\"\r\n                src=\"/signup-bg1.png\"\r\n            />\r\n            {results}\r\n            <Image\r\n                boxSize=\"20%\"\r\n                src=\"/signup-bg2.png\"\r\n            />\r\n        </HStack>\r\n    );\r\n}\r\n\r\nconst LoadingScreen = () => {\r\n    return ([\r\n        <HStack w=\"70%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"70%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"70%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"70%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"70%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>,\r\n        <HStack w=\"70%\">\r\n            <SkeletonCircle />\r\n            <Skeleton height=\"36px\" w=\"100%\" />\r\n        </HStack>\r\n    ]);\r\n}\r\n\r\nconst NoResults = () => {\r\n    return (\r\n        <Alert status=\"info\" colorScheme=\"purple\" borderRadius=\"1rem\" h = \"25%\">\r\n            <AlertIcon />\r\n             There are no users for the given name\r\n             </Alert>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Search;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\ConnectionRequest.jsx",["271"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\Connection.js",["272","273"],{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":3,"column":10,"nodeType":"280","messageId":"281","endLine":3,"endColumn":23},{"ruleId":"278","severity":1,"message":"282","line":3,"column":25,"nodeType":"280","messageId":"281","endLine":3,"endColumn":31},{"ruleId":"278","severity":1,"message":"283","line":3,"column":48,"nodeType":"280","messageId":"281","endLine":3,"endColumn":57},{"ruleId":"278","severity":1,"message":"284","line":9,"column":5,"nodeType":"280","messageId":"281","endLine":9,"endColumn":10},{"ruleId":"278","severity":1,"message":"285","line":10,"column":5,"nodeType":"280","messageId":"281","endLine":10,"endColumn":14},{"ruleId":"278","severity":1,"message":"286","line":19,"column":17,"nodeType":"280","messageId":"281","endLine":19,"endColumn":25},{"ruleId":"278","severity":1,"message":"287","line":21,"column":10,"nodeType":"280","messageId":"281","endLine":21,"endColumn":15},{"ruleId":"278","severity":1,"message":"288","line":22,"column":10,"nodeType":"280","messageId":"281","endLine":22,"endColumn":15},{"ruleId":"278","severity":1,"message":"289","line":28,"column":10,"nodeType":"280","messageId":"281","endLine":28,"endColumn":26},{"ruleId":"278","severity":1,"message":"290","line":28,"column":28,"nodeType":"280","messageId":"281","endLine":28,"endColumn":47},{"ruleId":"278","severity":1,"message":"291","line":29,"column":10,"nodeType":"280","messageId":"281","endLine":29,"endColumn":25},{"ruleId":"278","severity":1,"message":"292","line":29,"column":27,"nodeType":"280","messageId":"281","endLine":29,"endColumn":45},{"ruleId":"278","severity":1,"message":"293","line":4,"column":35,"nodeType":"280","messageId":"281","endLine":4,"endColumn":39},{"ruleId":"278","severity":1,"message":"294","line":4,"column":87,"nodeType":"280","messageId":"281","endLine":4,"endColumn":94},{"ruleId":"278","severity":1,"message":"295","line":2,"column":8,"nodeType":"280","messageId":"281","endLine":2,"endColumn":19},{"ruleId":"278","severity":1,"message":"296","line":3,"column":10,"nodeType":"280","messageId":"281","endLine":3,"endColumn":13},{"ruleId":"278","severity":1,"message":"297","line":3,"column":15,"nodeType":"280","messageId":"281","endLine":3,"endColumn":22},{"ruleId":"278","severity":1,"message":"298","line":3,"column":24,"nodeType":"280","messageId":"281","endLine":3,"endColumn":28},{"ruleId":"278","severity":1,"message":"299","line":3,"column":30,"nodeType":"280","messageId":"281","endLine":3,"endColumn":38},{"ruleId":"278","severity":1,"message":"300","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":15},{"ruleId":"278","severity":1,"message":"294","line":6,"column":50,"nodeType":"280","messageId":"281","endLine":6,"endColumn":57},{"ruleId":"278","severity":1,"message":"301","line":21,"column":10,"nodeType":"280","messageId":"281","endLine":21,"endColumn":25},{"ruleId":"278","severity":1,"message":"302","line":22,"column":10,"nodeType":"280","messageId":"281","endLine":22,"endColumn":21},{"ruleId":"278","severity":1,"message":"303","line":23,"column":10,"nodeType":"280","messageId":"281","endLine":23,"endColumn":25},{"ruleId":"278","severity":1,"message":"301","line":21,"column":10,"nodeType":"280","messageId":"281","endLine":21,"endColumn":25},{"ruleId":"278","severity":1,"message":"304","line":1,"column":15,"nodeType":"280","messageId":"281","endLine":1,"endColumn":21},{"ruleId":"278","severity":1,"message":"305","line":1,"column":67,"nodeType":"280","messageId":"281","endLine":1,"endColumn":77},{"ruleId":"306","severity":1,"message":"307","line":40,"column":32,"nodeType":"308","messageId":"309","endLine":40,"endColumn":34},{"ruleId":"306","severity":1,"message":"307","line":40,"column":61,"nodeType":"308","messageId":"309","endLine":40,"endColumn":63},{"ruleId":"306","severity":1,"message":"310","line":64,"column":31,"nodeType":"308","messageId":"309","endLine":64,"endColumn":33},{"ruleId":"306","severity":1,"message":"307","line":151,"column":20,"nodeType":"308","messageId":"309","endLine":151,"endColumn":22},{"ruleId":"306","severity":1,"message":"307","line":164,"column":27,"nodeType":"308","messageId":"309","endLine":164,"endColumn":29},{"ruleId":"306","severity":1,"message":"307","line":175,"column":27,"nodeType":"308","messageId":"309","endLine":175,"endColumn":29},{"ruleId":"306","severity":1,"message":"307","line":192,"column":20,"nodeType":"308","messageId":"309","endLine":192,"endColumn":22},{"ruleId":"306","severity":1,"message":"307","line":202,"column":27,"nodeType":"308","messageId":"309","endLine":202,"endColumn":29},{"ruleId":"306","severity":1,"message":"307","line":207,"column":27,"nodeType":"308","messageId":"309","endLine":207,"endColumn":29},{"ruleId":"278","severity":1,"message":"311","line":1,"column":23,"nodeType":"280","messageId":"281","endLine":1,"endColumn":33},{"ruleId":"278","severity":1,"message":"312","line":1,"column":35,"nodeType":"280","messageId":"281","endLine":1,"endColumn":48},{"ruleId":"278","severity":1,"message":"313","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":17},{"ruleId":"278","severity":1,"message":"314","line":4,"column":10,"nodeType":"280","messageId":"281","endLine":4,"endColumn":15},{"ruleId":"278","severity":1,"message":"315","line":5,"column":10,"nodeType":"280","messageId":"281","endLine":5,"endColumn":24},{"ruleId":"306","severity":1,"message":"307","line":42,"column":24,"nodeType":"308","messageId":"309","endLine":42,"endColumn":26},{"ruleId":"306","severity":1,"message":"307","line":47,"column":31,"nodeType":"308","messageId":"309","endLine":47,"endColumn":33},{"ruleId":"306","severity":1,"message":"307","line":52,"column":31,"nodeType":"308","messageId":"309","endLine":52,"endColumn":33},{"ruleId":"306","severity":1,"message":"307","line":55,"column":31,"nodeType":"308","messageId":"309","endLine":55,"endColumn":33},{"ruleId":"316","severity":1,"message":"317","line":50,"column":6,"nodeType":"318","messageId":"319","endLine":50,"endColumn":37},{"ruleId":"278","severity":1,"message":"320","line":21,"column":24,"nodeType":"280","messageId":"281","endLine":21,"endColumn":37},{"ruleId":"278","severity":1,"message":"321","line":24,"column":12,"nodeType":"280","messageId":"281","endLine":24,"endColumn":21},{"ruleId":"278","severity":1,"message":"322","line":25,"column":12,"nodeType":"280","messageId":"281","endLine":25,"endColumn":17},{"ruleId":"306","severity":1,"message":"307","line":40,"column":21,"nodeType":"308","messageId":"309","endLine":40,"endColumn":23},{"ruleId":"306","severity":1,"message":"307","line":40,"column":43,"nodeType":"308","messageId":"309","endLine":40,"endColumn":45},{"ruleId":"306","severity":1,"message":"307","line":40,"column":67,"nodeType":"308","messageId":"309","endLine":40,"endColumn":69},{"ruleId":"278","severity":1,"message":"323","line":23,"column":8,"nodeType":"280","messageId":"281","endLine":23,"endColumn":13},{"ruleId":"278","severity":1,"message":"324","line":24,"column":74,"nodeType":"280","messageId":"281","endLine":24,"endColumn":93},{"ruleId":"306","severity":1,"message":"310","line":85,"column":33,"nodeType":"308","messageId":"309","endLine":85,"endColumn":35},{"ruleId":"306","severity":1,"message":"307","line":96,"column":28,"nodeType":"308","messageId":"309","endLine":96,"endColumn":30},{"ruleId":"278","severity":1,"message":"314","line":5,"column":48,"nodeType":"280","messageId":"281","endLine":5,"endColumn":53},{"ruleId":"278","severity":1,"message":"325","line":6,"column":25,"nodeType":"280","messageId":"281","endLine":6,"endColumn":29},{"ruleId":"278","severity":1,"message":"326","line":7,"column":16,"nodeType":"280","messageId":"281","endLine":7,"endColumn":22},{"ruleId":"278","severity":1,"message":"327","line":22,"column":12,"nodeType":"280","messageId":"281","endLine":22,"endColumn":22},{"ruleId":"278","severity":1,"message":"320","line":22,"column":24,"nodeType":"280","messageId":"281","endLine":22,"endColumn":37},{"ruleId":"278","severity":1,"message":"321","line":24,"column":12,"nodeType":"280","messageId":"281","endLine":24,"endColumn":21},{"ruleId":"278","severity":1,"message":"322","line":25,"column":12,"nodeType":"280","messageId":"281","endLine":25,"endColumn":17},{"ruleId":"328","severity":1,"message":"329","line":11,"column":1,"nodeType":"330","endLine":12,"endColumn":55},{"ruleId":"278","severity":1,"message":"331","line":2,"column":5,"nodeType":"280","messageId":"281","endLine":2,"endColumn":11},{"ruleId":"278","severity":1,"message":"304","line":3,"column":5,"nodeType":"280","messageId":"281","endLine":3,"endColumn":11},{"ruleId":"278","severity":1,"message":"297","line":5,"column":5,"nodeType":"280","messageId":"281","endLine":5,"endColumn":12},{"ruleId":"278","severity":1,"message":"332","line":6,"column":5,"nodeType":"280","messageId":"281","endLine":6,"endColumn":17},{"ruleId":"278","severity":1,"message":"325","line":5,"column":5,"nodeType":"280","messageId":"281","endLine":5,"endColumn":9},{"ruleId":"278","severity":1,"message":"331","line":2,"column":5,"nodeType":"280","messageId":"281","endLine":2,"endColumn":11},{"ruleId":"278","severity":1,"message":"304","line":3,"column":5,"nodeType":"280","messageId":"281","endLine":3,"endColumn":11},{"ruleId":"278","severity":1,"message":"297","line":5,"column":5,"nodeType":"280","messageId":"281","endLine":5,"endColumn":12},{"ruleId":"278","severity":1,"message":"332","line":6,"column":5,"nodeType":"280","messageId":"281","endLine":6,"endColumn":17},{"ruleId":"278","severity":1,"message":"333","line":8,"column":10,"nodeType":"280","messageId":"281","endLine":8,"endColumn":18},{"ruleId":"278","severity":1,"message":"297","line":3,"column":5,"nodeType":"280","messageId":"281","endLine":3,"endColumn":12},{"ruleId":"278","severity":1,"message":"334","line":62,"column":7,"nodeType":"280","messageId":"281","endLine":62,"endColumn":16},{"ruleId":"335","severity":1,"message":"336","line":20,"column":75,"nodeType":"337","endLine":20,"endColumn":90},{"ruleId":"278","severity":1,"message":"338","line":10,"column":12,"nodeType":"280","messageId":"281","endLine":10,"endColumn":17},{"ruleId":"278","severity":1,"message":"339","line":10,"column":19,"nodeType":"280","messageId":"281","endLine":10,"endColumn":27},"no-native-reassign",["340"],"no-negated-in-lhs",["341"],"no-unused-vars","'kPrimaryBlack' is defined but never used.","Identifier","unusedVar","'Spacer' is defined but never used.","'Container' is defined but never used.","'Alert' is defined but never used.","'AlertIcon' is defined but never used.","'useState' is defined but never used.","'fname' is assigned a value but never used.","'lname' is assigned a value but never used.","'isChangePassword' is assigned a value but never used.","'setIsChangePassword' is assigned a value but never used.","'isDeleteAccount' is assigned a value but never used.","'setIsDeleteAccount' is assigned a value but never used.","'Flex' is defined but never used.","'Spinner' is defined but never used.","'ProfileInfo' is defined but never used.","'Box' is defined but never used.","'Heading' is defined but never used.","'Wrap' is defined but never used.","'WrapItem' is defined but never used.","'TempBox' is defined but never used.","'currentpassword' is assigned a value but never used.","'newpassword' is assigned a value but never used.","'confnewpassword' is assigned a value but never used.","'Button' is defined but never used.","'ScrollView' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'putRequest' is defined but never used.","'deleteRequest' is defined but never used.","'anonymous' is defined but never used.","'Image' is defined but never used.","'kSecondaryBlue' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'setIsLoggedIn' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'axios' is defined but never used.","'kSecondaryBlueLight' is defined but never used.","'Text' is defined but never used.","'Avatar' is defined but never used.","'isLoggedIn' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'VStack' is defined but never used.","'StackDivider' is defined but never used.","'Children' is defined but never used.","'NoResults' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'image' is assigned a value but never used.","'setImage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]