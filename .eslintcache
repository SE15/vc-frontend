[{"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js":"1","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js":"2","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js":"3","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js":"4","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx":"5","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx":"6","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx":"7","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js":"8","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx":"9","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx":"10","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx":"11","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx":"12","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx":"13","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx":"14","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx":"15","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx":"16","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js":"17","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx":"18","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\TempBox.jsx":"19","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js":"20","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js":"21","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js":"22","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js":"23","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js":"24","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx":"25","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js":"26","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js":"27","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\constants.js":"28","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js":"29","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx":"30","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx":"31","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx":"32","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx":"33","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx":"34","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js":"35","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Search.jsx":"36","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\ConnectionRequest.jsx":"37","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\CardHolder.jsx":"38","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\Connection.jsx":"39","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\GridComponent.jsx":"40","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\Skill.js":"41","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\addSkill.js":"42","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\SkillCard.jsx":"43","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation\\RecommendationPost.js":"44","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation\\Recommendation.jsx":"45","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\index.js":"46","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Skills.jsx":"47","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Alerts\\NoResults.jsx":"48","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Recommendations.jsx":"49","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Connections.jsx":"50","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\ProfileContent.jsx":"51","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\PopupWindow.jsx":"52"},{"size":829,"mtime":1613711181393,"results":"53","hashOfConfig":"54"},{"size":708,"mtime":1614883143542,"results":"55","hashOfConfig":"54"},{"size":2268,"mtime":1615207447192,"results":"56","hashOfConfig":"54"},{"size":4444,"mtime":1615202342837,"results":"57","hashOfConfig":"54"},{"size":737,"mtime":1614862351879,"results":"58","hashOfConfig":"54"},{"size":8514,"mtime":1615208769813,"results":"59","hashOfConfig":"54"},{"size":3449,"mtime":1615142114798,"results":"60","hashOfConfig":"54"},{"size":407,"mtime":1613711306439,"results":"61","hashOfConfig":"54"},{"size":536,"mtime":1611509267764,"results":"62","hashOfConfig":"54"},{"size":6394,"mtime":1611474902132,"results":"63","hashOfConfig":"54"},{"size":7301,"mtime":1615041288385,"results":"64","hashOfConfig":"54"},{"size":414,"mtime":1615036732107,"results":"65","hashOfConfig":"54"},{"size":380,"mtime":1615037286386,"results":"66","hashOfConfig":"54"},{"size":4892,"mtime":1615041915501,"results":"67","hashOfConfig":"54"},{"size":5941,"mtime":1611341203071,"results":"68","hashOfConfig":"54"},{"size":3729,"mtime":1611494090127,"results":"69","hashOfConfig":"54"},{"size":496,"mtime":1615204955953,"results":"70","hashOfConfig":"54"},{"size":351,"mtime":1611341670955,"results":"71","hashOfConfig":"54"},{"size":6912,"mtime":1614956256096,"results":"72","hashOfConfig":"54"},{"size":430,"mtime":1614177239846,"results":"73","hashOfConfig":"54"},{"size":236,"mtime":1614177269771,"results":"74","hashOfConfig":"54"},{"size":719,"mtime":1615205147996,"results":"75","hashOfConfig":"54"},{"size":696,"mtime":1615125829077,"results":"76","hashOfConfig":"54"},{"size":124,"mtime":1614334519892,"results":"77","hashOfConfig":"54"},{"size":913,"mtime":1615206768574,"results":"78","hashOfConfig":"54"},{"size":1436,"mtime":1615204111108,"results":"79","hashOfConfig":"54"},{"size":298,"mtime":1614264423237,"results":"80","hashOfConfig":"54"},{"size":463,"mtime":1613711181391,"results":"81","hashOfConfig":"54"},{"size":343,"mtime":1615202309723,"results":"82","hashOfConfig":"54"},{"size":1966,"mtime":1614884721447,"results":"83","hashOfConfig":"54"},{"size":3495,"mtime":1615201722314,"results":"84","hashOfConfig":"54"},{"size":3082,"mtime":1615162829968,"results":"85","hashOfConfig":"54"},{"size":4137,"mtime":1615142114701,"results":"86","hashOfConfig":"54"},{"size":4569,"mtime":1615207233062,"results":"87","hashOfConfig":"54"},{"size":158,"mtime":1615202358207,"results":"88","hashOfConfig":"54"},{"size":4387,"mtime":1615208816223,"results":"89","hashOfConfig":"54"},{"size":2239,"mtime":1615207859853,"results":"90","hashOfConfig":"54"},{"size":1652,"mtime":1615209528589,"results":"91","hashOfConfig":"54"},{"size":1763,"mtime":1615210696235,"results":"92","hashOfConfig":"54"},{"size":810,"mtime":1615188668210,"results":"93","hashOfConfig":"54"},{"size":7044,"mtime":1614955195111,"results":"94","hashOfConfig":"54"},{"size":2684,"mtime":1614956256096,"results":"95","hashOfConfig":"54"},{"size":3581,"mtime":1615217771735,"results":"96","hashOfConfig":"54"},{"size":3723,"mtime":1614956313434,"results":"97","hashOfConfig":"54"},{"size":1976,"mtime":1615211004093,"results":"98","hashOfConfig":"54"},{"size":66,"mtime":1615032761954,"results":"99","hashOfConfig":"54"},{"size":5909,"mtime":1615217824160,"results":"100","hashOfConfig":"54"},{"size":329,"mtime":1615031716912,"results":"101","hashOfConfig":"54"},{"size":6011,"mtime":1615211998399,"results":"102","hashOfConfig":"54"},{"size":1062,"mtime":1615207938023,"results":"103","hashOfConfig":"54"},{"size":8799,"mtime":1615218914997,"results":"104","hashOfConfig":"54"},{"size":1224,"mtime":1615194678331,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"1tgqvh",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"108"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"108"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"108"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"108"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"108"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"154"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"108"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\index.js",[],["227","228"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\App.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\reducers\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\auth.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Footer.jsx",["229"],"import React from \"react\";\r\nimport { Flex, Box, Heading, Stack } from \"@chakra-ui/react\";\r\nimport { kPrimaryBlack } from '../utils/constants';\r\n\r\nconst Footer = () => {\r\n  return (\r\n      [\r\n          <Box h={8} />,\r\n    <Flex\r\n      width=\"full\"\r\n      position=\"fixed\"\r\n      bottom=\"0\"\r\n      py={2}\r\n      bg=\"purple.700\"\r\n      borderTopRadius=\"1rem\"\r\n    >\r\n      <Box width=\"full\" boxShadow=\"xs\">\r\n        <Stack isInline justifyContent=\"center\" px={8}>\r\n          <FooterName />\r\n        </Stack>\r\n      </Box>\r\n    </Flex>\r\n      ]\r\n  );\r\n};\r\n\r\nconst FooterName = () => {\r\n  return (\r\n    <Heading\r\n      fontSize=\"15px\"\r\n      color = \"white\"\r\n    >\r\n      Designed by SE15\r\n    </Heading>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Header.jsx",["230","231","232","233","234"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Main.jsx",["235","236","237","238"],"import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, useLocation } from \"react-router-dom\";\r\nimport { useTransition, animated } from \"react-spring\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport Settings from './Settings';\r\nimport ProfileSettings from './Settings';\r\nimport Home from './Home';\r\nimport Profile from './Profile';\r\nimport Search from './Search';\r\nimport Login from './Login';\r\nimport SignUp from './SignUp';\r\nimport Logout from './Logout';\r\nimport Delete from '../popups/DeleteAccount'\r\nimport Change from '../popups/ChangePassword'\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport CardHolder from '../components/ContainerTemplates/CardHolder';\r\nimport SkilLCard from '../components/Skill/SkillCard';\r\nimport Recommendation from '../components/Recommendation/Recommendation';\r\nimport Connection from '../components/Connection/Connection';\r\n\r\nimport * as actions from '../store/actions';\r\n\r\nconst Main = (props) => {\r\n    return (\r\n        <BrowserRouter>\r\n            <div>\r\n                <Header />\r\n                <Content isAuthenticated={props.isAuthenticated} />\r\n                <Footer />\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nconst AuthenticatedRoutes = ({ isAuthenticated }) => {\r\n    if (isAuthenticated) return ([\r\n        <Route path=\"/\" exact>\r\n            <Home />\r\n        </Route>,\r\n        <Route path=\"/settings\" exact>\r\n            <Settings />\r\n        </Route>\r\n    ]);\r\n    return ([\r\n        <Route path=\"/\" exact>\r\n            <Login />\r\n        </Route>,\r\n        <Route path=\"/signup\" exact>\r\n            <SignUp />\r\n        </Route>\r\n    ]);\r\n}\r\n\r\nconst Content = ({ isAuthenticated }) => {\r\n    const location = useLocation();\r\n    const transitions = useTransition(location, (location) => location.pathname, {\r\n        from: { position: \"absolute\", opacity: 0 },\r\n        enter: { opacity: 1 },\r\n        leave: { opacity: 0 },\r\n    });\r\n\r\n    return transitions.map(({ item, props, key }) => (\r\n        <animated.div key={key} style={props}>\r\n            <Switch location={item}>\r\n                <Route path=\"/delete\" exact>\r\n                    <Delete />\r\n                </Route>\r\n                <Route path=\"/change\" exact>\r\n                    <Change />\r\n                </Route>\r\n                <Route path=\"/search\">\r\n                    <Search />\r\n                </Route>\r\n                <Route path=\"/psettings\" exact>\r\n                    <ProfileSettings />\r\n                </Route>\r\n                <Route path=\"/profiles\">\r\n                    <Profile />\r\n                </Route>\r\n                <AuthenticatedRoutes isAuthenticated={isAuthenticated} />\r\n                <Route path=\"/profiles\" exact>\r\n                    <Profile button=\"3\" />\r\n                </Route>\r\n                <Route path=\"/user/profile\" exact>\r\n                    <Profile />\r\n                </Route>\r\n                <Route path=\"/logout\" exact>\r\n                    <Logout />\r\n                </Route>\r\n            </Switch>\r\n        </animated.div>\r\n    ));\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: !(state.token === null || state.token === undefined),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogout: () => dispatch(actions.logout('/'))\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\utils\\constants.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Logout.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\ProfileSettings.jsx",["239","240","241","242","243","244"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  Image,\r\n  Stack\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport anonymous from '../assets/anonymous.png';\r\nimport { kPrimaryGray } from '../utils/constants';\r\n\r\nexport default function Profile() {\r\n  const [fname, setFName] = useState('');\r\n  const [lname, setLName] = useState('');\r\n \r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const [isChangePassword, setIsChangePassword] = useState(false);\r\n  const [isDeleteAccount, setIsDeleteAccount] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //save fname and lname\r\n      setIsLoggedIn(true);\r\n      setIsLoading(false);\r\n      \r\n    } catch (error) {\r\n      setError('Invalid');\r\n      setIsLoading(false);\r\n      \r\n    }\r\n  };\r\n\r\n  //image uploading\r\n  const uploadedImage = React.useRef(null);\r\n  const imageUploader = React.useRef(null);\r\n\r\n  const handleImageUpload = e => {\r\n    const [file] = e.target.files;\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      const { current } = uploadedImage;\r\n      current.file = file;\r\n      reader.onload = e => {\r\n        current.src = e.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\r\n      <Box\r\n        p={8}\r\n        w = \"30%\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n        bg = {kPrimaryGray}\r\n      >\r\n        {isLoggedIn ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Changed Profile!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsLoggedIn(false)}\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box >\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\" >\r\n              <Heading>Profile</Heading>\r\n            </Box>\r\n            <Box height=\"20px\"></Box>\r\n            <Box >\r\n              <center>\r\n              <Image                  \r\n                  borderRadius=\"full\"\r\n                  width=\"50%\"\r\n                  height=\"50%\"\r\n                  objectFit=\"cover\"\r\n                  src = {anonymous}\r\n                  alt=\"Profile Picture\"\r\n                  ref={uploadedImage}\r\n                />\r\n                </center>\r\n            </Box>\r\n            <Stack align=\"center\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n                ref={imageUploader}\r\n                style={{\r\n                  display: \"none\"\r\n                }}\r\n              />\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                variant=\"solid\"\r\n                type=\"submit\"\r\n                alignItems=\"center\"\r\n                mt={4}\r\n                onClick={() => imageUploader.current.click()}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    isIndeterminate\r\n                    size=\"sm\"\r\n                    color=\"teal\"\r\n                                      \r\n                  />\r\n                ) : (\r\n                  'Change Picture'\r\n                )}\r\n              </Button>\r\n            </Stack>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl>\r\n                    <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    size=\"lg\"\r\n                    onChange={event => setFName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"20px\"></Box>\r\n                <FormControl>\r\n                <Box borderColor = \"blue.500\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    colorScheme = \"black\"\r\n                    size=\"lg\"\r\n                    onChange={event => setLName(event.currentTarget.value)}\r\n                  />\r\n                  </Box>\r\n                </FormControl>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Save'\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  colorScheme=\"blue\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Change Password'\r\n                  )}\r\n                </Button>\r\n                <Box height=\"40px\"></Box>\r\n                <Button\r\n                  colorScheme=\"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete Account'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}",["245","246"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\SignUp.jsx",["247"],"import React, { Component } from 'react'\r\nimport {\r\n    Input, Stack, Button, InputGroup, Box,\r\n    HStack, Divider, FormControl, useToast, Heading, Text, InputRightElement, IconButton, Spinner, ReactRouterLink, Image\r\n} from '@chakra-ui/react';\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\n\r\nimport { createUser } from '../api';\r\nimport { connect } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst withToast = (Component) => {\r\n    return (props) => {\r\n        const toast = useToast();\r\n        const history = useHistory();\r\n        return <Component {...props} toast={toast} history={history} />;\r\n    }\r\n}\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        passwordConfirmed: false,\r\n        show: false,\r\n        loading: false\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({\r\n            ...this.state,\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let textField = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            [field]: textField\r\n        },\r\n            function () { if (field === \"confirmPassword\" || field === \"password\") this.checkPassword(textField) });\r\n\r\n    }\r\n\r\n    checkPassword(textField) {\r\n        if (this.state.confirmPassword === this.state.password) {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                ...this.state,\r\n                passwordConfirmed: false\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            ...this.state,\r\n            loading: true\r\n        })\r\n\r\n        const result = await createUser((({ firstName, lastName, email, password }) => ({ firstName, lastName, email, password }))(this.state));\r\n        if (result.data) {\r\n            this.props.toast({\r\n                position: \"bottom-left\",\r\n                title: `Account created successfully`,\r\n                description: `Sign in with your email and password`,\r\n                status: \"success\",\r\n                duration: 7000,\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n            this.props.history.push('/');\r\n        } else {\r\n            this.props.toast({\r\n                position: \"bottom-left\",\r\n                title: `Account creation failed`,\r\n                description: `${result.message}`,\r\n                status: \"error\",\r\n                duration: 7000,\r\n                isClosable: true,\r\n                htmlWidth: 200\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let form = (<Box p={8} maxWidth=\"85%\" borderWidth={3} borderRadius={8} boxShadow=\"lg\" bg=\"white.200\" borderColor=\"purple.100\">\r\n            <HStack textAlign=\"center\" color=\"blueGreen.100\" textStyle=\"h1\" wrap=\"wrap\">\r\n                <Heading fontSize=\"24px\"> Create Your Own </Heading> <Heading fontSize=\"24px\" color=\"purple.700\">Volunteer Profile! </Heading>\r\n            </HStack>\r\n            <Box my={4} textAlign=\"left\">\r\n                <form action='submit' onSubmit={this.submitHandler}>\r\n                    <Stack spacing={3}>\r\n                        <HStack>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='text' onChange={this.handleChange.bind(this, \"firstName\")} value={this.state.firstName} placeholder='First Name' bg=\"white.100\" color=\"black.600\" width=\"100%\" borderColor=\"blueGreen.100\" />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='text' onChange={this.handleChange.bind(this, \"lastName\")} value={this.state.lastName} placeholder='Last Name' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                        </HStack>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type='email' onChange={this.handleChange.bind(this, \"email\")} value={this.state.email} placeholder='Email' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                            </InputGroup>\r\n                        </FormControl>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type={this.state.show ? \"text\" : \"password\"} onChange={this.handleChange.bind(this, \"password\")} value={this.state.password} aria-label='password' placeholder='Password' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                <InputRightElement>\r\n                                    <IconButton aria-label=\"view password\" h=\"1.75rem\" colorScheme=\"gray\" icon={<ViewIcon />} size=\"sm\" onClick={this.handleClick.bind(this)} />\r\n                                </InputRightElement>\r\n                            </InputGroup>\r\n                        </FormControl>\r\n                        <FormControl isRequired>\r\n                            <InputGroup>\r\n                                <Input type='password' focusBorderColor={this.state.passwordConfirmed ? this.state.password === \"\" ? \"blue.400\" : \"green.400\" : \"red.400\"} value={this.state.confirmPassword} borderColor={this.state.passwordConfirmed ? this.state.password === \"\" ? \"blueGreen.400\" : \"green.400\" : \"red.400\"} onChange={this.handleChange.bind(this, \"confirmPassword\")} aria-label='Confirm password' placeholder='Confirm Password' bg=\"white.100\" color=\"black.600\" />\r\n                            </InputGroup>\r\n                        </FormControl>\r\n\r\n                        <Divider />\r\n\r\n                        <Button type='submit' colorScheme=\"purple\" isLoading={this.state.loading} isDisabled={!this.state.passwordConfirmed}>Sign Up!</Button>\r\n                    </Stack>\r\n                    <Link as={ReactRouterLink} to=\"/\">\r\n                        <Text textStyle=\"h2\" color=\"purple.700\" pt={4}>\r\n                            Already Registered? Sign In\r\n                    </Text>\r\n                    </Link>\r\n                </form>\r\n            </Box>\r\n        </Box>);\r\n\r\n        return (\r\n            <HStack spacing={20} pt={window.innerHeight / 15} px={window.innerWidth / 45} justify=\"center\">\r\n                <Image\r\n                    boxSize=\"20%\"\r\n                    src=\"/signup-bg1.png\"\r\n                />\r\n                {form}\r\n                <Image\r\n                    boxSize=\"20%\"\r\n                    src=\"/signup-bg2.png\"\r\n                />\r\n            </HStack>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withToast(SignUp));","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Home.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Profile.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Login.jsx",["248"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react'\r\n\r\nimport {\r\n    Input, Stack, Button, InputGroup, Box, ReactRouterLink\r\n    , Divider, FormControl, Flex, Heading, Text, Spinner, InputRightElement, IconButton, HStack, Image\r\n} from '@chakra-ui/react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../store/actions/auth';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        show: false,\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState({\r\n            ...this.state,\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.authRedirectPath !== '/login') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        await this.props.onAuth(this.state.email, this.state.password);\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let textField = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            [field]: textField\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let form =\r\n            <Box p={8} maxWidth=\"95%\" borderWidth={3} borderRadius={8} boxShadow=\"lg\" bg=\"white.200\" borderColor=\"purple.100\" right={0} align=\"right\">\r\n                <Box textAlign=\"center\" color=\"blueGreen.100\" textStyle=\"h1\">\r\n                    <Heading color=\"gray.700\"> Sign In </Heading>\r\n                </Box>\r\n                <Box my={4} textAlign=\"left\">\r\n                    <form action='submit' onSubmit={this.submitHandler}>\r\n                        <Stack spacing={3}>\r\n                            <Text aling=\"center\" color=\"red.500\">{this.props.error}</Text>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type='email' placeholder='Email' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" onChange={this.handleChange.bind(this, \"email\")} value={this.state.email} />\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <FormControl isRequired>\r\n                                <InputGroup>\r\n                                    <Input type={this.state.show ? \"text\" : \"password\"} onChange={this.handleChange.bind(this, \"password\")} value={this.state.password} aria-label='password' placeholder='Password' bg=\"white.100\" color=\"black.600\" borderColor=\"blueGreen.100\" />\r\n                                    <InputRightElement>\r\n                                        <IconButton aria-label=\"view password\" h=\"1.75rem\" colorScheme=\"gray\" icon={<ViewIcon />} size=\"sm\" onClick={this.handleClick.bind(this)} />\r\n                                    </InputRightElement>\r\n                                </InputGroup>\r\n                            </FormControl>\r\n                            <Divider />\r\n                            <Button type='submit' colorScheme=\"purple\" isLoading={this.props.loading}>Sign In</Button>\r\n                        </Stack>\r\n                        <Link as={ReactRouterLink} to=\"/signup\" >\r\n                            <Text textStyle=\"h2\" color=\"purple.500\" pt={4}>\r\n                                Create New Account\r\n                        </Text>\r\n                        </Link>\r\n                    </form>\r\n                </Box>\r\n            </Box>;\r\n\r\n        console.log(this.props.isAuthenticated);\r\n        console.log(this.props.authRedirectPath);\r\n        if (this.props.isAuthenticated) {\r\n            console.log(\"object\");\r\n            return (<Redirect to={this.props.authRedirectPath} />);\r\n        }\r\n\r\n        return (\r\n            <HStack spacing={10} pt={window.innerHeight / 10} px={window.innerWidth / 50}>\r\n                <Image\r\n                    boxSize=\"70%\"\r\n                    src=\"/login-bg.png\"\r\n                />\r\n                <Box h={window.innerHeight * 0.1} />,\r\n                <Flex width=\"Full\" align=\"center\" justifyContent=\"center\">\r\n                    {form}\r\n                </Flex>\r\n            </HStack>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error,\r\n        isAuthenticated: !(state.token === null || state.token === undefined),\r\n        token: state.token,\r\n        authRedirectPath: state.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\ChangePassword.jsx",["249","250","251"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function ChangePassword() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [newpassword, setNewPassword] = useState('');\r\n  const [confnewpassword, setConfNewPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //if(newpassword===confnewpassword) && await(){\r\n      \r\n      //await() -confirm the current password from back end\r\n\r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setNewPassword('');\r\n      setConfNewPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Change Password</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Confirm New Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setConfNewPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  variantColor=\"teal\"\r\n                  variant=\"outline\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Confirm'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\popups\\DeleteAccount.jsx",["252"],"import React, { useState } from 'react';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Button,\r\n  CircularProgress,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Icon\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nexport default function DeleteAccount() {\r\n  const [currentpassword, setCurrentPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      //await() -confirm the current password from back end\r\n      \r\n      setIsVerified(true);\r\n      setIsLoading(false);\r\n      setShowPassword(false);\r\n      \r\n      \r\n\r\n      \r\n    } catch (error) {\r\n      setError('Invalid password');\r\n      setIsLoading(false);\r\n      setCurrentPassword('');\r\n      setShowPassword(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\r\n\r\n  return (\r\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\r\n      <Box\r\n        p={8}\r\n        maxWidth=\"500px\"\r\n        borderWidth={1}\r\n        borderRadius={8}\r\n        boxShadow=\"lg\"\r\n      >\r\n        {isVerified ? (\r\n          <Box textAlign=\"center\">\r\n            <Text>Password Changed!</Text>\r\n            <Button\r\n              variantColor=\"orange\"\r\n              variant=\"outline\"\r\n              width=\"full\"\r\n              mt={4}\r\n              onClick={() => setIsVerified(false)} //go back to the home profile\r\n            >\r\n              Back Profile\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Box textAlign=\"center\">\r\n              <Heading>Delete Account</Heading>\r\n            </Box>\r\n            <Box my={4} textAlign=\"left\">\r\n              <form onSubmit={handleSubmit}>\r\n                {error && <ErrorMessage message={error} />}\r\n                <FormControl isRequired mt={6}>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <InputGroup>\r\n                    <Input\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      placeholder=\"*******\"\r\n                      size=\"lg\"\r\n                      onChange={event => setCurrentPassword(event.currentTarget.value)}\r\n                    />\r\n                    <InputRightElement width=\"3rem\">\r\n                      <Button\r\n                        h=\"1.5rem\"\r\n                        size=\"sm\"\r\n                        onClick={handlePasswordVisibility}\r\n                      >\r\n                        {showPassword ? (\r\n                          <Icon name=\"view-off\" />\r\n                        ) : (\r\n                          <Icon name=\"view\" />\r\n                        )}\r\n                      </Button>\r\n                    </InputRightElement>\r\n                  </InputGroup>\r\n                </FormControl>\r\n                \r\n                \r\n                <Button\r\n                  colorScheme = \"red\"\r\n                  variant=\"solid\"\r\n                  type=\"submit\"\r\n                  width=\"full\"\r\n                  mt={4}\r\n                >\r\n                  {isLoading ? (\r\n                    <CircularProgress\r\n                      isIndeterminate\r\n                      size=\"24px\"\r\n                      color=\"teal\"\r\n                    />\r\n                  ) : (\r\n                    'Delete'\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ErrorMessage.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\TempBox.jsx",["253","254","255","256","257","258","259","260","261","262","263"],"import { Box, Button, Heading, WrapItem, Center,Spinner, VStack , ScrollView, Flex} from \"@chakra-ui/react\"\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport Skill from './Skill/Skill';\r\nimport Connections from './Connection/Connection';\r\nimport Recommendation from './Recommendation/Recommendation';\r\nimport RecommendationPost from './Recommendation/RecommendationPost';\r\nimport AddSkill from './Skill/addSkill'\r\n\r\n\r\nclass TempBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          details: this.props.data,\r\n          isLoading: false\r\n        };\r\n        console.log(\"constructor\" + JSON.stringify(this.state.isLoading));\r\n    }\r\n\r\n    componentDidMount(){\r\n        //this.callEvents();\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps,prevState){\r\n        // if (this.state.details.length!=prevState.details.length) {\r\n        //     this.setState({\r\n        //         ...this.state,\r\n        //         isLoading: false\r\n        //     });\r\n        //     console.log(\"CDM\" + this.props.isLoading)\r\n        // }\r\n\r\n        if(this.state.isLoading==true && prevState.isLoading==true){\r\n            this.setState({\r\n                ...this.state,\r\n                isLoading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    eventHandler = (ev) => {\r\n        // this.callEvents();\r\n        this.setState({\r\n            ...this.state,\r\n        }); \r\n    }\r\n\r\n    callEvents = (e) => {\r\n        axios.get(\"http://localhost:5000/api/users\",{},{\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'x-auth-token': 'avishka'\r\n             }\r\n        })\r\n        .then((result) => {\r\n            console.log(result.data);\r\n            if(result.data.err!=1){\r\n                this.setState({\r\n                    users: result\r\n                });\r\n                //console.log(this.state.users);\r\n            }else{\r\n\r\n            }\r\n        },\r\n        (error) =>{\r\n            console.log(\"Error\");\r\n        });\r\n    }\r\n\r\n    async removeElement(skillname) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: true\r\n        });\r\n        let filteredArray = this.state.details.filter(skill => skill.name !== skillname);\r\n        this.setState({\r\n                ...this.state,\r\n                isLoading: true\r\n            },\r\n            function() {\r\n                this.setState({\r\n                    ...this.state,\r\n                    details:filteredArray,\r\n                },)\r\n            }\r\n        );\r\n    }\r\n\r\n    async addSkill(skill){\r\n        console.log(\"addskill\");\r\n        console.log(skill);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <div>\r\n                    <Center>\r\n                        <Spinner\r\n                            thickness=\"5px\"\r\n                            speed=\"0.65s\"\r\n                            emptyColor=\"black\"\r\n                            color=\"white\"\r\n                            size=\"xl\"\r\n                        />\r\n                    </Center>\r\n                </div>\r\n            );\r\n        }else{\r\n            console.log(\"render\" + this.state.details)\r\n            return (\r\n                <WrapItem>\r\n                    <Flex>\r\n                        <Box bg=\"gray.500\" w=\"450px\" h=\"450px\" color=\"white\">\r\n                            <Center m = {4}>\r\n                                <Heading size=\"md\" color=\"gray.600\">{this.props.name}</Heading>\r\n                            </Center>\r\n                            \r\n                            <VStack overflowY=\"scroll\" h=\"320px\" w=\"436px\" ml=\"2\" mb=\"5\">\r\n                                \r\n                                <BoxContent type = {this.props.name} detailss={this.state.details} visit={this.props.visit} onClickRemove={this.removeElement.bind(this)}  />\r\n                            \r\n                            </VStack>\r\n    \r\n                            <Center>\r\n                                <Box h={3}/>\r\n                                    <EventButton new = {this.eventHandler.bind(this)} type = {this.props.name} visit={this.props.visit} onClickAddSkill={this.addSkill.bind(this)}/>\r\n                                <Box h={3}/>\r\n                            </Center>\r\n                            \r\n                        </Box>\r\n                    </Flex>\r\n              </WrapItem>\r\n            );\r\n        }\r\n        \r\n    }  \r\n}\r\n\r\n\r\nconst BoxContent = (props) => {\r\n\r\n    if (props.type == \"Skills\") {\r\n        return (\r\n            <>\r\n                 {\r\n                    props.detailss.map((skill, i) =>\r\n                        <Skill key={i} skillname={skill.name} validations={skill.validations} visit={props.visit} onClick={props.onClickRemove} />\r\n\r\n                    )\r\n                    \r\n                }\r\n                \r\n            </>\r\n            );\r\n    } else if (props.type == \"Connections\") {\r\n        return (\r\n            <>\r\n                {\r\n                    props.detailss.map((connection, i) =>\r\n                        <Connections key={i} cname={connection.first_name+\" \"+connection.last_name} cimage={null}/>\r\n                    )\r\n                        \r\n                }\r\n            </>\r\n            );\r\n    } else if (props.type == \"Recommendations\") {\r\n        return (\r\n            <>\r\n                {\r\n                    props.detailss.map((recommendation, i) =>\r\n                        <Recommendation key={i} postedBy={recommendation.first_name+\" \"+recommendation.last_name} postedImage=\"null\" Recommendation={recommendation.description}/>\r\n                    )\r\n                        \r\n                }\r\n            </>\r\n            );  \r\n    } else {\r\n        throw new Error(\"Invalid type for ConnectionButton\");\r\n    }\r\n}\r\n\r\nconst EventButton = (props) => {\r\n    if (props.type == \"Skills\") {\r\n        if (props.visit) {\r\n            return (\r\n                <div>\r\n    \r\n                </div>);\r\n        }else{\r\n            return (\r\n                <AddSkill onClick={props.new} onClickAddSkill={props.onClickAddSkill}/>);\r\n        }\r\n    } else if (props.type == \"Connections\") {\r\n        return (\r\n            <div>\r\n\r\n            </div>);\r\n    } else if (props.type == \"Recommendations\") {\r\n        if (props.visit) {\r\n            return (\r\n                <RecommendationPost onClick={props.new} name=\"Thushani Jayasekera\" image=\"null\"/>);\r\n                // <Button  colorScheme=\"blue\" variant=\"solid\">\r\n                // Add Recommendation\r\n                // </Button>);  \r\n        }else{\r\n            return (\r\n                <div>\r\n    \r\n                </div>);\r\n        }\r\n    } else {\r\n        throw new Error(\"Invalid type for ConnectionButton\");\r\n    }\r\n}\r\n\r\nexport default TempBox;",["264","265"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\skill-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\recommendation-api.js",["266","267"],"import { postRequest, putRequest, deleteRequest } from \"./utils\";\r\n\r\nconst BASE_URL = \"users\";\r\nconst URL = \"recommendations\";\r\n\r\nexport const submitRecommendation = (userId, data) => postRequest(`${BASE_URL}/${userId}/${URL}`, data);\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\user-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\connection-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\auth-api.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ProfileInfo.jsx",["268","269","270"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\utils.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\api\\axios.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\constants.js",["271"],"export const  kPrimaryBlack = \"#263238\";\r\nexport const kPrimaryBlackDark = \"#000a12\";\r\nexport const kPrimaryBlackLight = \"#4f5b62\";\r\nexport const kPrimaryGray = \"#E2E8F0\";\r\n\r\n//SECONDARY\r\nexport const kSecondaryBlue = \"#01579b\";\r\nexport const kSecondaryBlueDark = \"#002f6c\";\r\nexport const kSecondaryBlueLight = \"#4f83cc\";\r\n\r\nexport default {kPrimaryBlack,kPrimaryBlackDark,kPrimaryBlackLight,kPrimaryGray,\r\nkSecondaryBlue,kSecondaryBlueDark,kSecondaryBlueLight}\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\action-types.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Settings.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeName.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\DeleteAccount.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangePassword.jsx",["272","273","274","275"],"import {\r\n    VStack,\r\n    Button,\r\n    Box,\r\n    Heading,\r\n    StackDivider,\r\n    FormControl,\r\n    Input\r\n} from '@chakra-ui/react';\r\nimport GridComponent from '../../components/ContainerTemplates/GridComponent';\r\n\r\n//TODO: Complete form control\r\nconst ChangePassword = () => {\r\n    return (\r\n        <GridComponent heading=\"Change Your Password\" isConfirm={true}>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Current Password\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setFName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"New Password\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n            <FormControl align=\"center\">\r\n                <Box borderColor=\"blue.500\" w=\"50%\">\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"Confirm New Password\"\r\n                        colorScheme=\"black\"\r\n                        size=\"lg\"\r\n                    // onChange={event => setLName(event.currentTarget.value)}\r\n                    />\r\n                </Box>\r\n            </FormControl>\r\n        </GridComponent>\r\n    );\r\n}\r\n\r\nexport default ChangePassword;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Settings\\ChangeProfilePicture.jsx",["276"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\store\\actions\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\pages\\Search.jsx",["277","278"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\ConnectionRequest.jsx",["279"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\CardHolder.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Connection\\Connection.jsx",["280","281"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\GridComponent.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\Skill.js",["282","283","284","285"],"\r\n//import { Link } from \"react-router-dom\"\r\n\r\nimport { Spacer, Heading, Flex, Button, Box, HStack ,CircularProgress} from \"@chakra-ui/react\";\r\nimport { DeleteIcon,AddIcon} from '@chakra-ui/icons';\r\n// import {\r\n//     Modal, ModalOverlay, ModalContent, Image\r\n//     , ModalCloseButton, Text, ModalFooter,\r\n//      Textarea, Avatar, Stack\r\n// } from '@chakra-ui/react';\r\nimport {\r\n    AlertDialog,Badge,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n    IconButton \r\n} from \"@chakra-ui/react\";\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport axios from 'axios';\r\nimport { kPrimaryBlack, kPrimaryBlackLight,kPrimaryGray, kSecondaryBlue, kSecondaryBlueLight } from '../../utils/constants'\r\n\r\n\r\nclass Skill extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            isValidated:false,\r\n            key: props.key,\r\n            isOpen: false,\r\n            name: props.name,\r\n            image: props.image,\r\n            isLoading: false,\r\n            validation: props.validations,\r\n            skillname: props.skillname,\r\n            error: ''\r\n         };\r\n    }\r\n\r\n    onClose(){\r\n        this.setState({\r\n            ...this.state,\r\n            isOpen: false\r\n        }); \r\n    }\r\n    onOpen(){\r\n        this.setState({\r\n            ...this.state,\r\n            isOpen: true\r\n        }); \r\n    }\r\n\r\n    handleValidation= event=>{\r\n        console.log(this.state.validation + 1)\r\n        // this.setState({\r\n        //     ...this.state,\r\n        //     isLoading: true\r\n        // });\r\n\r\n        try{\r\n            var validations = this.state.validation;\r\n            //need to create correct api call\r\n            //const res=axios.put('api/users/skills/:id',{validations})\r\n            this.setState({\r\n                ...this.state,\r\n                validation: validations+1,\r\n                isLoading: false,\r\n                isValidated: true\r\n            });\r\n\r\n        }catch{\r\n            this.setState({\r\n                ...this.state,\r\n                validation: this.validation,\r\n                isLoading: false,\r\n                error: \"Couldn't validate skill\"\r\n            });\r\n        }\r\n    }\r\n\r\n    deleteSkill = () => {\r\n        if (this.state.skillname!=undefined) {\r\n            console.log(this.state.skillname);\r\n            this.onClose();\r\n            this.props.onClick(this.props.skillname);\r\n        }\r\n    }\r\n\r\n    cancelRef = React.createRef();\r\n\r\n    render() {\r\n        \r\n        if(this.props.visit==false){             \r\n            return (\r\n                <>\r\n                    <Flex>\r\n                        <Box w={300} h={16} p={4} bg=\"purple.100\">\r\n                            <HStack  spacing=\"3rem\">\r\n                                    \r\n                                <Badge ml=\"1\" fontSize=\"lg\" colorScheme=\"blue\" variant=\"outline\" borderRadius=\"5rem\">\r\n                                    {this.state.validation}\r\n                                </Badge>\r\n                                    \r\n                                <Heading size=\"md\" color={kSecondaryBlue}>{this.state.skillname}</Heading>\r\n                                \r\n                                <Spacer />\r\n                            \r\n                                <IconButton icon={<DeleteIcon />} colorScheme=\"red\" variant=\"ghost\" onClick={this.onOpen.bind(this)}/>\r\n                            \r\n                                <AlertDialog\r\n                                    isOpen={this.state.isOpen}\r\n                                    leastDestructiveRef={this.cancelRef}\r\n                                    onClose={this.onClose.bind(this)}\r\n                                >\r\n                                    <AlertDialogOverlay>\r\n                                    <AlertDialogContent>\r\n                                        <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n    \r\n                                            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                                Delete Skill\r\n                                            </AlertDialogHeader>\r\n    \r\n                                            <AlertDialogBody>\r\n                                                Are you sure? You can't undo this action afterwards.\r\n                                            </AlertDialogBody>\r\n    \r\n                                            <AlertDialogFooter>\r\n                                            \r\n                                            <Button colorScheme={kPrimaryBlack} ref={this.cancelRef} onClick={this.onClose.bind(this)}>\r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"red\" onClick={this.deleteSkill.bind(this)} ml={3}>\r\n                                                Delete\r\n                                            </Button>\r\n                                            </AlertDialogFooter>\r\n    \r\n                                        </Box>\r\n    \r\n                                    </AlertDialogContent>\r\n                                    </AlertDialogOverlay>\r\n                                </AlertDialog>\r\n                            </HStack>\r\n                        </Box>\r\n                    </Flex>\r\n                </>  \r\n            );\r\n        }else{\r\n            return (\r\n                <>\r\n                    <Flex>\r\n                        <Box w=\"390px\" p={4} bg={kPrimaryGray}>\r\n                            <HStack  spacing=\"3rem\">\r\n                                <Badge ml=\"1\" fontSize=\"0.8em\" colorScheme=\"blue\" variant=\"outline\" borderRadius=\"5rem\">\r\n                                    {this.state.validation}\r\n                                </Badge>\r\n                                \r\n                                <Heading size=\"md\" color={kSecondaryBlue}>{this.state.skillname}</Heading>\r\n                            \r\n                                <Spacer />\r\n                        \r\n                                {\r\n                                    this.state.isLoading ? (\r\n                                        <CircularProgress isIndeterminate color=\"green.300\"/>\r\n                        \r\n                                    ) :(\r\n                                        <>\r\n                                            <Button isDisabled={this.state.isValidated? true:false}  size=\"sm\" rightIcon={<AddIcon />} colorScheme=\"blue\" onClick={this.handleValidation.bind(this)}>\r\n                                            </Button>\r\n                                            \r\n                                        </>\r\n                                    )\r\n                                }\r\n                            </HStack>\r\n                        </Box>\r\n                    </Flex>\r\n                </>            \r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Skill;","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\addSkill.js",["286","287","288","289","290","291","292","293","294","295"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\nimport { kPrimaryBlack, kPrimaryBlackLight,kPrimaryGray, kSecondaryBlue, kSecondaryBlueLight } from '../../utils/constants'\r\n\r\n\r\nconst AddSkill = props => {\r\n    return (\r\n        <>\r\n            <AddSkillButton onClickAddSkill={props.onClickAddSkill}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction AddSkillButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const onClickAddSkill = async (event, skill)=>{\r\n        var s = event.target.value();\r\n        setIsLoading(true);\r\n        try{\r\n            onClose();\r\n            props.onClickAddSkill(s);\r\n            setIsLoading(false);\r\n\r\n        }catch{\r\n            setIsLoading(false);\r\n            setError(\"Couldn't add skill\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <Button onClick={onOpen} bg={kSecondaryBlueLight}>Add Skill</Button>\r\n            </Box>\r\n            <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n                        <Stack>\r\n                            <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                Add new Skill\r\n                            </Heading>\r\n                            <br />\r\n                            <Stack direction=\"row\">\r\n                \r\n                                <Textarea placeholder=\"Enter Recommendation\" color=\"black.400\" />\r\n                                \r\n                                <ModalCloseButton />\r\n                            </Stack>\r\n                        </Stack>\r\n                        <ModalFooter>\r\n                            <Button colorScheme=\"blue\" mr={3} onClick={()=> onClickAddSkill()}>\r\n                                Add\r\n                            </Button>\r\n                        </ModalFooter>\r\n                    </Box>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nAddSkill.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nAddSkill.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default AddSkill;  \r\n\r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Skill\\SkillCard.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation\\RecommendationPost.js",["296","297","298","299","300","301"],"import { React, useState } from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, Image\r\n    , ModalCloseButton, Text, useDisclosure, ModalFooter,\r\n     Textarea, Avatar, Stack, Heading, Box\r\n} from '@chakra-ui/react';\r\nimport { kPrimaryBlackLight,kSecondaryBlueLight } from '../../constants';\r\n\r\nconst RecommendationPost = props => {\r\n    return (\r\n        <>\r\n            <RecommendationButton visit={props.visit} name={props.name} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction RecommendationButton(props) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n    const[isreccomended,setIsReccomended]=useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const handleRecommendation= async event=>{\r\n        setIsLoading(true);\r\n        try{\r\n            //wait for update validation in db\r\n            setIsReccomended(true);\r\n            setIsLoading(false);\r\n\r\n        }catch{\r\n            setIsReccomended(false);\r\n            setIsLoading(false);\r\n            setError(\"Couldn't Post Recommendation\")\r\n        }\r\n    }\r\n    if (props.visit == true && isLoggedIn == true && isreccomended==false) {\r\n\r\n        return (\r\n            <>\r\n                <Box>\r\n                    <Button onClick={onOpen} bg={kSecondaryBlueLight} isDisabled={false}>Post Recommendation</Button>\r\n                </Box>\r\n                <Modal isOpen={isOpen} onClose={onClose} color=\"black.700\" closeOnOverlayClick=\"false\">\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <Box bg={kPrimaryBlackLight} w=\"100%\" p={4} color=\"white\">\r\n                            <Stack>\r\n                                <Heading color=\"black.400\" fontSize=\"lg\">\r\n                                    Post Recommendation\r\n                                </Heading>\r\n                                <br />\r\n                                <Stack direction=\"row\">\r\n                                    {props.cimage!=null?(\r\n                                        <Image src={props.image}  borderRadius=\"full\" boxSize=\"3rem\" />\r\n                                    ) :(\r\n                                        <Avatar name={props.name} src=\"https://bit.ly/broken-link\" />\r\n                                    )\r\n                                    }\r\n                                    <Text color={kSecondaryBlueLight}>\r\n                                        {props.name}\r\n                                    </Text>\r\n                   \r\n                                    <Textarea placeholder=\"Enter Recommendation\" color=\"black.400\" />\r\n                                    \r\n                                    <ModalCloseButton />\r\n                                </Stack>\r\n                            </Stack>\r\n                            <ModalFooter>\r\n                                <Button colorScheme=\"blue\" mr={3} onClick={()=>handleRecommendation()}>\r\n                                    Post\r\n                                </Button>\r\n                            </ModalFooter>\r\n                        </Box>\r\n                    </ModalContent>\r\n                </Modal>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <Button onClick={onOpen} bg={kSecondaryBlueLight}isDisabled={true}>Post Recommendation</Button>\r\n        );\r\n    }\r\n}\r\n\r\nRecommendationPost.propTypes = {\r\n    name: PropTypes.string,\r\n    image: PropTypes.string,\r\n    visit: PropTypes.bool\r\n}\r\nRecommendationPost.defaultProps = {\r\n    image: \"null\",\r\n    visit: true\r\n}\r\nexport default RecommendationPost  \r\n","D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Recommendation\\Recommendation.jsx",["302"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\index.js",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Skills.jsx",["303","304"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\Alerts\\NoResults.jsx",[],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Recommendations.jsx",["305","306","307","308"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\Connections.jsx",["309"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\containers\\Profile\\ProfileContent.jsx",["310","311","312","313","314"],"D:\\Web Applications\\Volunteer Circle\\vc-frontend\\src\\components\\ContainerTemplates\\PopupWindow.jsx",[],{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","severity":1,"message":"320","line":3,"column":10,"nodeType":"321","messageId":"322","endLine":3,"endColumn":23},{"ruleId":"323","severity":1,"message":"324","line":62,"column":77,"nodeType":"325","messageId":"326","endLine":62,"endColumn":81,"fix":"327"},{"ruleId":"323","severity":1,"message":"324","line":64,"column":174,"nodeType":"325","messageId":"326","endLine":64,"endColumn":178,"fix":"328"},{"ruleId":"329","severity":1,"message":"330","line":99,"column":32,"nodeType":"331","endLine":103,"endColumn":6},{"ruleId":"329","severity":1,"message":"332","line":109,"column":8,"nodeType":"333","endLine":109,"endColumn":10,"suggestions":"334"},{"ruleId":"329","severity":1,"message":"335","line":111,"column":34,"nodeType":"333","endLine":111,"endColumn":51,"suggestions":"336"},{"ruleId":"319","severity":1,"message":"337","line":18,"column":8,"nodeType":"321","messageId":"322","endLine":18,"endColumn":18},{"ruleId":"319","severity":1,"message":"338","line":19,"column":8,"nodeType":"321","messageId":"322","endLine":19,"endColumn":17},{"ruleId":"319","severity":1,"message":"339","line":20,"column":8,"nodeType":"321","messageId":"322","endLine":20,"endColumn":22},{"ruleId":"319","severity":1,"message":"340","line":21,"column":8,"nodeType":"321","messageId":"322","endLine":21,"endColumn":18},{"ruleId":"319","severity":1,"message":"341","line":21,"column":10,"nodeType":"321","messageId":"322","endLine":21,"endColumn":15},{"ruleId":"319","severity":1,"message":"342","line":22,"column":10,"nodeType":"321","messageId":"322","endLine":22,"endColumn":15},{"ruleId":"319","severity":1,"message":"343","line":28,"column":10,"nodeType":"321","messageId":"322","endLine":28,"endColumn":26},{"ruleId":"319","severity":1,"message":"344","line":28,"column":28,"nodeType":"321","messageId":"322","endLine":28,"endColumn":47},{"ruleId":"319","severity":1,"message":"345","line":29,"column":10,"nodeType":"321","messageId":"322","endLine":29,"endColumn":25},{"ruleId":"319","severity":1,"message":"346","line":29,"column":27,"nodeType":"321","messageId":"322","endLine":29,"endColumn":45},{"ruleId":"315","replacedBy":"347"},{"ruleId":"317","replacedBy":"348"},{"ruleId":"319","severity":1,"message":"349","line":4,"column":91,"nodeType":"321","messageId":"322","endLine":4,"endColumn":98},{"ruleId":"319","severity":1,"message":"349","line":6,"column":50,"nodeType":"321","messageId":"322","endLine":6,"endColumn":57},{"ruleId":"319","severity":1,"message":"350","line":21,"column":10,"nodeType":"321","messageId":"322","endLine":21,"endColumn":25},{"ruleId":"319","severity":1,"message":"351","line":22,"column":10,"nodeType":"321","messageId":"322","endLine":22,"endColumn":21},{"ruleId":"319","severity":1,"message":"352","line":23,"column":10,"nodeType":"321","messageId":"322","endLine":23,"endColumn":25},{"ruleId":"319","severity":1,"message":"350","line":21,"column":10,"nodeType":"321","messageId":"322","endLine":21,"endColumn":25},{"ruleId":"319","severity":1,"message":"353","line":1,"column":15,"nodeType":"321","messageId":"322","endLine":1,"endColumn":21},{"ruleId":"319","severity":1,"message":"354","line":1,"column":67,"nodeType":"321","messageId":"322","endLine":1,"endColumn":77},{"ruleId":"355","severity":1,"message":"356","line":40,"column":32,"nodeType":"357","messageId":"326","endLine":40,"endColumn":34},{"ruleId":"355","severity":1,"message":"356","line":40,"column":61,"nodeType":"357","messageId":"326","endLine":40,"endColumn":63},{"ruleId":"355","severity":1,"message":"358","line":64,"column":31,"nodeType":"357","messageId":"326","endLine":64,"endColumn":33},{"ruleId":"355","severity":1,"message":"356","line":151,"column":20,"nodeType":"357","messageId":"326","endLine":151,"endColumn":22},{"ruleId":"355","severity":1,"message":"356","line":164,"column":27,"nodeType":"357","messageId":"326","endLine":164,"endColumn":29},{"ruleId":"355","severity":1,"message":"356","line":175,"column":27,"nodeType":"357","messageId":"326","endLine":175,"endColumn":29},{"ruleId":"355","severity":1,"message":"356","line":192,"column":20,"nodeType":"357","messageId":"326","endLine":192,"endColumn":22},{"ruleId":"355","severity":1,"message":"356","line":202,"column":27,"nodeType":"357","messageId":"326","endLine":202,"endColumn":29},{"ruleId":"355","severity":1,"message":"356","line":207,"column":27,"nodeType":"357","messageId":"326","endLine":207,"endColumn":29},{"ruleId":"315","replacedBy":"359"},{"ruleId":"317","replacedBy":"360"},{"ruleId":"319","severity":1,"message":"361","line":1,"column":23,"nodeType":"321","messageId":"322","endLine":1,"endColumn":33},{"ruleId":"319","severity":1,"message":"362","line":1,"column":35,"nodeType":"321","messageId":"322","endLine":1,"endColumn":48},{"ruleId":"319","severity":1,"message":"363","line":3,"column":8,"nodeType":"321","messageId":"322","endLine":3,"endColumn":17},{"ruleId":"319","severity":1,"message":"353","line":4,"column":36,"nodeType":"321","messageId":"322","endLine":4,"endColumn":42},{"ruleId":"319","severity":1,"message":"364","line":4,"column":44,"nodeType":"321","messageId":"322","endLine":4,"endColumn":47},{"ruleId":"365","severity":1,"message":"366","line":11,"column":1,"nodeType":"367","endLine":12,"endColumn":55},{"ruleId":"319","severity":1,"message":"368","line":2,"column":5,"nodeType":"321","messageId":"322","endLine":2,"endColumn":11},{"ruleId":"319","severity":1,"message":"353","line":3,"column":5,"nodeType":"321","messageId":"322","endLine":3,"endColumn":11},{"ruleId":"319","severity":1,"message":"369","line":5,"column":5,"nodeType":"321","messageId":"322","endLine":5,"endColumn":12},{"ruleId":"319","severity":1,"message":"370","line":6,"column":5,"nodeType":"321","messageId":"322","endLine":6,"endColumn":17},{"ruleId":"319","severity":1,"message":"371","line":16,"column":10,"nodeType":"321","messageId":"322","endLine":16,"endColumn":30},{"ruleId":"329","severity":1,"message":"330","line":26,"column":15,"nodeType":"331","endLine":48,"endColumn":6},{"ruleId":"329","severity":1,"message":"372","line":48,"column":8,"nodeType":"333","endLine":48,"endColumn":10,"suggestions":"373"},{"ruleId":"374","severity":1,"message":"375","line":19,"column":78,"nodeType":"376","endLine":19,"endColumn":93},{"ruleId":"319","severity":1,"message":"377","line":3,"column":8,"nodeType":"321","messageId":"322","endLine":3,"endColumn":17},{"ruleId":"355","severity":1,"message":"358","line":16,"column":26,"nodeType":"357","messageId":"326","endLine":16,"endColumn":28},{"ruleId":"319","severity":1,"message":"378","line":23,"column":8,"nodeType":"321","messageId":"322","endLine":23,"endColumn":13},{"ruleId":"319","severity":1,"message":"379","line":24,"column":74,"nodeType":"321","messageId":"322","endLine":24,"endColumn":93},{"ruleId":"355","severity":1,"message":"358","line":85,"column":33,"nodeType":"357","messageId":"326","endLine":85,"endColumn":35},{"ruleId":"355","severity":1,"message":"356","line":96,"column":28,"nodeType":"357","messageId":"326","endLine":96,"endColumn":30},{"ruleId":"319","severity":1,"message":"380","line":5,"column":48,"nodeType":"321","messageId":"322","endLine":5,"endColumn":53},{"ruleId":"319","severity":1,"message":"381","line":6,"column":25,"nodeType":"321","messageId":"322","endLine":6,"endColumn":29},{"ruleId":"319","severity":1,"message":"382","line":7,"column":16,"nodeType":"321","messageId":"322","endLine":7,"endColumn":22},{"ruleId":"319","severity":1,"message":"320","line":9,"column":10,"nodeType":"321","messageId":"322","endLine":9,"endColumn":23},{"ruleId":"319","severity":1,"message":"383","line":9,"column":44,"nodeType":"321","messageId":"322","endLine":9,"endColumn":56},{"ruleId":"319","severity":1,"message":"384","line":9,"column":58,"nodeType":"321","messageId":"322","endLine":9,"endColumn":72},{"ruleId":"319","severity":1,"message":"385","line":22,"column":12,"nodeType":"321","messageId":"322","endLine":22,"endColumn":22},{"ruleId":"319","severity":1,"message":"386","line":22,"column":24,"nodeType":"321","messageId":"322","endLine":22,"endColumn":37},{"ruleId":"319","severity":1,"message":"387","line":24,"column":12,"nodeType":"321","messageId":"322","endLine":24,"endColumn":21},{"ruleId":"319","severity":1,"message":"388","line":25,"column":12,"nodeType":"321","messageId":"322","endLine":25,"endColumn":17},{"ruleId":"319","severity":1,"message":"386","line":21,"column":24,"nodeType":"321","messageId":"322","endLine":21,"endColumn":37},{"ruleId":"319","severity":1,"message":"387","line":24,"column":12,"nodeType":"321","messageId":"322","endLine":24,"endColumn":21},{"ruleId":"319","severity":1,"message":"388","line":25,"column":12,"nodeType":"321","messageId":"322","endLine":25,"endColumn":17},{"ruleId":"355","severity":1,"message":"356","line":40,"column":21,"nodeType":"357","messageId":"326","endLine":40,"endColumn":23},{"ruleId":"355","severity":1,"message":"356","line":40,"column":43,"nodeType":"357","messageId":"326","endLine":40,"endColumn":45},{"ruleId":"355","severity":1,"message":"356","line":40,"column":67,"nodeType":"357","messageId":"326","endLine":40,"endColumn":69},{"ruleId":"355","severity":1,"message":"358","line":23,"column":26,"nodeType":"357","messageId":"326","endLine":23,"endColumn":28},{"ruleId":"319","severity":1,"message":"389","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":18},{"ruleId":"323","severity":1,"message":"324","line":169,"column":68,"nodeType":"325","messageId":"326","endLine":169,"endColumn":72,"fix":"390"},{"ruleId":"319","severity":1,"message":"391","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":26},{"ruleId":"355","severity":1,"message":"356","line":41,"column":35,"nodeType":"357","messageId":"326","endLine":41,"endColumn":37},{"ruleId":"329","severity":1,"message":"392","line":43,"column":8,"nodeType":"333","endLine":43,"endColumn":28,"suggestions":"393"},{"ruleId":"323","severity":1,"message":"324","line":145,"column":83,"nodeType":"325","messageId":"326","endLine":145,"endColumn":87,"fix":"394"},{"ruleId":"329","severity":1,"message":"395","line":10,"column":97,"nodeType":"333","endLine":10,"endColumn":113,"suggestions":"396"},{"ruleId":"319","severity":1,"message":"397","line":1,"column":31,"nodeType":"321","messageId":"322","endLine":1,"endColumn":37},{"ruleId":"329","severity":1,"message":"330","line":42,"column":15,"nodeType":"331","endLine":84,"endColumn":6},{"ruleId":"398","severity":1,"message":"399","line":59,"column":21,"nodeType":"400","messageId":"401","endLine":69,"endColumn":22},{"ruleId":"329","severity":1,"message":"402","line":84,"column":8,"nodeType":"333","endLine":84,"endColumn":10,"suggestions":"403"},{"ruleId":"374","severity":1,"message":"375","line":120,"column":101,"nodeType":"376","endLine":120,"endColumn":108},"no-native-reassign",["404"],"no-negated-in-lhs",["405"],"no-unused-vars","'kPrimaryBlack' is defined but never used.","Identifier","unusedVar","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"406","text":"407"},{"range":"408","text":"407"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'updateConnections'. Either include it or remove the dependency array.","ArrayExpression",["409"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["410"],"'CardHolder' is defined but never used.","'SkilLCard' is defined but never used.","'Recommendation' is defined but never used.","'Connection' is defined but never used.","'fname' is assigned a value but never used.","'lname' is assigned a value but never used.","'isChangePassword' is assigned a value but never used.","'setIsChangePassword' is assigned a value but never used.","'isDeleteAccount' is assigned a value but never used.","'setIsDeleteAccount' is assigned a value but never used.",["404"],["405"],"'Spinner' is defined but never used.","'currentpassword' is assigned a value but never used.","'newpassword' is assigned a value but never used.","'confnewpassword' is assigned a value but never used.","'Button' is defined but never used.","'ScrollView' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Expected '!==' and instead saw '!='.",["404"],["405"],"'putRequest' is defined but never used.","'deleteRequest' is defined but never used.","'anonymous' is defined but never used.","'Box' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'VStack' is defined but never used.","'Heading' is defined but never used.","'StackDivider' is defined but never used.","'updateProfilePicture' is defined but never used.","React Hook useEffect has missing dependencies: 'location.state' and 'toast'. Either include them or remove the dependency array.",["411"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'PropTypes' is defined but never used.","'axios' is defined but never used.","'kSecondaryBlueLight' is defined but never used.","'Image' is defined but never used.","'Text' is defined but never used.","'Avatar' is defined but never used.","'kPrimaryGray' is defined but never used.","'kSecondaryBlue' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'setIsLoggedIn' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'SkilButton' is defined but never used.",{"range":"412","text":"407"},"'RecommendationPost' is defined but never used.","React Hook useEffect has a missing dependency: 'authUser'. Either include it or remove the dependency array.",["413"],{"range":"414","text":"407"},"React Hook useEffect has a missing dependency: 'connections'. Either include it or remove the dependency array.",["415"],"'useRef' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'authUser', 'isAuthenticated', 'toast', and 'user'. Either include them or remove the dependency array.",["416"],"no-global-assign","no-unsafe-negation",[2371,2382],"",[2603,2614],{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},[5574,5585],{"desc":"423","fix":"424"},[5481,5492],{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},"Update the dependencies array to be: [updateConnections]",{"range":"429","text":"430"},"Update the dependencies array to be: [isAuthenticated, user]",{"range":"431","text":"432"},"Update the dependencies array to be: [location.state, toast]",{"range":"433","text":"434"},"Update the dependencies array to be: [authUser, recommendationList]",{"range":"435","text":"436"},"Update the dependencies array to be: [connectionList, connections]",{"range":"437","text":"438"},"Update the dependencies array to be: [authUser, isAuthenticated, toast, user]",{"range":"439","text":"440"},[4477,4479],"[updateConnections]",[4518,4535],"[isAuthenticated, user]",[1505,1507],"[location.state, toast]",[1463,1483],"[authUser, recommendationList]",[480,496],"[connectionList, connections]",[2840,2842],"[authUser, isAuthenticated, toast, user]"]